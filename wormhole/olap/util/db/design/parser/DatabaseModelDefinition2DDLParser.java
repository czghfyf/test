/* DatabaseModelDefinition2DDLParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. DatabaseModelDefinition2DDLParser.java */
package cn.bgotech.wormhole.olap.util.db.design.parser;

import cn.bgotech.wormhole.olap.util.db.design.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DatabaseModelDefinition2DDLParser/*@bgen(jjtree)*/implements DatabaseModelDefinition2DDLParserTreeConstants, DatabaseModelDefinition2DDLParserConstants {/*@bgen(jjtree)*/
  protected JJTDatabaseModelDefinition2DDLParserState jjtree = new JJTDatabaseModelDefinition2DDLParserState();
        private final Logger logger = LoggerFactory.getLogger(this.getClass());

        private SQLGenerator sg = new SQLGenerator();

/* parser entry */
  final public SQLGenerator parserEntry() throws ParseException {/*@bgen(jjtree) parserEntry */
    ASTparserEntry jjtn000 = new ASTparserEntry(this, JJTPARSERENTRY);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token tk;
    try {
      jj_consume_token(DB_TYPE_PREFIX);
      tk = jj_consume_token(DB_OBJ);
logger.debug("database type: " + tk.image.trim());
            sg.setDatabaseType(tk.image.trim());
      jj_consume_token(20);
      label_1:
      while (true) {
        tableDefinition();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABSTRACT_TABLE_PREFIX:
        case TABLE_PREFIX:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return sg;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void tableDefinition() throws ParseException {/*@bgen(jjtree) tableDefinition */
    ASTtableDefinition jjtn000 = new ASTtableDefinition(this, JJTTABLEDEFINITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);TableObj table = new TableObj();
    Token tk;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABSTRACT_TABLE_PREFIX:{
        jj_consume_token(ABSTRACT_TABLE_PREFIX);
logger.debug("abstract table:"); table.setAbstract(true);
        break;
        }
      case TABLE_PREFIX:{
        jj_consume_token(TABLE_PREFIX);
logger.debug("table:");
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DB_OBJ:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        tk = jj_consume_token(DB_OBJ);
        jj_consume_token(21);
logger.debug("\u005ct" + tk.image.trim());
                            table.appendExtendTableBeforeCurrentTable(tk.image.trim());
      }
      jj_consume_token(22);
      tk = jj_consume_token(DB_OBJ);
logger.debug("\u005ct" + "{" + tk.image.trim() + "}");
                            table.setName(tk.image.trim());
      jj_consume_token(23);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 21:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        jj_consume_token(21);
        tk = jj_consume_token(DB_OBJ);
logger.debug("\u005ct" + tk.image.trim());
                            table.appendExtendTableAfterCurrentTable(tk.image.trim());
      }
      jj_consume_token(20);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DB_OBJ:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        columnDefinition(table);
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sg.addTable(table);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void columnDefinition(TableObj table) throws ParseException {/*@bgen(jjtree) columnDefinition */
    ASTcolumnDefinition jjtn000 = new ASTcolumnDefinition(this, JJTCOLUMNDEFINITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);ColumnObj col;
    Token tk;
    try {
      tk = jj_consume_token(DB_OBJ);
col = new ColumnObj(tk.image.trim()); logger.debug("\u005ct\u005ctcolumn name: " + tk.image.trim());
      tk = jj_consume_token(DB_OBJ);
col.setDataType(tk.image.trim()); logger.debug("\u005ct\u005ct\u005ctdata type:" + tk.image.trim());
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        tk = jj_consume_token(INT);
col.setDataTypeLength(Integer.parseInt(tk.image.trim())); logger.debug("\u005ct\u005ct\u005ctlenght: " + tk.image.trim());
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DEFAULT_VALUE:{
        tk = jj_consume_token(DEFAULT_VALUE);
col.setDefaultValue(tk.image.trim().substring(5, tk.image.trim().length() - 1).trim()); logger.debug("\u005ct\u005ct\u005ctdefault value: " + tk.image.trim());
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NO_NULL:{
        tk = jj_consume_token(NO_NULL);
col.setNoNull(true); logger.debug("\u005ct\u005ct\u005ctno null");
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UNIQUE:{
        tk = jj_consume_token(UNIQUE);
col.setUnique(true); logger.debug("\u005ct\u005ct\u005ctunique");
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PK:{
        tk = jj_consume_token(PK);
col.setPKFlag(true); logger.debug("\u005ct\u005ct\u005ctPK");
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FK_PREFIX:{
Token fkTable;
        tk = jj_consume_token(FK_PREFIX);
        fkTable = jj_consume_token(DB_OBJ);
        jj_consume_token(24);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 25:
        case 26:
        case 27:
        case 28:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 25:{
            jj_consume_token(25);
            break;
            }
          case 26:{
            jj_consume_token(26);
            break;
            }
          case 27:{
            jj_consume_token(27);
            break;
            }
          case 28:{
            jj_consume_token(28);
            break;
            }
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
col.setFK(fkTable.image.trim(), "<PK>"); logger.debug("\u005ct\u005ct\u005ctFK: " + fkTable.image.trim() + ".<PK>");
          break;
          }
        case DB_OBJ:{
          tk = jj_consume_token(DB_OBJ);
col.setFK(fkTable.image.trim(), tk.image.trim()); logger.debug("\u005ct\u005ct\u005ctFK: " + fkTable.image.trim() + "." + tk.image.trim());
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(20);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DESC:{
        tk = jj_consume_token(DESC);
col.setDesc(tk.image.trim().substring(6, tk.image.trim().length()).trim()); logger.debug("\u005ct\u005ct\u005ct" + tk.image);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
table.addColumn(col);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  /** Generated Token Manager. */
  public DatabaseModelDefinition2DDLParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x6000,0x6000,0x800,0x200000,0x800,0x200,0x1000,0x8000,0x10000,0x20000,0x1e000000,0x1e000800,0x40000,0x80000,};
   }

  /** Constructor with InputStream. */
  public DatabaseModelDefinition2DDLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DatabaseModelDefinition2DDLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DatabaseModelDefinition2DDLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public DatabaseModelDefinition2DDLParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new DatabaseModelDefinition2DDLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public DatabaseModelDefinition2DDLParser(DatabaseModelDefinition2DDLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(DatabaseModelDefinition2DDLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[29];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 29; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
