/* TextFormatCubeParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. TextFormatCubeParser.java */
package cn.bgotech.wormhole.olap.imp.text.parser;

import java.io.StringReader;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import cn.bgotech.wormhole.olap.imp.text.RawCubeDataPackage;
import cn.bgotech.wormhole.olap.imp.text.VectorLine;

import cn.bgotech.wormhole.olap.exception.OlapException;

//import cn.bgotech.prophet.bi.exception.BIException;

//import cn.bgotech.prophet.bi.service.olap.importdata.text.ImportTextCubeDataBlank;
//import cn.bgotech.prophet.bi.service.olap.importdata.text.MeasureDataLine4Import;

public class TextFormatCubeParser/*@bgen(jjtree)*/implements TextFormatCubeParserTreeConstants, TextFormatCubeParserConstants {/*@bgen(jjtree)*/
  protected JJTTextFormatCubeParserState jjtree = new JJTTextFormatCubeParserState();
        private final Logger logger = LoggerFactory.getLogger(this.getClass());

//	private SimpleNode root = null;

        public static String peelShell(String s) {
        s = s.trim();
        return s.substring(1, s.length() - 1).trim();
    }

    public TextFormatCubeParser(String dataWrittenText) {
        this(new StringReader(dataWrittenText));
    }

/* parser entry */
  final public RawCubeDataPackage parserEntry() throws ParseException, OlapException {/*@bgen(jjtree) parserEntry */
    ASTparserEntry jjtn000 = new ASTparserEntry(this, JJTPARSERENTRY);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);RawCubeDataPackage pkg = new RawCubeDataPackage();
        Token t = null;
        Token dimensionRoleTk = null;
        VectorLine line = null;
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DIMENSION:{
          t = jj_consume_token(DIMENSION);
          dimensionRoleTk = jj_consume_token(DIMENSION_ROLE);
pkg.addUniversalDimensionName(peelShell(t.image), peelShell(peelShell(peelShell(peelShell(dimensionRoleTk.image)))));
          break;
          }
        case PRE_DIMENSION:{
          t = jj_consume_token(PRE_DIMENSION);
          dimensionRoleTk = jj_consume_token(DIMENSION_ROLE);
pkg.addUniversalDimensionName(peelShell(peelShell(t.image)), peelShell(peelShell(peelShell(peelShell(dimensionRoleTk.image)))), true);
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DIMENSION:
        case PRE_DIMENSION:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
      }
      label_2:
      while (true) {
        t = jj_consume_token(MEASURE);
pkg.addMeasureMemberName(peelShell(t.image));
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MEASURE:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
      }
      label_3:
      while (true) {
line = new VectorLine();
        label_4:
        while (true) {
          t = jj_consume_token(MEMBER);
line.addUniversalMemberTrail(peelShell(t.image));
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MEMBER:{
            ;
            break;
            }
          default:
            jj_la1[3] = jj_gen;
            break label_4;
          }
        }
        label_5:
        while (true) {
          t = jj_consume_token(VALUE);
line.addMeasureValue(peelShell(t.image));
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case VALUE:{
            ;
            break;
            }
          default:
            jj_la1[4] = jj_gen;
            break label_5;
          }
        }
pkg.addLine(line);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MEMBER:{
          ;
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
      }
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
//		this.root = jjtThis;
                {if ("" != null) return pkg;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public TextFormatCubeParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x300,0x300,0x800,0x1000,0x2000,0x1000,};
   }

  /** Constructor with InputStream. */
  public TextFormatCubeParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TextFormatCubeParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TextFormatCubeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public TextFormatCubeParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new TextFormatCubeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public TextFormatCubeParser(TextFormatCubeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(TextFormatCubeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[14];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 14; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

//	public ImportCubeDatasTextParser(String fileText) {
//		this(new StringReader(fileText));
//	}

//	public SimpleNode getRoot() {
//		return root;
//	}

}
