/* WormholeMDXParserTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. WormholeMDXParserTokenManager.java */
package cn.bgotech.wormhole.olap.mdx.parser;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java.util.LinkedList;
import cn.bgotech.wormhole.olap.OlapEngine;
import cn.bgotech.wormhole.olap.mdx.*;
import cn.bgotech.wormhole.olap.mdx.auxi.*;
import cn.bgotech.wormhole.olap.mdx.profile.*;
import cn.bgotech.wormhole.olap.mdx.bg_expansion.*;
import cn.bgotech.wormhole.olap.mdx.syntax.exp.*;
import cn.bgotech.wormhole.olap.mdx.syntax.b00lean.exp.*;
import cn.bgotech.wormhole.olap.mdx.syntax.structures.*;
import cn.bgotech.wormhole.olap.mdx.syntax.fun.exp.*;
import cn.bgotech.wormhole.olap.mdx.syntax.fun.member.*;
import cn.bgotech.wormhole.olap.mdx.syntax.fun.set.*;
import cn.bgotech.wormhole.olap.mdx.syntax.b00lean.functions.*;

/** Token Manager. */
@SuppressWarnings("unused")public class WormholeMDXParserTokenManager implements WormholeMDXParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 2;
         return jjMoveNfa_0(5, 0);
      case 10:
         jjmatchedKind = 3;
         return jjMoveNfa_0(5, 0);
      case 12:
         jjmatchedKind = 5;
         return jjMoveNfa_0(5, 0);
      case 13:
         jjmatchedKind = 4;
         return jjMoveNfa_0(5, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_0(5, 0);
      case 33:
         jjmatchedKind = 274;
         return jjMoveNfa_0(5, 0);
      case 37:
         jjmatchedKind = 273;
         return jjMoveNfa_0(5, 0);
      case 39:
         jjmatchedKind = 268;
         return jjMoveNfa_0(5, 0);
      case 40:
         jjmatchedKind = 265;
         return jjMoveNfa_0(5, 0);
      case 41:
         jjmatchedKind = 267;
         return jjMoveNfa_0(5, 0);
      case 42:
         jjmatchedKind = 271;
         return jjMoveNfa_0(5, 0);
      case 43:
         jjmatchedKind = 269;
         return jjMoveNfa_0(5, 0);
      case 44:
         jjmatchedKind = 266;
         return jjMoveNfa_0(5, 0);
      case 45:
         jjmatchedKind = 270;
         return jjMoveNfa_0(5, 0);
      case 46:
         jjmatchedKind = 283;
         return jjMoveNfa_0(5, 0);
      case 47:
         jjmatchedKind = 272;
         return jjMoveNfa_0(5, 0);
      case 58:
         jjmatchedKind = 275;
         return jjMoveNfa_0(5, 0);
      case 59:
         jjmatchedKind = 262;
         return jjMoveNfa_0(5, 0);
      case 60:
         jjmatchedKind = 280;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x6000000L);
      case 61:
         jjmatchedKind = 264;
         return jjMoveNfa_0(5, 0);
      case 62:
         jjmatchedKind = 278;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x800000L);
      case 64:
         jjmatchedKind = 263;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x80000L, 0x30L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x3ff00L, 0x0L, 0x4000000000000000L, 0x202000000100001L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x1c0000L, 0x0L, 0x0L, 0x180c020000000400L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x7ffffe00000L, 0x0L, 0x100000000000000L, 0x2430200248L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x7fff80000000000L, 0x0L, 0x400000000000000L, 0x400800000001000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0xf800000000000000L, 0x3L, 0x0L, 0x200000800000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfcL, 0x20000000000000L, 0x1000000000L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf00L, 0x0L, 0x0L, 0x0L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf000L, 0x0L, 0x0L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7ff0000L, 0x0L, 0x100208402000L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfff8000000L, 0x0L, 0x80400002008000L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xff0000000000L, 0xa00000000000000L, 0x800004000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3ff000000000000L, 0x0L, 0x2L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000000L, 0x8000000000000000L, 0x100000000000004L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf800000000000000L, 0x1L, 0x1c4000020L, 0x0L);
      case 81:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2L, 0x0L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10000000000000fcL, 0x10L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2010000001ffff00L, 0x71000001030180L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3fe000000L, 0x4c000000000L, 0x0L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1fc00000000L, 0x80000000800L, 0x0L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1fe0000000000L, 0x0L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xc6000000000000L, 0x40000L, 0x0L);
      case 88:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000000000000L, 0x0L, 0x0L);
      case 89:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x10000000000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x3ff00L, 0x0L, 0x4000000000000000L, 0x202000000100001L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1c0000L, 0x0L, 0x0L, 0x180c020000000400L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x7ffffe00000L, 0x0L, 0x100000000000000L, 0x2430200248L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x7fff80000000000L, 0x0L, 0x400000000000000L, 0x400800000001000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0xf800000000000000L, 0x3L, 0x0L, 0x200000800000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfcL, 0x20000000000000L, 0x1000000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf00L, 0x0L, 0x0L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf000L, 0x0L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7ff0000L, 0x0L, 0x100208402000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfff8000000L, 0x0L, 0x80400002008000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xff0000000000L, 0xa00000000000000L, 0x800004000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3ff000000000000L, 0x0L, 0x2L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000000L, 0x8000000000000000L, 0x100000000000004L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf800000000000000L, 0x1L, 0x1c4000020L, 0x0L);
      case 113:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10000000000000fcL, 0x10L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2010000001ffff00L, 0x71000001030180L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3fe000000L, 0x4c000000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1fc00000000L, 0x80000000800L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1fe0000000000L, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xc6000000000000L, 0x40000L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000000000000L, 0x0L, 0x0L);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x10000000000L, 0x0L);
      case 123:
         jjmatchedKind = 276;
         return jjMoveNfa_0(5, 0);
      case 125:
         jjmatchedKind = 277;
         return jjMoveNfa_0(5, 0);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 0);
   }
   switch(curChar)
   {
      case 61:
         if ((active4 & 0x800000L) != 0L)
         {
            jjmatchedKind = 279;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 281;
            jjmatchedPos = 1;
         }
         break;
      case 62:
         if ((active4 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 282;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x3fe00000L, active1, 0x803070078000004L, active2, 0x7e0000000004L, active3, 0x800408140004020L, active4, 0L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0L, active2, 0x100L, active3, 0L, active4, 0L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0L, active2, 0L, active3, 0x1000000000000000L, active4, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x3800c0000000L, active1, 0x100c380380001100L, active2, 0x2a10000000000e38L, active3, 0x4fd800800001080L, active4, 0L);
      case 70:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000000L, active4, 0L);
      case 71:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L, active1, 0x20000L, active2, 0L, active3, 0L, active4, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x42000006000000L, active3, 0x2000000040L, active4, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c00000000000L, active1, 0x40fc0000e038L, active2, 0x481800000000000L, active3, 0x1008000000L, active4, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000300001000L, active1, 0x2000000000000200L, active2, 0L, active3, 0x100000L, active4, 0L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20L);
      case 78:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x4L) != 0L)
         {
            jjmatchedKind = 194;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000006000L, active1, 0x180000L, active2, 0xc00000000L, active3, 0x180000402001L, active4, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x7c000c0000L, active1, 0x41f0000000000040L, active2, 0x10080000380010c0L, active3, 0x6401220801aL, active4, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000000000L, active2, 0L, active3, 0x900L, active4, 0L);
      case 82:
         if ((active2 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x47fe018000000000L, active1, 0x8000000000000c80L, active2, 0x200000c0000001L, active3, 0x100000484040200L, active4, 0L);
      case 83:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0x3c00000L, active2, 0x1f000000000L, active3, 0x200000200080000L, active4, 0x10L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800004000000L, active2, 0x4000000ffe002L, active3, 0x10000000000L, active4, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000000000L, active1, 0x200000000000000L, active2, 0x100000101000000L, active3, 0x21000400L, active4, 0L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000020000L, active1, 0x3L, active2, 0L, active3, 0x200000800000L, active4, 0L);
      case 89:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x200000000L, active3, 0x30000L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x3fe00000L, active1, 0x803070078000004L, active2, 0x7e0000000004L, active3, 0x800408140004020L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0L, active2, 0x100L, active3, 0L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0L, active2, 0L, active3, 0x1000000000000000L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x3800c0000000L, active1, 0x100c380380001100L, active2, 0x2a10000000000e38L, active3, 0x4fd800800001080L, active4, 0L);
      case 102:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000000L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L, active1, 0x20000L, active2, 0L, active3, 0L, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x42000006000000L, active3, 0x2000000040L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c00000000000L, active1, 0x40fc0000e038L, active2, 0x481800000000000L, active3, 0x1008000000L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000300001000L, active1, 0x2000000000000200L, active2, 0L, active3, 0x100000L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20L);
      case 110:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x4L) != 0L)
         {
            jjmatchedKind = 194;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000006000L, active1, 0x180000L, active2, 0xc00000000L, active3, 0x180000402001L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x7c000c0000L, active1, 0x41f0000000000040L, active2, 0x10080000380010c0L, active3, 0x6401220801aL, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000000000L, active2, 0L, active3, 0x900L, active4, 0L);
      case 114:
         if ((active2 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x47fe018000000000L, active1, 0x8000000000000c80L, active2, 0x200000c0000001L, active3, 0x100000484040200L, active4, 0L);
      case 115:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0x3c00000L, active2, 0x1f000000000L, active3, 0x200000200080000L, active4, 0x10L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800004000000L, active2, 0x4000000ffe002L, active3, 0x10000000000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000000000L, active1, 0x200000000000000L, active2, 0x100000101000000L, active3, 0x21000400L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000020000L, active1, 0x3L, active2, 0L, active3, 0x200000800000L, active4, 0L);
      case 121:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x200000000L, active3, 0x30000L, active4, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_0(5, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 1);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000080080401000L, active2, 0x800000000000000L, active3, 0x80000010008140L, active4, 0L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x100000001000000L, active3, 0L, active4, 0L);
      case 67:
         if ((active3 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 249;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000020e000L, active1, 0x80000L, active2, 0x8L, active3, 0x200000c00080L, active4, 0L);
      case 68:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 178;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x1L) != 0L)
         {
            jjmatchedKind = 192;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x400L, active1, 0x100000102000L, active2, 0x1e000L, active3, 0x100000000000800L, active4, 0L);
      case 69:
         if ((active2 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x18100010000L, active1, 0x840000000400c080L, active2, 0x4201e042000000L, active3, 0x1000000280080200L, active4, 0x30L);
      case 70:
         if ((active3 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 219;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x180000000000L, active1, 0L, active2, 0L, active3, 0xc000000000000L, active4, 0L);
      case 71:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x800L, active1, 0x800000L, active2, 0x8000000L, active3, 0x20L, active4, 0L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x3fe000000020000L, active1, 0L, active2, 0xc04000000L, active3, 0x8a000040400L, active4, 0L);
      case 76:
         if ((active3 & 0x100000L) != 0L)
         {
            jjmatchedKind = 212;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4cfc01000L, active1, 0x200000001000004L, active2, 0x1010060000000050L, active3, 0x71001000001008L, active4, 0L);
      case 77:
         if ((active3 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 216;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0x3200000000000L, active2, 0x600000000000000L, active3, 0x800000000L, active4, 0L);
      case 78:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000fc00020100L, active2, 0x4L, active3, 0x30000L, active4, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000200000000L, active1, 0xe00L, active2, 0x20000000020181L, active3, 0x406000000L, active4, 0L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0x1L, active2, 0x310000000L, active3, 0x44000000000L, active4, 0L);
      case 82:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 179;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4000060800000000L, active1, 0x1000000000000038L, active2, 0x700000fc1000L, active3, 0x160000000L, active4, 0L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x801a00030000100L, active1, 0x4804000072000000L, active2, 0x1800000000200L, active3, 0xc00800000002000L, active4, 0L);
      case 84:
         if ((active2 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 189;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x2L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xc0200L, active1, 0x100010000000002L, active2, 0x80000020000c20L, active3, 0x2520000000000L, active4, 0L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0L, active2, 0x80000000L, active3, 0x200000L, active4, 0L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000000L, active1, 0x300000000L, active2, 0L, active3, 0L, active4, 0L);
      case 87:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10L, active4, 0L);
      case 88:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8020000000000L, active2, 0L, active3, 0x4000L, active4, 0L);
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x30000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000080080401000L, active2, 0x800000000000000L, active3, 0x80000010008140L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x100000001000000L, active3, 0L, active4, 0L);
      case 99:
         if ((active3 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 249;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000020e000L, active1, 0x80000L, active2, 0x8L, active3, 0x200000c00080L, active4, 0L);
      case 100:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 178;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x1L) != 0L)
         {
            jjmatchedKind = 192;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x400L, active1, 0x100000102000L, active2, 0x1e000L, active3, 0x100000000000800L, active4, 0L);
      case 101:
         if ((active2 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x18100010000L, active1, 0x840000000400c080L, active2, 0x4201e042000000L, active3, 0x1000000280080200L, active4, 0x30L);
      case 102:
         if ((active3 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 219;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x180000000000L, active1, 0L, active2, 0L, active3, 0xc000000000000L, active4, 0L);
      case 103:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x800L, active1, 0x800000L, active2, 0x8000000L, active3, 0x20L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x3fe000000020000L, active1, 0L, active2, 0xc04000000L, active3, 0x8a000040400L, active4, 0L);
      case 108:
         if ((active3 & 0x100000L) != 0L)
         {
            jjmatchedKind = 212;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4cfc01000L, active1, 0x200000001000004L, active2, 0x1010060000000050L, active3, 0x71001000001008L, active4, 0L);
      case 109:
         if ((active3 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 216;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0x3200000000000L, active2, 0x600000000000000L, active3, 0x800000000L, active4, 0L);
      case 110:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000fc00020100L, active2, 0x4L, active3, 0x30000L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000200000000L, active1, 0xe00L, active2, 0x20000000020181L, active3, 0x406000000L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0x1L, active2, 0x310000000L, active3, 0x44000000000L, active4, 0L);
      case 114:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 179;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4000060800000000L, active1, 0x1000000000000038L, active2, 0x700000fc1000L, active3, 0x160000000L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x801a00030000100L, active1, 0x4804000072000000L, active2, 0x1800000000200L, active3, 0xc00800000002000L, active4, 0L);
      case 116:
         if ((active2 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 189;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x2L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xc0200L, active1, 0x100010000000002L, active2, 0x80000020000c20L, active3, 0x2520000000000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0L, active2, 0x80000000L, active3, 0x200000L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000000L, active1, 0x300000000L, active2, 0L, active3, 0L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10L, active4, 0L);
      case 120:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8020000000000L, active2, 0L, active3, 0x4000L, active4, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_0(5, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 2);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x19e100000000L, active1, 0x10000000000000L, active2, 0x20000010L, active3, 0x100000a00L, active4, 0L);
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000200L, active2, 0x200000000000000L, active3, 0x800000000L, active4, 0L);
      case 67:
         if ((active3 & 0x20000L) != 0L)
         {
            jjmatchedKind = 209;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 250;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 251;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x200007c00400L, active1, 0x10000000000L, active2, 0L, active3, 0x804000010100L, active4, 0L);
      case 68:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000002000L, active2, 0x6000L, active3, 0x8000L, active4, 0L);
      case 69:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 158;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 161;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 184;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 188;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000e000L, active1, 0x82000301900180L, active2, 0x410000000018000L, active3, 0x102700040003020L, active4, 0L);
      case 70:
         if ((active3 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 240;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x70000000000000L, active4, 0L);
      case 71:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0L, active4, 0L);
      case 72:
         if ((active2 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 183;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L, active1, 0x1000100002000000L, active2, 0x320000040000L, active3, 0L, active4, 0L);
      case 75:
         if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000L, active2, 0L, active3, 0x2000000L, active4, 0L);
      case 76:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x83fe000080000000L, active1, 0x80001L, active2, 0x100000040L, active3, 0x2010c00400L, active4, 0L);
      case 77:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 181;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L, active1, 0L, active2, 0L, active3, 0x200000000L, active4, 0x20L);
      case 78:
         if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000400000L, active2, 0L, active3, 0x280000L, active4, 0L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000100L, active1, 0x20000L, active2, 0L, active3, 0xc080000000000L, active4, 0L);
      case 80:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000000000L, active2, 0x101L, active3, 0x40004000040L, active4, 0L);
      case 81:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0xc00000000L, active3, 0L, active4, 0L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x60800010800L, active1, 0x2f80000c002L, active2, 0x40010000020000L, active3, 0x20000000L, active4, 0L);
      case 83:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x10L) != 0L)
         {
            jjmatchedKind = 196;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1200000000L, active1, 0x8000000003cL, active2, 0x800000011000200L, active3, 0x1000000400000000L, active4, 0L);
      case 84:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x10L) != 0L)
         {
            jjmatchedKind = 260;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x10018000000c0000L, active1, 0x8000070000000L, active2, 0xf80c00L, active3, 0x21000040080L, active4, 0L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0xc00L, active2, 0x1840000000028L, active3, 0x8L, active4, 0L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000080000000L, active4, 0L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000000000L, active2, 0xe000000000L, active3, 0x4000L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x19e100000000L, active1, 0x10000000000000L, active2, 0x20000010L, active3, 0x100000a00L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000200L, active2, 0x200000000000000L, active3, 0x800000000L, active4, 0L);
      case 99:
         if ((active3 & 0x20000L) != 0L)
         {
            jjmatchedKind = 209;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 250;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 251;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x200007c00400L, active1, 0x10000000000L, active2, 0L, active3, 0x804000010100L, active4, 0L);
      case 100:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000002000L, active2, 0x6000L, active3, 0x8000L, active4, 0L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 158;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 161;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 184;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 188;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000e000L, active1, 0x82000301900180L, active2, 0x410000000018000L, active3, 0x102700040003020L, active4, 0L);
      case 102:
         if ((active3 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 240;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x70000000000000L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0L, active4, 0L);
      case 104:
         if ((active2 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 183;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L, active1, 0x1000100002000000L, active2, 0x320000040000L, active3, 0L, active4, 0L);
      case 107:
         if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000L, active2, 0L, active3, 0x2000000L, active4, 0L);
      case 108:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x83fe000080000000L, active1, 0x80001L, active2, 0x100000040L, active3, 0x2010c00400L, active4, 0L);
      case 109:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 181;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L, active1, 0L, active2, 0L, active3, 0x200000000L, active4, 0x20L);
      case 110:
         if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000400000L, active2, 0L, active3, 0x280000L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000100L, active1, 0x20000L, active2, 0L, active3, 0xc080000000000L, active4, 0L);
      case 112:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000000000L, active2, 0x101L, active3, 0x40004000040L, active4, 0L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0xc00000000L, active3, 0L, active4, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x60800010800L, active1, 0x2f80000c002L, active2, 0x40010000020000L, active3, 0x20000000L, active4, 0L);
      case 115:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x10L) != 0L)
         {
            jjmatchedKind = 196;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1200000000L, active1, 0x8000000003cL, active2, 0x800000011000200L, active3, 0x1000000400000000L, active4, 0L);
      case 116:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x10L) != 0L)
         {
            jjmatchedKind = 260;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x10018000000c0000L, active1, 0x8000070000000L, active2, 0xf80c00L, active3, 0x21000040080L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0xc00L, active2, 0x1840000000028L, active3, 0x8L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000080000000L, active4, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_0(5, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 3);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x10400L, active1, 0x10000100c203L, active2, 0x1b00000020000L, active3, 0L, active4, 0L);
      case 66:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000L, active2, 0L, active3, 0L, active4, 0x20L);
      case 67:
         if ((active3 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 252;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10400000L, active2, 0x10000000000000L, active3, 0L, active4, 0L);
      case 68:
         if ((active3 & 0x400L) != 0L)
         {
            jjmatchedKind = 202;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x20000000000L, active3, 0x2000080000L, active4, 0L);
      case 69:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 170;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 182;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x100L) != 0L)
         {
            jjmatchedKind = 200;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x60800001800L, active1, 0x20f800002000L, active2, 0x200002101006001L, active3, 0x80841834040000L, active4, 0L);
      case 70:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 72:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000000L, active2, 0L, active3, 0x10000L, active4, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x1801200000000L, active1, 0x8400000000000000L, active2, 0x200L, active3, 0x80L, active4, 0L);
      case 76:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x3fe000000000100L, active1, 0x10000200000000L, active2, 0x28000000L, active3, 0x100000000L, active4, 0L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0x88000400000000L, active2, 0L, active3, 0x80004008L, active4, 0L);
      case 78:
         if ((active3 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 235;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x400000008000L, active1, 0x800000L, active2, 0x400010000000000L, active3, 0x40000000L, active4, 0L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0xc0200L, active1, 0x1000020000000000L, active2, 0xf80c00L, active3, 0x24000000000L, active4, 0L);
      case 80:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000800L, active2, 0x40000L, active3, 0x200200000000L, active4, 0L);
      case 82:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 241;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 248;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x206000000000L, active1, 0x120000000020100L, active2, 0x28L, active3, 0xc500000002000L, active4, 0L);
      case 83:
         if ((active3 & 0x20L) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x6000L, active1, 0x40000000L, active2, 0L, active3, 0x400000000L, active4, 0L);
      case 84:
         if ((active3 & 0x200000L) != 0L)
         {
            jjmatchedKind = 213;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x18000000000L, active1, 0x2000000000038L, active2, 0x10L, active3, 0x1a40L, active4, 0L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000180007c00000L, active1, 0x80000080000L, active2, 0x800000c10000040L, active3, 0x2c00000L, active4, 0L);
      case 86:
         if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x10000L, active3, 0L, active4, 0L);
      case 87:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0xc000000000L, active3, 0L, active4, 0L);
      case 88:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 4;
         }
         break;
      case 89:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 4;
         }
         break;
      case 90:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80L, active2, 0L, active3, 0L, active4, 0L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x70000000008000L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x10400L, active1, 0x10000100c203L, active2, 0x1b00000020000L, active3, 0L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000L, active2, 0L, active3, 0L, active4, 0x20L);
      case 99:
         if ((active3 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 252;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10400000L, active2, 0x10000000000000L, active3, 0L, active4, 0L);
      case 100:
         if ((active3 & 0x400L) != 0L)
         {
            jjmatchedKind = 202;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x20000000000L, active3, 0x2000080000L, active4, 0L);
      case 101:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 170;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 182;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x100L) != 0L)
         {
            jjmatchedKind = 200;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x60800001800L, active1, 0x20f800002000L, active2, 0x200002101006001L, active3, 0x80841834040000L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000000L, active2, 0L, active3, 0x10000L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1801200000000L, active1, 0x8400000000000000L, active2, 0x200L, active3, 0x80L, active4, 0L);
      case 108:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x3fe000000000100L, active1, 0x10000200000000L, active2, 0x28000000L, active3, 0x100000000L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0x88000400000000L, active2, 0L, active3, 0x80004008L, active4, 0L);
      case 110:
         if ((active3 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 235;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x400000008000L, active1, 0x800000L, active2, 0x400010000000000L, active3, 0x40000000L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0xc0200L, active1, 0x1000020000000000L, active2, 0xf80c00L, active3, 0x24000000000L, active4, 0L);
      case 112:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000800L, active2, 0x40000L, active3, 0x200200000000L, active4, 0L);
      case 114:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 241;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 248;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x206000000000L, active1, 0x120000000020100L, active2, 0x28L, active3, 0xc500000002000L, active4, 0L);
      case 115:
         if ((active3 & 0x20L) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x6000L, active1, 0x40000000L, active2, 0L, active3, 0x400000000L, active4, 0L);
      case 116:
         if ((active3 & 0x200000L) != 0L)
         {
            jjmatchedKind = 213;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x18000000000L, active1, 0x2000000000038L, active2, 0x10L, active3, 0x1a40L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000180007c00000L, active1, 0x80000080000L, active2, 0x800000c10000040L, active3, 0x2c00000L, active4, 0L);
      case 118:
         if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x10000L, active3, 0L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0xc000000000L, active3, 0L, active4, 0L);
      case 120:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 4;
         }
         break;
      case 121:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 4;
         }
         break;
      case 122:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80L, active2, 0L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_0(5, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 4);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100L, active2, 0x10000000400L, active3, 0x30400000000000L, active4, 0L);
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000000040000L, active4, 0L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000000000aL, active2, 0x40000L, active3, 0x8000L, active4, 0L);
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0x807e000000008000L, active1, 0x1000000000080000L, active2, 0L, active3, 0xc00000L, active4, 0L);
      case 69:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x200L) != 0L)
         {
            jjmatchedKind = 201;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x800L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x1000L) != 0L)
         {
            jjmatchedKind = 204;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 242;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x18000000000L, active1, 0x108010420c00000L, active2, 0xc808000000L, active3, 0x8000080004040L, active4, 0x20L);
      case 70:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 5;
         }
         break;
      case 71:
         return jjMoveStringLiteralDfa6_0(active0, 0x10800L, active1, 0xf800000000L, active2, 0x20000L, active3, 0L, active4, 0L);
      case 72:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000000L, active2, 0L, active3, 0L, active4, 0L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x206000000000L, active1, 0x40000801L, active2, 0x10L, active3, 0L, active4, 0L);
      case 74:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000L, active4, 0L);
      case 76:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 175;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x180807c00400L, active1, 0x10000002000000L, active2, 0x1000000000000L, active3, 0x100000000L, active4, 0L);
      case 77:
         if ((active2 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0xc1000L, active1, 0L, active2, 0x20000080000L, active3, 0x20000000000L, active4, 0L);
      case 78:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x1860200000200L, active1, 0x400000000000000L, active2, 0x300000000000L, active3, 0x800020000008L, active4, 0L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L, active1, 0x22000000000000L, active2, 0x200L, active3, 0x80L, active4, 0L);
      case 80:
         if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000000000L, active2, 0x40L, active3, 0x2000000L, active4, 0L);
      case 81:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x2000000000L, active3, 0L, active4, 0L);
      case 82:
         if ((active2 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 228;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x28000000c010L, active2, 0x800000000000001L, active3, 0x42804010000L, active4, 0L);
      case 83:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 247;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0x20L, active2, 0x400000000100808L, active3, 0x100010000000L, active4, 0L);
      case 84:
         if ((active2 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 180;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x2000L) != 0L)
         {
            jjmatchedKind = 205;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 222;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 237;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000006000L, active1, 0L, active2, 0x100200000L, active3, 0x200000000L, active4, 0L);
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0x300000000000100L, active1, 0L, active2, 0L, active3, 0x4000000000L, active4, 0L);
      case 86:
         if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0xc04000L, active3, 0L, active4, 0L);
      case 87:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100L, active2, 0x10000000400L, active3, 0x30400000000000L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000000040000L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000000000aL, active2, 0x40000L, active3, 0x8000L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x807e000000008000L, active1, 0x1000000000080000L, active2, 0L, active3, 0xc00000L, active4, 0L);
      case 101:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x200L) != 0L)
         {
            jjmatchedKind = 201;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x800L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x1000L) != 0L)
         {
            jjmatchedKind = 204;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 242;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x18000000000L, active1, 0x108010420c00000L, active2, 0xc808000000L, active3, 0x8000080004040L, active4, 0x20L);
      case 102:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 5;
         }
         break;
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x10800L, active1, 0xf800000000L, active2, 0x20000L, active3, 0L, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000000L, active2, 0L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x206000000000L, active1, 0x40000801L, active2, 0x10L, active3, 0L, active4, 0L);
      case 106:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000L, active4, 0L);
      case 108:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 175;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x180807c00400L, active1, 0x10000002000000L, active2, 0x1000000000000L, active3, 0x100000000L, active4, 0L);
      case 109:
         if ((active2 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0xc1000L, active1, 0L, active2, 0x20000080000L, active3, 0x20000000000L, active4, 0L);
      case 110:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x1860200000200L, active1, 0x400000000000000L, active2, 0x300000000000L, active3, 0x800020000008L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L, active1, 0x22000000000000L, active2, 0x200L, active3, 0x80L, active4, 0L);
      case 112:
         if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000000000L, active2, 0x40L, active3, 0x2000000L, active4, 0L);
      case 113:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x2000000000L, active3, 0L, active4, 0L);
      case 114:
         if ((active2 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 228;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x28000000c010L, active2, 0x800000000000001L, active3, 0x42804010000L, active4, 0L);
      case 115:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 247;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0x20L, active2, 0x400000000100808L, active3, 0x100010000000L, active4, 0L);
      case 116:
         if ((active2 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 180;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x2000L) != 0L)
         {
            jjmatchedKind = 205;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 222;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 237;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000006000L, active1, 0L, active2, 0x100200000L, active3, 0x200000000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x300000000000100L, active1, 0L, active2, 0L, active3, 0x4000000000L, active4, 0L);
      case 118:
         if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0xc04000L, active3, 0L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000000L, active2, 0L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_0(5, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 5);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x6807c08800L, active1, 0L, active2, 0xc40000L, active3, 0x40000L, active4, 0L);
      case 66:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L, active1, 0x40000000L, active2, 0L, active3, 0L, active4, 0L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x1800000040400L, active1, 0xc000L, active2, 0x300000000040L, active3, 0x40012000000L, active4, 0L);
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0x800000000000L, active4, 0L);
      case 69:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L, active1, 0x80000L, active2, 0x800020000180000L, active3, 0x40102100c00000L, active4, 0L);
      case 71:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L, active1, 0x400000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 72:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L, active1, 0x8L, active2, 0L, active3, 0L, active4, 0L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L, active1, 0x812000020L, active2, 0x40000c000000008L, active3, 0L, active4, 0L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0x400000000000L, active4, 0L);
      case 77:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000400000000L, active2, 0x10000000000L, active3, 0x80004000L, active4, 0L);
      case 78:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800L, active2, 0x800000000L, active3, 0x30004000000080L, active4, 0L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x7e000000006000L, active1, 0x10000000000010L, active2, 0x100000000L, active3, 0x400010000L, active4, 0L);
      case 80:
         if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x300208000000200L, active1, 0x20001000000000L, active2, 0L, active3, 0x20000000000L, active4, 0L);
      case 82:
         if ((active4 & 0x20L) != 0L)
         {
            jjmatchedKind = 261;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L, active1, 0x2020800000L, active2, 0x400L, active3, 0x40L, active4, 0L);
      case 83:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x8L) != 0L)
         {
            jjmatchedKind = 195;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 227;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L, active1, 0x1002004000400000L, active2, 0L, active3, 0L, active4, 0L);
      case 84:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x1c0000000100L, active1, 0x80200000000100L, active2, 0x1000000000801L, active3, 0x24000000L, active4, 0L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x2000200000L, active3, 0x8000L, active4, 0L);
      case 86:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L, active1, 0x8000000000L, active2, 0x10L, active3, 0x80000L, active4, 0L);
      case 89:
         if ((active3 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 225;
            jjmatchedPos = 6;
         }
         break;
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000000000L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x6807c08800L, active1, 0L, active2, 0xc40000L, active3, 0x40000L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L, active1, 0x40000000L, active2, 0L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x1800000040400L, active1, 0xc000L, active2, 0x300000000040L, active3, 0x40012000000L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0x800000000000L, active4, 0L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L, active1, 0x80000L, active2, 0x800020000180000L, active3, 0x40102100c00000L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L, active1, 0x400000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L, active1, 0x8L, active2, 0L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L, active1, 0x812000020L, active2, 0x40000c000000008L, active3, 0L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0x400000000000L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000400000000L, active2, 0x10000000000L, active3, 0x80004000L, active4, 0L);
      case 110:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800L, active2, 0x800000000L, active3, 0x30004000000080L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x7e000000006000L, active1, 0x10000000000010L, active2, 0x100000000L, active3, 0x400010000L, active4, 0L);
      case 112:
         if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x300208000000200L, active1, 0x20001000000000L, active2, 0L, active3, 0x20000000000L, active4, 0L);
      case 114:
         if ((active4 & 0x20L) != 0L)
         {
            jjmatchedKind = 261;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L, active1, 0x2020800000L, active2, 0x400L, active3, 0x40L, active4, 0L);
      case 115:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x8L) != 0L)
         {
            jjmatchedKind = 195;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 227;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L, active1, 0x1002004000400000L, active2, 0L, active3, 0L, active4, 0L);
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x1c0000000100L, active1, 0x80200000000100L, active2, 0x1000000000801L, active3, 0x24000000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x2000200000L, active3, 0x8000L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L, active1, 0x8000000000L, active2, 0x10L, active3, 0x80000L, active4, 0L);
      case 121:
         if ((active3 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 225;
            jjmatchedPos = 6;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(5, 6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_0(5, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 6);
   }
   switch(curChar)
   {
      case 50:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 7;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L, active1, 0x100008000800000L, active2, 0x22800000000L, active3, 0x8800000000000L);
      case 66:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000400000020L, active2, 0L, active3, 0x8000c000L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L, active1, 0x10000000000000L, active2, 0L, active3, 0x1000000c0000L);
      case 68:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x30000000000000L);
      case 69:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000001000L, active1, 0x22000000080000L, active2, 0x200000000000L, active3, 0x60010000000L);
      case 70:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000000000000L);
      case 71:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0xc000000000L, active3, 0L);
      case 72:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0xc000L, active2, 0x40L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L, active1, 0x20000008L, active2, 0L, active3, 0x404000000L);
      case 76:
         if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 150;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000000L, active1, 0x4050000000L, active2, 0x840000L, active3, 0x100000000L);
      case 77:
         return jjMoveStringLiteralDfa8_0(active0, 0x200100080000000L, active1, 0L, active2, 0x80000L, active3, 0x400020000000L);
      case 78:
         if ((active3 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 229;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x6000008000L, active1, 0x802000000L, active2, 0L, active3, 0x10000L);
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000040000L, active1, 0x201000000000L, active2, 0x401000000000000L, active3, 0L);
      case 80:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L, active1, 0x400000000000000L, active2, 0x200000L, active3, 0L);
      case 82:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x80008000004000L, active1, 0L, active2, 0x8000400L, active3, 0L);
      case 83:
         if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 187;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x40L) != 0L)
         {
            jjmatchedKind = 198;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x80L) != 0L)
         {
            jjmatchedKind = 199;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x100000000L, active3, 0L);
      case 84:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 230;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x1200807c00800L, active1, 0x1000000000400000L, active2, 0L, active3, 0L);
      case 85:
         return jjMoveStringLiteralDfa8_0(active0, 0x80400L, active1, 0L, active2, 0L, active3, 0x2000000L);
      case 86:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x8L, active3, 0L);
      case 87:
         return jjMoveStringLiteralDfa8_0(active0, 0x7e000000000000L, active1, 0x10L, active2, 0L, active3, 0L);
      case 89:
         if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000000000L, active2, 0L, active3, 0L);
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000L, active1, 0L, active2, 0L, active3, 0xc00000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L, active1, 0x100008000800000L, active2, 0x22800000000L, active3, 0x8800000000000L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000400000020L, active2, 0L, active3, 0x8000c000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L, active1, 0x10000000000000L, active2, 0L, active3, 0x1000000c0000L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x30000000000000L);
      case 101:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000001000L, active1, 0x22000000080000L, active2, 0x200000000000L, active3, 0x60010000000L);
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000000000000L);
      case 103:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0xc000000000L, active3, 0L);
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0xc000L, active2, 0x40L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L, active1, 0x20000008L, active2, 0L, active3, 0x404000000L);
      case 108:
         if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 150;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000000L, active1, 0x4050000000L, active2, 0x840000L, active3, 0x100000000L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x200100080000000L, active1, 0L, active2, 0x80000L, active3, 0x400020000000L);
      case 110:
         if ((active3 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 229;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x6000008000L, active1, 0x802000000L, active2, 0L, active3, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000040000L, active1, 0x201000000000L, active2, 0x401000000000000L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L, active1, 0x400000000000000L, active2, 0x200000L, active3, 0L);
      case 114:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x80008000004000L, active1, 0L, active2, 0x8000400L, active3, 0L);
      case 115:
         if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 187;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x40L) != 0L)
         {
            jjmatchedKind = 198;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x80L) != 0L)
         {
            jjmatchedKind = 199;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x100000000L, active3, 0L);
      case 116:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 230;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x1200807c00800L, active1, 0x1000000000400000L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x80400L, active1, 0L, active2, 0L, active3, 0x2000000L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x8L, active3, 0L);
      case 119:
         return jjMoveStringLiteralDfa8_0(active0, 0x7e000000000000L, active1, 0x10L, active2, 0L, active3, 0L);
      case 121:
         if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 7);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjMoveNfa_0(5, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 7);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000000000000L, active2, 0x400L, active3, 0L);
      case 66:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x80000L, active3, 0x2000000L);
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0x1006000000000L, active1, 0x80000000000000L, active2, 0x40000L, active3, 0L);
      case 68:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 8;
         }
         break;
      case 69:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x300100200000000L, active1, 0x408000400000000L, active2, 0L, active3, 0x4000b4c8c000L);
      case 71:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 8;
         }
         break;
      case 72:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0xc000000000L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x200807800000L, active1, 0x1040004000L, active2, 0x8000040L, active3, 0x10000L);
      case 75:
         if ((active3 & 0x40000L) != 0L)
         {
            jjmatchedKind = 210;
            jjmatchedPos = 8;
         }
         break;
      case 76:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L, active1, 0x28L, active2, 0x2000200000L, active3, 0L);
      case 77:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x8000080000000000L, active1, 0x80000L, active2, 0x800000000L, active3, 0L);
      case 78:
         if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 226;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x7e400000000000L, active1, 0L, active2, 0L, active3, 0x8840000000000L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x80008000000000L, active1, 0x1000004020400000L, active2, 0L, active3, 0x40000000000000L);
      case 80:
         if ((active2 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 173;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000001200L, active1, 0x20008000000000L, active2, 0L, active3, 0x20000000000L);
      case 83:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000000010L, active2, 0x20000000000L, active3, 0L);
      case 84:
         if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x8000L, active1, 0x100000800800000L, active2, 0x1000100000000L, active3, 0L);
      case 85:
         return jjMoveStringLiteralDfa9_0(active0, 0x40080040000L, active1, 0L, active2, 0x800000L, active3, 0L);
      case 89:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 8;
         }
         break;
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x30000000000000L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000000000000L, active2, 0x400L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x80000L, active3, 0x2000000L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x1006000000000L, active1, 0x80000000000000L, active2, 0x40000L, active3, 0L);
      case 100:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 8;
         }
         break;
      case 101:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x300100200000000L, active1, 0x408000400000000L, active2, 0L, active3, 0x4000b4c8c000L);
      case 103:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 8;
         }
         break;
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0xc000000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x200807800000L, active1, 0x1040004000L, active2, 0x8000040L, active3, 0x10000L);
      case 107:
         if ((active3 & 0x40000L) != 0L)
         {
            jjmatchedKind = 210;
            jjmatchedPos = 8;
         }
         break;
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L, active1, 0x28L, active2, 0x2000200000L, active3, 0L);
      case 109:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x8000080000000000L, active1, 0x80000L, active2, 0x800000000L, active3, 0L);
      case 110:
         if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 226;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x7e400000000000L, active1, 0L, active2, 0L, active3, 0x8840000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x80008000000000L, active1, 0x1000004020400000L, active2, 0L, active3, 0x40000000000000L);
      case 112:
         if ((active2 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 173;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000001200L, active1, 0x20008000000000L, active2, 0L, active3, 0x20000000000L);
      case 115:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000000010L, active2, 0x20000000000L, active3, 0L);
      case 116:
         if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x8000L, active1, 0x100000800800000L, active2, 0x1000100000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x40080040000L, active1, 0L, active2, 0x800000L, active3, 0L);
      case 121:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 8;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(5, 8);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjMoveNfa_0(5, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 8);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0x600L, active1, 0L, active2, 0x1000000000000L, active3, 0x10000000000000L);
      case 66:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000L, active1, 0L, active2, 0L, active3, 0x20000000000000L);
      case 67:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000000L);
      case 68:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000000020000000L, active2, 0L, active3, 0x8000000000000L);
      case 69:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x200000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x800000L) != 0L)
         {
            jjmatchedKind = 151;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 9;
         }
         else if ((active3 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x84000000000L, active1, 0x100000800000010L, active2, 0x80000L, active3, 0x100000000L);
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000800020L, active2, 0L, active3, 0L);
      case 76:
         return jjMoveStringLiteralDfa10_0(active0, 0xe000080000000L, active1, 0L, active2, 0x8000040L, active3, 0L);
      case 77:
         return jjMoveStringLiteralDfa10_0(active0, 0x270100000000000L, active1, 0L, active2, 0L, active3, 0x400030c00000L);
      case 78:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000L, active1, 0x1040000000L, active2, 0L, active3, 0L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x1200807800000L, active1, 0L, active2, 0L, active3, 0L);
      case 80:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000008000000000L, active1, 0x4000080000L, active2, 0L, active3, 0L);
      case 82:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 160;
            jjmatchedPos = 9;
         }
         else if ((active3 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 223;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000L, active1, 0x480000000000000L, active2, 0L, active3, 0x40000000004000L);
      case 83:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 9;
         }
         else if ((active3 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 218;
            jjmatchedPos = 9;
         }
         break;
      case 84:
         if ((active3 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 234;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000L, active1, 0x30200000000000L, active2, 0xc000000000L, active3, 0x800000000000L);
      case 85:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000000L, active1, 0L, active2, 0x20000040000L, active3, 0L);
      case 86:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 89:
         if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 9;
         }
         break;
      case 90:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000L, active2, 0L, active3, 0x10000L);
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x2000000000L, active3, 0x88000L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x600L, active1, 0L, active2, 0x1000000000000L, active3, 0x10000000000000L);
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000L, active1, 0L, active2, 0L, active3, 0x20000000000000L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000000L);
      case 100:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000000020000000L, active2, 0L, active3, 0x8000000000000L);
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x200000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x800000L) != 0L)
         {
            jjmatchedKind = 151;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 9;
         }
         else if ((active3 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x84000000000L, active1, 0x100000800000010L, active2, 0x80000L, active3, 0x100000000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000800020L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0xe000080000000L, active1, 0L, active2, 0x8000040L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x270100000000000L, active1, 0L, active2, 0L, active3, 0x400030c00000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000L, active1, 0x1040000000L, active2, 0L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x1200807800000L, active1, 0L, active2, 0L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000008000000000L, active1, 0x4000080000L, active2, 0L, active3, 0L);
      case 114:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 160;
            jjmatchedPos = 9;
         }
         else if ((active3 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 223;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000L, active1, 0x480000000000000L, active2, 0L, active3, 0x40000000004000L);
      case 115:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 9;
         }
         else if ((active3 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 218;
            jjmatchedPos = 9;
         }
         break;
      case 116:
         if ((active3 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 234;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000L, active1, 0x30200000000000L, active2, 0xc000000000L, active3, 0x800000000000L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000000L, active1, 0L, active2, 0x20000040000L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 121:
         if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 9;
         }
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000L, active2, 0L, active3, 0x10000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 9);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjMoveNfa_0(5, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 9);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000L, active1, 0x1000008000000000L, active2, 0x2000000000L, active3, 0L);
      case 66:
         return jjMoveStringLiteralDfa11_0(active0, 0x200100000000000L, active1, 0L, active2, 0L, active3, 0x400020000000L);
      case 68:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x100000000000000L, active2, 0x40L, active3, 0x8000L);
      case 69:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 10;
         }
         else if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 10;
         }
         else if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x17e008000000000L, active1, 0L, active2, 0xc000000000L, active3, 0x60020000010000L);
      case 70:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000000000000L);
      case 71:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000L, active1, 0x430000000000000L, active2, 0L, active3, 0L);
      case 76:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x1000008040000L, active3, 0L);
      case 77:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000200L, active1, 0L, active2, 0L, active3, 0L);
      case 78:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 10;
         }
         else if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 10;
         }
         else if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 10;
         }
         else if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x7000000L, active1, 0x20L, active2, 0L, active3, 0x80000L);
      case 79:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80000000800000L, active2, 0L, active3, 0L);
      case 80:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10c00000L);
      case 82:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 10;
         }
         else if ((active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800000000L, active2, 0x20000000000L, active3, 0x100000000L);
      case 83:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 10;
         }
         else if ((active3 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 239;
            jjmatchedPos = 10;
         }
         break;
      case 84:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 10;
         }
         else if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 10;
         }
         else if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000400L, active1, 0x80000L, active2, 0L, active3, 0L);
      case 85:
         return jjMoveStringLiteralDfa11_0(active0, 0x1010000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000004000L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000L, active1, 0x1000008000000000L, active2, 0x2000000000L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa11_0(active0, 0x200100000000000L, active1, 0L, active2, 0L, active3, 0x400020000000L);
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x100000000000000L, active2, 0x40L, active3, 0x8000L);
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 10;
         }
         else if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 10;
         }
         else if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x17e008000000000L, active1, 0L, active2, 0xc000000000L, active3, 0x60020000010000L);
      case 102:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000000000000L);
      case 103:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000L, active1, 0x430000000000000L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x1000008040000L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000200L, active1, 0L, active2, 0L, active3, 0L);
      case 110:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 10;
         }
         else if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 10;
         }
         else if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 10;
         }
         else if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x7000000L, active1, 0x20L, active2, 0L, active3, 0x80000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80000000800000L, active2, 0L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10c00000L);
      case 114:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 10;
         }
         else if ((active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800000000L, active2, 0x20000000000L, active3, 0x100000000L);
      case 115:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 10;
         }
         else if ((active3 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 239;
            jjmatchedPos = 10;
         }
         break;
      case 116:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 10;
         }
         else if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 10;
         }
         else if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000400L, active1, 0x80000L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x1010000000000L, active1, 0L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 10);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjMoveNfa_0(5, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 10);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000L, active1, 0L, active2, 0x40000L, active3, 0x8000000008000L);
      case 66:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 67:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000L, active1, 0x800000000L, active2, 0L, active3, 0L);
      case 68:
         if ((active3 & 0x10000L) != 0L)
         {
            jjmatchedKind = 208;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0xc000000000L, active3, 0L);
      case 69:
         if ((active2 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 169;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x200100000000600L, active1, 0x20000000000000L, active2, 0L, active3, 0x400020000000L);
      case 70:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000000000L);
      case 71:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 11;
         }
         break;
      case 72:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 11;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000L);
      case 76:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x2000000000L, active3, 0x4000L);
      case 77:
         return jjMoveStringLiteralDfa12_0(active0, 0x70000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 78:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000L, active1, 0x8000000000L, active2, 0L, active3, 0x20000000000L);
      case 79:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000L, active1, 0x410000000000000L, active2, 0L, active3, 0x80000L);
      case 80:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000L, active1, 0L, active2, 0L, active3, 0L);
      case 82:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000L, active1, 0L, active2, 0x40L, active3, 0L);
      case 83:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 11;
         }
         else if ((active2 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000L, active1, 0x80000000000000L, active2, 0x8000000L, active3, 0L);
      case 84:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L, active3, 0x10000010c00000L);
      case 86:
         return jjMoveStringLiteralDfa12_0(active0, 0xe000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 89:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 11;
         }
         else if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 11;
         }
         break;
      case 95:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0x40000000000000L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000L, active1, 0L, active2, 0x40000L, active3, 0x8000000008000L);
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000L, active1, 0x800000000L, active2, 0L, active3, 0L);
      case 100:
         if ((active3 & 0x10000L) != 0L)
         {
            jjmatchedKind = 208;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0xc000000000L, active3, 0L);
      case 101:
         if ((active2 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 169;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x200100000000600L, active1, 0x20000000000000L, active2, 0L, active3, 0x400020000000L);
      case 102:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000000000L);
      case 103:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 11;
         }
         break;
      case 104:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 11;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000L);
      case 108:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x2000000000L, active3, 0x4000L);
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0x70000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 110:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000L, active1, 0x8000000000L, active2, 0L, active3, 0x20000000000L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000L, active1, 0x410000000000000L, active2, 0L, active3, 0x80000L);
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000L, active1, 0L, active2, 0L, active3, 0L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000L, active1, 0L, active2, 0x40L, active3, 0L);
      case 115:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 11;
         }
         else if ((active2 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000L, active1, 0x80000000000000L, active2, 0x8000000L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L, active3, 0x10000010c00000L);
      case 118:
         return jjMoveStringLiteralDfa12_0(active0, 0xe000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 121:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 11;
         }
         else if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 11;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(5, 11);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjMoveNfa_0(5, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 11);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000L, active1, 0L, active2, 0L, active3, 0x40000000000000L);
      case 66:
         return jjMoveStringLiteralDfa13_0(active0, 0x70000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 67:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x8000000000L, active2, 0L, active3, 0L);
      case 68:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 12;
         }
         else if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0x400L, active1, 0L, active2, 0L, active3, 0x80000L);
      case 69:
         if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0xe080080000000L, active1, 0x800000000L, active2, 0x40L, active3, 0x10000000004000L);
      case 70:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000000000L);
      case 76:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000L, active1, 0L, active2, 0x2000000000L, active3, 0L);
      case 78:
         if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 12;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000100000000L);
      case 82:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 12;
         }
         else if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 12;
         }
         else if ((active3 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 221;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000000L);
      case 83:
         if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x80000000000000L, active2, 0L, active3, 0L);
      case 84:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 12;
         }
         else if ((active3 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000200L, active1, 0x100000000000000L, active2, 0x8040000L, active3, 0x8000L);
      case 85:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000L, active1, 0L, active2, 0L, active3, 0L);
      case 89:
         if ((active3 & 0x400000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 12;
         }
         else if ((active3 & 0x800000L) != 0L)
         {
            jjmatchedKind = 215;
            jjmatchedPos = 12;
         }
         else if ((active3 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 220;
            jjmatchedPos = 12;
         }
         break;
      case 95:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0xc000000000L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000L, active1, 0L, active2, 0L, active3, 0x40000000000000L);
      case 98:
         return jjMoveStringLiteralDfa13_0(active0, 0x70000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x8000000000L, active2, 0L, active3, 0L);
      case 100:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 12;
         }
         else if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0x400L, active1, 0L, active2, 0L, active3, 0x80000L);
      case 101:
         if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0xe080080000000L, active1, 0x800000000L, active2, 0x40L, active3, 0x10000000004000L);
      case 102:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000000000L);
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000L, active1, 0L, active2, 0x2000000000L, active3, 0L);
      case 110:
         if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 12;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000100000000L);
      case 114:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 12;
         }
         else if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 12;
         }
         else if ((active3 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 221;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000000L);
      case 115:
         if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x80000000000000L, active2, 0L, active3, 0L);
      case 116:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 12;
         }
         else if ((active3 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000200L, active1, 0x100000000000000L, active2, 0x8040000L, active3, 0x8000L);
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000L, active1, 0L, active2, 0L, active3, 0L);
      case 121:
         if ((active3 & 0x400000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 12;
         }
         else if ((active3 & 0x800000L) != 0L)
         {
            jjmatchedKind = 215;
            jjmatchedPos = 12;
         }
         else if ((active3 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 220;
            jjmatchedPos = 12;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(5, 12);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjMoveNfa_0(5, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 12);
   }
   switch(curChar)
   {
      case 65:
         if ((active3 & 0x8000L) != 0L)
         {
            jjmatchedKind = 207;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x4008000000L, active3, 0L);
      case 68:
         if ((active3 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 69:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0x70000000000200L, active1, 0L, active2, 0x40000L, active3, 0x80000L);
      case 70:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000000000000L);
      case 73:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x8000000000L, active3, 0L);
      case 74:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x80000000000000L, active2, 0L, active3, 0L);
      case 76:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0xc000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 77:
         return jjMoveStringLiteralDfa14_0(active0, 0x400L, active1, 0L, active2, 0L, active3, 0L);
      case 78:
         if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 13;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x100000000000000L, active2, 0x2000000000L, active3, 0L);
      case 80:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x800000000L, active2, 0L, active3, 0L);
      case 82:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 13;
         }
         else if ((active3 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 244;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000L, active1, 0L, active2, 0L, active3, 0x20000000000000L);
      case 83:
         if ((active3 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000L, active1, 0L, active2, 0L, active3, 0L);
      case 84:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000000L, active1, 0L, active2, 0L, active3, 0x8000000000000L);
      case 86:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000L);
      case 89:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 97:
         if ((active3 & 0x8000L) != 0L)
         {
            jjmatchedKind = 207;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x4008000000L, active3, 0L);
      case 100:
         if ((active3 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 101:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0x70000000000200L, active1, 0L, active2, 0x40000L, active3, 0x80000L);
      case 102:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000000000000L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x8000000000L, active3, 0L);
      case 106:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x80000000000000L, active2, 0L, active3, 0L);
      case 108:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0xc000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa14_0(active0, 0x400L, active1, 0L, active2, 0L, active3, 0L);
      case 110:
         if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 13;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x100000000000000L, active2, 0x2000000000L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x800000000L, active2, 0L, active3, 0L);
      case 114:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 13;
         }
         else if ((active3 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 244;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000L, active1, 0L, active2, 0L, active3, 0x20000000000000L);
      case 115:
         if ((active3 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000L, active1, 0L, active2, 0L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000000L, active1, 0L, active2, 0L, active3, 0x8000000000000L);
      case 118:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000L);
      case 121:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000000L, active1, 0L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 13);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjMoveNfa_0(5, 13);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 13);
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 67:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0x2000000000L, active3, 0L);
      case 68:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0x40000L, active3, 0L);
      case 69:
         if ((active3 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 245;
            jjmatchedPos = 14;
         }
         return jjMoveStringLiteralDfa15_0(active0, 0x400L, active1, 0L, active2, 0L, active3, 0x8000000004000L);
      case 73:
         return jjMoveStringLiteralDfa15_0(active0, 0x10000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 76:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000000L, active1, 0L, active2, 0x4000000000L, active3, 0L);
      case 78:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0x8000000000L, active3, 0L);
      case 79:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x80000000000000L, active2, 0L, active3, 0L);
      case 82:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 14;
         }
         return jjMoveStringLiteralDfa15_0(active0, 0x60000001000200L, active1, 0L, active2, 0L, active3, 0L);
      case 83:
         if ((active3 & 0x80000L) != 0L)
         {
            jjmatchedKind = 211;
            jjmatchedPos = 14;
         }
         return jjMoveStringLiteralDfa15_0(active0, 0x8002000000L, active1, 0L, active2, 0L, active3, 0L);
      case 84:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 14;
         }
         return jjMoveStringLiteralDfa15_0(active0, 0x8000000000000L, active1, 0L, active2, 0x8000000L, active3, 0x40000000000000L);
      case 95:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0x2000000000L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0x40000L, active3, 0L);
      case 101:
         if ((active3 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 245;
            jjmatchedPos = 14;
         }
         return jjMoveStringLiteralDfa15_0(active0, 0x400L, active1, 0L, active2, 0L, active3, 0x8000000004000L);
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x10000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000000L, active1, 0L, active2, 0x4000000000L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0x8000000000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x80000000000000L, active2, 0L, active3, 0L);
      case 114:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 14;
         }
         return jjMoveStringLiteralDfa15_0(active0, 0x60000001000200L, active1, 0L, active2, 0L, active3, 0L);
      case 115:
         if ((active3 & 0x80000L) != 0L)
         {
            jjmatchedKind = 211;
            jjmatchedPos = 14;
         }
         return jjMoveStringLiteralDfa15_0(active0, 0x8002000000L, active1, 0L, active2, 0L, active3, 0L);
      case 116:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 14;
         }
         return jjMoveStringLiteralDfa15_0(active0, 0x8000000000000L, active1, 0L, active2, 0x8000000L, active3, 0x40000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 14);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjMoveNfa_0(5, 14);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 14);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0x2000000000L, active3, 0L);
      case 66:
         return jjMoveStringLiteralDfa16_0(active0, 0x20000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 67:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0x8000000000L, active3, 0L);
      case 69:
         if ((active2 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 155;
            jjmatchedPos = 15;
         }
         return jjMoveStringLiteralDfa16_0(active0, 0x8001000000L, active1, 0L, active2, 0L, active3, 0x40000000000000L);
      case 70:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa16_0(active0, 0x80000000L, active1, 0x80000000000000L, active2, 0L, active3, 0L);
      case 76:
         if ((active3 & 0x4000L) != 0L)
         {
            jjmatchedKind = 206;
            jjmatchedPos = 15;
         }
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0x4000000000L, active3, 0L);
      case 77:
         return jjMoveStringLiteralDfa16_0(active0, 0x10000000400L, active1, 0L, active2, 0x40000L, active3, 0L);
      case 79:
         return jjMoveStringLiteralDfa16_0(active0, 0xc000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 82:
         if ((active3 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 243;
            jjmatchedPos = 15;
         }
         break;
      case 83:
         return jjMoveStringLiteralDfa16_0(active0, 0x200L, active1, 0L, active2, 0L, active3, 0L);
      case 84:
         return jjMoveStringLiteralDfa16_0(active0, 0x40000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 86:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000L, active1, 0L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0x2000000000L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa16_0(active0, 0x20000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0x8000000000L, active3, 0L);
      case 101:
         if ((active2 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 155;
            jjmatchedPos = 15;
         }
         return jjMoveStringLiteralDfa16_0(active0, 0x8001000000L, active1, 0L, active2, 0L, active3, 0x40000000000000L);
      case 102:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x80000000L, active1, 0x80000000000000L, active2, 0L, active3, 0L);
      case 108:
         if ((active3 & 0x4000L) != 0L)
         {
            jjmatchedKind = 206;
            jjmatchedPos = 15;
         }
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0x4000000000L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa16_0(active0, 0x10000000400L, active1, 0L, active2, 0x40000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0xc000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 114:
         if ((active3 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 243;
            jjmatchedPos = 15;
         }
         break;
      case 115:
         return jjMoveStringLiteralDfa16_0(active0, 0x200L, active1, 0L, active2, 0L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa16_0(active0, 0x40000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000L, active1, 0L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 15);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjMoveNfa_0(5, 15);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 15);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000000L, active1, 0x100000000000000L, active2, 0L, active3, 0L);
      case 66:
         return jjMoveStringLiteralDfa17_0(active0, 0x400L, active1, 0L, active2, 0L, active3, 0L);
      case 69:
         return jjMoveStringLiteralDfa17_0(active0, 0x10000000200L, active1, 0L, active2, 0x40000L, active3, 0L);
      case 78:
         if ((active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 16;
         }
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000L, active1, 0L, active2, 0L, active3, 0L);
      case 79:
         return jjMoveStringLiteralDfa17_0(active0, 0x60000000000000L, active1, 0L, active2, 0x4000000000L, active3, 0L);
      case 80:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 16;
         }
         break;
      case 82:
         if ((active3 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 246;
            jjmatchedPos = 16;
         }
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0L, active2, 0x8000000000L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa17_0(active0, 0x80000000L, active1, 0L, active2, 0L, active3, 0L);
      case 84:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 16;
         }
         return jjMoveStringLiteralDfa17_0(active0, 0x4000000000000L, active1, 0L, active2, 0x2000000000L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000000L, active1, 0x100000000000000L, active2, 0L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa17_0(active0, 0x400L, active1, 0L, active2, 0L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa17_0(active0, 0x10000000200L, active1, 0L, active2, 0x40000L, active3, 0L);
      case 110:
         if ((active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 16;
         }
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000L, active1, 0L, active2, 0L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x60000000000000L, active1, 0L, active2, 0x4000000000L, active3, 0L);
      case 112:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 16;
         }
         break;
      case 114:
         if ((active3 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 246;
            jjmatchedPos = 16;
         }
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0L, active2, 0x8000000000L, active3, 0L);
      case 115:
         return jjMoveStringLiteralDfa17_0(active0, 0x80000000L, active1, 0L, active2, 0L, active3, 0L);
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 16;
         }
         return jjMoveStringLiteralDfa17_0(active0, 0x4000000000000L, active1, 0L, active2, 0x2000000000L, active3, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 16);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjMoveNfa_0(5, 16);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 16);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x100000000000000L, active2, 0x4000000000L);
      case 69:
         return jjMoveStringLiteralDfa18_0(active0, 0x400L, active1, 0L, active2, 0x8000000000L);
      case 73:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0L, active2, 0x2000000000L);
      case 76:
         return jjMoveStringLiteralDfa18_0(active0, 0x2000000L, active1, 0L, active2, 0L);
      case 77:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0L, active2, 0x40000L);
      case 78:
         return jjMoveStringLiteralDfa18_0(active0, 0x10000000000L, active1, 0L, active2, 0L);
      case 80:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 17;
         }
         break;
      case 84:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 17;
         }
         else if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 17;
         }
         return jjMoveStringLiteralDfa18_0(active0, 0x24000001000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x100000000000000L, active2, 0x4000000000L);
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0x400L, active1, 0L, active2, 0x8000000000L);
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0L, active2, 0x2000000000L);
      case 108:
         return jjMoveStringLiteralDfa18_0(active0, 0x2000000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0L, active2, 0x40000L);
      case 110:
         return jjMoveStringLiteralDfa18_0(active0, 0x10000000000L, active1, 0L, active2, 0L);
      case 112:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 17;
         }
         break;
      case 116:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 17;
         }
         else if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 17;
         }
         return jjMoveStringLiteralDfa18_0(active0, 0x24000001000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 17);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 17);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 17);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0L, active2, 0x4000000000L);
      case 66:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0L, active2, 0x40000L);
      case 77:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0L, active2, 0x8000000000L);
      case 79:
         return jjMoveStringLiteralDfa19_0(active0, 0x4000000000000L, active1, 0L, active2, 0x2000000000L);
      case 80:
         return jjMoveStringLiteralDfa19_0(active0, 0x1000000L, active1, 0L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa19_0(active0, 0x400L, active1, 0L, active2, 0L);
      case 83:
         return jjMoveStringLiteralDfa19_0(active0, 0x10000000000L, active1, 0L, active2, 0L);
      case 84:
         return jjMoveStringLiteralDfa19_0(active0, 0x20000000000000L, active1, 0x100000000000000L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa19_0(active0, 0x2000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0L, active2, 0x4000000000L);
      case 98:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0L, active2, 0x40000L);
      case 109:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0L, active2, 0x8000000000L);
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0x4000000000000L, active1, 0L, active2, 0x2000000000L);
      case 112:
         return jjMoveStringLiteralDfa19_0(active0, 0x1000000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa19_0(active0, 0x400L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa19_0(active0, 0x10000000000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0x20000000000000L, active1, 0x100000000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa19_0(active0, 0x2000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 18);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 18);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 18);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa20_0(active0, 0x1000000L, active1, 0L, active2, 0L);
      case 69:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 19;
         }
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0L, active2, 0x8000040000L);
      case 73:
         return jjMoveStringLiteralDfa20_0(active0, 0x10000000000L, active1, 0L, active2, 0L);
      case 77:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 19;
         }
         break;
      case 78:
         if ((active2 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 165;
            jjmatchedPos = 19;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa20_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 83:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 19;
         }
         else if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 19;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0L, active2, 0x4000000000L);
      case 97:
         return jjMoveStringLiteralDfa20_0(active0, 0x1000000L, active1, 0L, active2, 0L);
      case 101:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 19;
         }
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0L, active2, 0x8000040000L);
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0x10000000000L, active1, 0L, active2, 0L);
      case 109:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 19;
         }
         break;
      case 110:
         if ((active2 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 165;
            jjmatchedPos = 19;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa20_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 19;
         }
         else if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 19;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0L, active2, 0x4000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 19);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 19);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 19);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active2, 0x4000000000L);
      case 77:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 20;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active2, 0x8000000000L);
      case 79:
         return jjMoveStringLiteralDfa21_0(active0, 0x10000000000L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active2, 0x40000L);
      case 83:
         return jjMoveStringLiteralDfa21_0(active0, 0x1000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active2, 0x4000000000L);
      case 109:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 20;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active2, 0x8000000000L);
      case 111:
         return jjMoveStringLiteralDfa21_0(active0, 0x10000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active2, 0x40000L);
      case 115:
         return jjMoveStringLiteralDfa21_0(active0, 0x1000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 20);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0, long old2, long active2){
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 20);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 20);
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 21;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active2, 0x4000000000L);
      case 83:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 21;
         }
         else if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 21;
         }
         break;
      case 84:
         if ((active2 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 21;
         }
         break;
      case 110:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 21;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active2, 0x4000000000L);
      case 115:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 21;
         }
         else if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 21;
         }
         break;
      case 116:
         if ((active2 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 21;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(5, 21);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0, long old2, long active2){
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 21);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 21);
   }
   switch(curChar)
   {
      case 78:
         if ((active2 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 166;
            jjmatchedPos = 22;
         }
         break;
      case 110:
         if ((active2 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 166;
            jjmatchedPos = 22;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(5, 22);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 25;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 255)
                        kind = 255;
                     { jjCheckNAddTwoStates(12, 13); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAdd(20); }
                  else if (curChar == 38)
                     { jjCheckNAdd(18); }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar != 45)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar != 47)
                     break;
                  if (kind > 7)
                     kind = 7;
                  { jjCheckNAddStates(3, 5); }
                  break;
               case 7:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  { jjCheckNAddStates(3, 5); }
                  break;
               case 8:
                  if ((0x2400L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 9:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 10:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 255)
                     kind = 255;
                  { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 13:
                  if (curChar == 46)
                     { jjCheckNAdd(14); }
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 255)
                     kind = 255;
                  { jjCheckNAdd(14); }
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 256)
                     kind = 256;
                  jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 17:
                  if (curChar == 38)
                     { jjCheckNAdd(18); }
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 257)
                     kind = 257;
                  { jjCheckNAdd(18); }
                  break;
               case 19:
                  if (curChar == 34)
                     { jjCheckNAdd(20); }
                  break;
               case 20:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 21:
                  if (curChar == 34 && kind > 258)
                     kind = 258;
                  break;
               case 23:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjAddStates(6, 7); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 256)
                        kind = 256;
                     { jjCheckNAdd(16); }
                  }
                  else if (curChar == 91)
                     { jjCheckNAdd(23); }
                  break;
               case 1:
                  if (kind > 6)
                     kind = 6;
                  { jjAddStates(0, 2); }
                  break;
               case 7:
                  if (kind > 7)
                     kind = 7;
                  { jjAddStates(3, 5); }
                  break;
               case 15:
               case 16:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 256)
                     kind = 256;
                  { jjCheckNAdd(16); }
                  break;
               case 20:
                  { jjAddStates(8, 9); }
                  break;
               case 22:
                  if (curChar == 91)
                     { jjCheckNAdd(23); }
                  break;
               case 23:
                  if ((0xffffffffd7ffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(23, 24); }
                  break;
               case 24:
                  if (curChar == 93 && kind > 259)
                     kind = 259;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjAddStates(0, 2); }
                  break;
               case 7:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 7)
                     kind = 7;
                  { jjAddStates(3, 5); }
                  break;
               case 20:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(8, 9); }
                  break;
               case 23:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(6, 7); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 25 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
static final int[] jjnextStates = {
   1, 2, 4, 7, 8, 10, 23, 24, 20, 21, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, "\73", "\100", 
"\75", "\50", "\54", "\51", "\47", "\53", "\55", "\52", "\57", "\45", "\41", "\72", 
"\173", "\175", "\76", "\76\75", "\74", "\74\75", "\74\76", "\56", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public WormholeMDXParserTokenManager(JavaCharStream stream){

      if (JavaCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public WormholeMDXParserTokenManager (JavaCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 25; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffff01L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x9fffffffffffffffL, 
   0xfffffffL, 
};
static final long[] jjtoSkip = {
   0xfeL, 0x0L, 0x0L, 0x0L, 
   0x0L, 
};
static final long[] jjtoSpecial = {
   0xc0L, 0x0L, 0x0L, 0x0L, 
   0x0L, 
};
    protected JavaCharStream  input_stream;

    private final int[] jjrounds = new int[25];
    private final int[] jjstateSet = new int[2 * 25];

    
    protected char curChar;
}
