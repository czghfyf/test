/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. WormholeMDXParser.jj */
/*@egen*//*
java jjtree WormholeMDXParser.jjt
java javacc WormholeMDXParser.jj
*/
options {
//	JDK_VERSION         = "1.5"; // why not use JDK 1.8 ?

	STATIC              = false;

	                           
	                           
	                           

	JAVA_UNICODE_ESCAPE = true;
	UNICODE_INPUT       = true;

//	USER_TOKEN_MANAGER  = true; // default option is false
}

PARSER_BEGIN(WormholeMDXParser)

package cn.bgotech.wormhole.olap.mdx.parser;

import java.io.StringReader;

import java.util.ArrayList;
import java.util.List;
import java.util.LinkedList;

import cn.bgotech.wormhole.olap.OlapEngine;

import cn.bgotech.wormhole.olap.mdx.*;
import cn.bgotech.wormhole.olap.mdx.auxi.*;

import cn.bgotech.wormhole.olap.mdx.profile.*;
import cn.bgotech.wormhole.olap.mdx.bg_expansion.*;

import cn.bgotech.wormhole.olap.mdx.syntax.exp.*;
import cn.bgotech.wormhole.olap.mdx.syntax.b00lean.exp.*;
import cn.bgotech.wormhole.olap.mdx.syntax.structures.*;

import cn.bgotech.wormhole.olap.mdx.syntax.fun.exp.*;
import cn.bgotech.wormhole.olap.mdx.syntax.fun.member.*;
import cn.bgotech.wormhole.olap.mdx.syntax.fun.set.*;

import cn.bgotech.wormhole.olap.mdx.syntax.b00lean.functions.*;

public class WormholeMDXParser/*@bgen(jjtree)*/implements WormholeMDXParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTWormholeMDXParserState jjtree = new JJTWormholeMDXParserState();

/*@egen*/

//	private SimpleNode root = null;

    private OlapEngine olapEngine;

    public static String peelShell(String s) {
        s = s.trim();
        return s.substring(1, s.length() - 1).trim();
    }

    public WormholeMDXParser(String mdx, OlapEngine olapEngine) {
        this(new StringReader(mdx));
        this.olapEngine = olapEngine;
    }

//	public SimpleNode getRoot() {
//		return root;
//	}

}

PARSER_END(WormholeMDXParser)

/* white space */
SKIP: {
	  " "
	| "\t"
	| "\n"
	| "\r"
	| "\f"
}

/* Single line comment */
SPECIAL_TOKEN: {
  	< SINGLE_LINE_COMMENT : "--" ( ~[ "\n" , "\r" ] )* ( "\n" | "\r" | "\r\n" )? >
  | < SINGLE_LINE_COMMENT_2 : "//" ( ~[ "\n" , "\r" ] )* ( "\n" | "\r" | "\r\n" )? >
}

/* Reserved Keywords */
TOKEN [IGNORE_CASE]:
{
     <ABSOLUTE: "absolute">
  |  <ACTIONPARAMETERSET: "actionparameterset">
  |  <ADDCALCULATEDMEMBERS: "addcalculatedmembers">
  |  <AGGREGATE: "aggregate">
  |  <ALLMEMBERS: "allmembers">
  |  <ANCESTOR: "ancestor">
  |  <ANCESTORS: "ancestors">
  |  <ASCENDANTS: "ascendants">
  |  <AVERAGE: "average">
  |  <AXIS: "axis">
  |  <BOTTOMCOUNT: "bottomcount">
  |  <BOTTOMSUM: "bottomsum">
  |  <BY: "by">
  |  <CACHE: "cache">
  |  <CALCULATE: "calculate">
  |  <CALCULATION: "calculation">
  |  <CALCULATIONCURRENTPASS: "calculationcurrentpass">
  |  <CALCULATIONPASSVALUE: "calculationpassvalue">
  |  <CALCULATIONS: "calculations">
  |  <CALL: "call">
  |  <CASE: "case">
  |  <CAST: "cast">
  |  <CELL: "cell">
  |  <CELLFORMULASETLIST: "cellformulasetlist">
  |  <CLEAR: "clear">
  |  <CLOSINGPERIOD: "closingperiod">
  |  <COLUMN: "column">
  |  <CORRELATION: "correlation">
  |  <COUSIN: "cousin">
  |  <COVARIANCE: "covariance">
  |  <COVARIANCEN: "covariancen">
  |  <CREATEPROPERTYSET: "createpropertyset">
  |  <CREATEVIRTUALDIMENSION: "createvirtualdimension">
  |  <CURRENT: "current">
  |  <CURRENTCUBE: "currentcube">
  |  <DEFAULT_MEMBER: "default_member">
  |  <DEFAULTMEMBER: "defaultmember">
  |  <DESCRIPTION: "description">
  |  <DIMENSIONS: "dimensions">
  |  <DISTINCT: "distinct">
  |  <DISTINCTCOUNT: "distinctcount">
  |  <DRILLDOWNLEVEL: "drilldownlevel">
  |  <DRILLDOWNLEVELBOTTOM: "drilldownlevelbottom">
  |  <DRILLDOWNLEVELTOP: "drilldownleveltop">
  |  <DRILLDOWNMEMBER: "drilldownmember">
  |  <DRILLDOWNMEMBERBOTTOM: "drilldownmemberbottom">
  |  <DRILLDOWNMEMBERTOP: "drilldownmembertop">
  |  <DRILLTHROUGH: "drillthrough">
  |  <DRILLUPLEVEL: "drilluplevel">
  |  <DRILLUPMEMBER: "drillupmember">
  |  <DROP: "drop">
  |  <ELSE: "else">
  |  <EMPTY: "empty">
  |  <END: "end">
  |  <ERROR: "error">
  |  <EXCLUDEEMPTY: "excludeempty">
  |  <EXPLAIN: "explain">
  |  <EXTRACT: "extract">
  |  <FALSE: "false">
  |  <FIRSTCHILD: "firstchild">
  |  <FIRSTROWSET: "firstrowset">
  |  <FIRSTSIBLING: "firstsibling">
  |  <FOR: "for">
  |  <FREEZE: "freeze">
  |  <GENERATE: "generate">
  |  <GLOBAL: "global">
  |  <GROUP: "group">
  |  <GROUPING: "grouping">
  |  <HEAD: "head">
  |  <HIDDEN: "hidden">
  |  <HIERARCHIZE: "hierarchize">
  |  <HIERARCHY: "hierarchy">
  |  <IF: "if">
  |  <IGNORE: "ignore">
  |  <IN: "in">
  |  <INCLUDEEMPTY: "includeempty">
  |  <INDEX: "index">
  |  <IS: "is">
  |  <ISANCESTOR: "isancestor">
  |  <ISGENERATION: "isgeneration">
  |  <ISLEAF: "isleaf">
  |  <ISSIBLING: "issibling">
  |  <ITEM: "item">
  |  <LAG: "lag">
  |  <LASTCHILD: "lastchild">
  |  <LASTPERIODS: "lastperiods">
  |  <LASTSIBLING: "lastsibling">
  |  <LEAD: "lead">
  |  <LEVEL: "level">
  |  <LEVELS: "levels">
  |  <LINKMEMBER: "linkmember">
  |  <LINREGINTERCEPT: "linregintercept">
  |  <LINREGPOINT: "linregpoint">
  |  <LINREGR2: "linregr2">
  |  <LINREGSLOPE: "linregslope">
  |  <LINREGVARIANCE: "linregvariance">
  |  <MATCHES: "matches">
  |  <MAXROWS: "maxrows">
  |  <MAX: "max" >
  |  <MEASURE: "measure">
  |  <MEDIAN: "median">
  |  <MEMBERTOSTR: "membertostr">
  |  <MIN: "min">
  |  <MTD: "mtd">
  |  <NAME: "name">
  |  <NAMETOSET: "nametoset">
  |  <NEST: "nest">
  |  <NEXTMEMBER: "nextmember">
  |  <NO_ALLOCATION: "no_allocation">
  |  <NO_PROPERTIES: "no_properties">
  |  <NON: "non">
  |  <NONEMPTYCROSSJOIN: "nonemptycrossjoin">
  |  <NOT_RELATED_TO_FACTS: "not_related_to_facts">
  |  <NULL: "null">
  |  <OPENINGPERIOD: "openingperiod">
  |  <PASS: "pass">
  |  <PERIODSTODATE: "periodstodate">
  |  <PLAN: "plan">
  |  <POST: "post">
  |  <PREDICT: "predict">
  |  <PROPERTY: "property">
  |  <QTD: "qtd">
  |  <RANK: "rank">
  |  <RECURSIVE: "recursive">
  |  <RELATIVE: "relative">
  |  <RETURN: "return">
  |  <ROLLUPCHILDREN: "rollupchildren">
  |  <ROOT: "root">
  |  <SCOPE: "scope">
  |  <SESSION: "session">
  |  <SETTOARRAY: "settoarray">
  |  <SETTOSTR: "settostr">
  |  <SORT: "sort">
  |  <STDDEV: "stddev">
  |  <STDDEVP: "stddevp">
  |  <STDEV: "stdev">
  |  <STDEVP: "stdevp">
  |  <STORAGE: "storage">
  |  <STRIPCALCULATEDMEMBERS: "stripcalculatedmembers">
  |  <STRTOMEMBER: "strtomember">
  |  <STRTOSET: "strtoset">
  |  <STRTOTUPLE: "strtotuple">
  |  <STRTOVAL: "strtoval">
  |  <STRTOVALUE: "strtovalue">
  |  <SUBSET: "subset">
  |  <THEN: "then">
  |  <THIS: "this">
  |  <TOGGLEDRILLSTATE: "toggledrillstate">
  |  <TOPSUM: "topsum">
  |  <TOTALS: "totals">
  |  <TREE: "tree">
  |  <TRUE: "true">
  |  <TUPLETOSTR: "tupletostr">
  |  <TYPE: "type">
  |  <UNIQUE: "unique">
  |  <UNIQUENAME: "uniquename">
  |  <USE: "use">
  |  <USE_EQUAL_ALLOCATION: "use_equal_allocation">
  |  <USE_WEIGHTED_ALLOCATION: "use_weighted_allocation">
  |  <USE_WEIGHTED_INCREMENT: "use_weighted_increment">
  |  <USERNAME: "username">
  |  <VALIDMEASURE: "validmeasure">
  |  <VALUE: "value">
  |  <VAR: "var">
  |  <VARIANCE: "variance">
  |  <VARIANCEP: "variancep">
  |  <VARP: "varp">
  |  <VISUAL: "visual">
  |  <VISUALTOTALS: "visualtotals">
  |  <WHEN: "when">
  |  <WTD: "wtd">
  |  <XOR: "xor">
}

/* keywords */
TOKEN [IGNORE_CASE]: {
		< SELECT : "select" >
	|	< FROM : "from" >
	|	< WHERE : "where" >
	|	< WITH : "with" >
    |   < CUBE : "cube" >
	|	< MEMBER : "member" >
    |   < DIMENSION : "dimension" >
    |   < MEASURES : "measures" >
    |   < ROLE : "role" >
	|	< SET : "set" >
	|	< AS : "as" >
	|	< OR : "or" >
	|	< AND : "and" >
	|	< NOT : "not" >
	|	< ON : "on" >
	|	< COLUMNS : "COLUMNS" >   // axisIdx = 0
	|	< ROWS : "rows" >         // axisIdx = 1
	|	< PAGES : "PAGES" >       // axisIdx = 2
	|	< CHAPTERS : "CHAPTERS" > // axisIdx = 3
	|	< SECTIONS : "SECTIONS" > // axisIdx = 4
    |   < SPACE : "space" >
    |   < CREATE : "create" >
    |   < BUILD : "Build" >
    |   < UPDATE : "update" >
    |   < DELETE : "DELETE" >
    |   < INSERT : "INSERT" >
    |   < MAX_MEMBER_LEVEL : "MAX_MEMBER_LEVEL" >
    |   < LOAD_CUBE_DATA : "LOAD_CUBE_DATA" >
    |   < SYNCHRONIZED : "synchronized" >
    |   < SYNC : "sync" >
    |   < WRITEBACK : "writeBack" >
}

/* command tool keywords */
TOKEN [IGNORE_CASE]: {
    <SEND_VCE_NODES : "@send_vce_nodes" >
}

/* function keywords */
TOKEN [IGNORE_CASE]: {
    // function option keywords
    <ALL : "All" >

    // Expression Functions
	|	< COUNT : "Count" >
	|		<INCLUDE_EMPTY : "Include_Empty" >
	|		<EXCLUDE_EMPTY : "Exclude_Empty" >
	|	< SUM : "Sum" >
    |   < LOOK_UP_CUBE : "LookUpCube" >
    |   < PROPERTIES : "properties" >
    |   < IIF : "iif" >
    |   < COALESCE_EMPTY : "CoalesceEmpty" >

    // Member Functions
	|	< CURRENT_MEMBER : "CurrentMember" >
	|	< PARENT : "PARENT" >
	|	< PREV_MEMBER : "PrevMember" >
    |   < PARALLEL_PERIOD : "ParallelPeriod" >

    // boolean functions
    |   < IS_EMPTY : "IsEmpty" >

    // Set Functions
	|	< CROSS_JOIN : "CrossJoin" >
	|	< MEMBERS : "Members" >
    |   < FILTER : "filter" >
    |   < CHILDREN : "Children" >
    | 	< TOP_COUNT : "TopCount" >
    |   < TAIL : "Tail" >
    |   < YTD : "Ytd" >
    |   < BOTTOM_PERCENT : "bottomPercent" >
    |   < TOP_PERCENT : "topPercent" >
    |   < UNION : "union" >
    |   < INTERSECT : "Intersect" >
    |   < EXCEPT : "EXCEPT" >
	|	< LATERAL_MEMBERS : "LateralMembers" > // defined in Wormhole OLAP
    |   < DESCENDANTS : "DESCENDANTS" >
    |       <SELF : "SELF" >
    |       <AFTER : "AFTER" >
    |       <BEFORE : "BEFORE" >
    |       <BEFORE_AND_AFTER : "BEFORE_AND_AFTER" >
    |       <SELF_AND_AFTER : "SELF_AND_AFTER" >
    |       <SELF_AND_BEFORE : "SELF_AND_BEFORE" >
    |       <SELF_BEFORE_AFTER : "SELF_BEFORE_AFTER" >
    |       <LEAVES : "LEAVES" >
    | 	< ORDER : "ORDER" >
    |       <ASC : "asc" >
    |       <DESC : "desc" >
    |       <BASC : "basc" >
    |       <BDESC : "bdesc" >
}

/*
 *   IDENTIFIER: variable name matches
 * & SIMPLE_NUMERIC: simple digital format
 * & ID_SELECTOR: id selector
 */
TOKEN: {
		< # DIGIT : [ "0"-"9" ] >
	|	< # LETTER : [ "_", "a"-"z", "A"-"Z" ] >
	|	< SIMPLE_NUMERIC : ( <DIGIT> )+ ( "." ( <DIGIT> )+ )? >
	| 	< IDENTIFIER : <LETTER> ( <LETTER> | <DIGIT> )* >
	| 	< ID_SELECTOR : "&" ( <DIGIT> )+ >
}

/*
 * STRING_LITERAL: string matchers
 * CHARACTER_BLOCK:
 */
TOKEN: {
		< STRING_LITERAL : "\"" ( ~[ "\"", "\n", "\r" ] )+ "\"" >
	|	< CHARACTER_BLOCK : "[" ( ~[ "\n", "\r", "[", "]" ] )+ "]" >
}

/* Annotation */
TOKEN [IGNORE_CASE]:
{
        < ANNOTATION_SET : "@set" >
    |   < ANNOTATION_MEMBER : "@member" > // Has not been used
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/* parser entry */
Object execute():
{/*@bgen(jjtree) execute */
        ASTexecute jjtn000 = new ASTexecute(this, JJTEXECUTE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	SFPOfExecuteMDX sfp = null;
	ContextAtExecutingMDX context;
	MDDManagementAssistant mma = null;
	Token tkn = null;
	Object ___result_ = null;
	Auxiliary_MDDL_NQ ___aux_ = null;
}
{/*@bgen(jjtree) execute */
        try {
/*@egen*/
	(
		{ context = new ContextAtExecutingMDX(olapEngine); }
		sfp = select_statement(context) // qt = select_statement(ec)
        { context.set(sfp); ___result_ = sfp; }
      |
        LOOKAHEAD(20) ___aux_ = auxiliary_MDDL_NQ_statement() { ___result_ = ___aux_; }
	  |
	    { ___result_ = mma = new MDDManagementAssistant(); }
	    [ <SEND_VCE_NODES> tkn = <STRING_LITERAL> { mma.readyConnectToVCENodes(peelShell(tkn.image)); } ]
	    (
	      (
	        create_statement(mma) | build_statement(mma) |
	        update_statement(mma) | delete_statement(mma) |
	        insert_statement(mma) | loadCubeData_statement(mma)
	      )
	      ";"
	    )+
	)
	<EOF>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		// this.root = jjtThis;
		return ___result_;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

Auxiliary_MDDL_NQ auxiliary_MDDL_NQ_statement():
{/*@bgen(jjtree) auxiliary_MDDL_NQ_statement */
    ASTauxiliary_MDDL_NQ_statement jjtn000 = new ASTauxiliary_MDDL_NQ_statement(this, JJTAUXILIARY_MDDL_NQ_STATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Auxiliary_MDDL_NQ aux = new Auxiliary_MDDL_NQ();
}
{/*@bgen(jjtree) auxiliary_MDDL_NQ_statement */
    try {
/*@egen*/
    (   LOOKAHEAD(20)  create_dimension_statement(aux)
        |   LOOKAHEAD(20)  create_member_statement(aux)
        |   LOOKAHEAD(20)  build_cube_statement(aux)
        |   LOOKAHEAD(20)  sync_cube_statement(aux)
        |   LOOKAHEAD(20)  writeback_cube_statement(aux)
        |   LOOKAHEAD(20)  int_upt_del_measure_statement(aux)
        |   LOOKAHEAD(20)  load_cube_data_statement(aux)
    )/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      }
/*@egen*/ { return aux; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void create_dimension_statement(Auxiliary_MDDL_NQ aux):
{/*@bgen(jjtree) create_dimension_statement */
    ASTcreate_dimension_statement jjtn000 = new ASTcreate_dimension_statement(this, JJTCREATE_DIMENSION_STATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tkn = null, lv_tkn = null;
}
{/*@bgen(jjtree) create_dimension_statement */
    try {
/*@egen*/
    <SPACE> "@" tkn = <CHARACTER_BLOCK> { aux.setSpace(peelShell(tkn.image)); }
    (
        <CREATE> <DIMENSION> tkn = <CHARACTER_BLOCK> <MAX_MEMBER_LEVEL> "=" lv_tkn = <SIMPLE_NUMERIC> ";"
        { aux.add( new AuxCreateDimension(peelShell(tkn.image), lv_tkn.image) ); }
    )+/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void create_member_statement(Auxiliary_MDDL_NQ aux):
{/*@bgen(jjtree) create_member_statement */
    ASTcreate_member_statement jjtn000 = new ASTcreate_member_statement(this, JJTCREATE_MEMBER_STATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tkn = null;
    MultiDimensionalDomainSelector selector = null;
}
{/*@bgen(jjtree) create_member_statement */
    try {
/*@egen*/
    <SPACE> "@" tkn = <CHARACTER_BLOCK> { aux.setSpace(peelShell(tkn.image)); }
    (
        <CREATE> <MEMBER> selector = multi_dimensional_domain_select() ";"
        { aux.add( new AuxCreateMember(selector) ); }
    )+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void build_cube_statement(Auxiliary_MDDL_NQ aux):
{/*@bgen(jjtree) build_cube_statement */
    ASTbuild_cube_statement jjtn000 = new ASTbuild_cube_statement(this, JJTBUILD_CUBE_STATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tkn = null, dm_tk = null, dr_tk = null, mea_tk = null;
    List<AuxBuildCube.Dim__Role> drList = new ArrayList();
    List<String> measures = new ArrayList();
}
{/*@bgen(jjtree) build_cube_statement */
    try {
/*@egen*/
    <SPACE> "@" tkn = <CHARACTER_BLOCK> { aux.setSpace(peelShell(tkn.image)); }
    (
        <BUILD> <CUBE> tkn = <CHARACTER_BLOCK> "("
            <DIMENSION> dm_tk = <CHARACTER_BLOCK> <ROLE> dr_tk = <CHARACTER_BLOCK>
            { drList.add(new AuxBuildCube.Dim__Role(peelShell(dm_tk.image), peelShell(dr_tk.image))); }
            (
                "," <DIMENSION> dm_tk = <CHARACTER_BLOCK> <ROLE> dr_tk = <CHARACTER_BLOCK>
                { drList.add(new AuxBuildCube.Dim__Role(peelShell(dm_tk.image), peelShell(dr_tk.image))); }
            )*
        ")" <MEASURES> "("
            mea_tk = <CHARACTER_BLOCK> { measures.add(peelShell(mea_tk.image)); }
            ( "," mea_tk = <CHARACTER_BLOCK> { measures.add(peelShell(mea_tk.image)); } )*
        ")" ";"
        { aux.add(new AuxBuildCube(peelShell(tkn.image), drList, measures)); }
    )+/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void sync_cube_statement(Auxiliary_MDDL_NQ aux):
{/*@bgen(jjtree) sync_cube_statement */
    ASTsync_cube_statement jjtn000 = new ASTsync_cube_statement(this, JJTSYNC_CUBE_STATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tkn = null;
}
{/*@bgen(jjtree) sync_cube_statement */
    try {
/*@egen*/
    <SEND_VCE_NODES> tkn = <STRING_LITERAL> { aux.setVCENodesInfo(peelShell(tkn.image)); }
    <SPACE> "@" tkn = <CHARACTER_BLOCK> { aux.setSpace(peelShell(tkn.image)); }
    (
        ( <SYNCHRONIZED> | <SYNC> ) <CUBE> tkn = <CHARACTER_BLOCK> ";"
        { aux.add(new AuxSyncCube(peelShell(tkn.image))); }
    )+/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void writeback_cube_statement(Auxiliary_MDDL_NQ aux):
{/*@bgen(jjtree) writeback_cube_statement */
    ASTwriteback_cube_statement jjtn000 = new ASTwriteback_cube_statement(this, JJTWRITEBACK_CUBE_STATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tkn = null;
}
{/*@bgen(jjtree) writeback_cube_statement */
    try {
/*@egen*/
    <SEND_VCE_NODES> tkn = <STRING_LITERAL> { aux.setVCENodesInfo(peelShell(tkn.image)); }
    <SPACE> "@" tkn = <CHARACTER_BLOCK> { aux.setSpace(peelShell(tkn.image)); }
    (
        <WRITEBACK> <CUBE> tkn = <CHARACTER_BLOCK> ";"
        { aux.add(new AuxWriteBackCube(peelShell(tkn.image))); }
    )+/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void int_upt_del_measure_statement(Auxiliary_MDDL_NQ aux):
{/*@bgen(jjtree) int_upt_del_measure_statement */
    ASTint_upt_del_measure_statement jjtn000 = new ASTint_upt_del_measure_statement(this, JJTINT_UPT_DEL_MEASURE_STATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tkn = null;
    AuxCUDMeasure cudMea = null;
}
{/*@bgen(jjtree) int_upt_del_measure_statement */
    try {
/*@egen*/
    <SEND_VCE_NODES> tkn = <STRING_LITERAL> { aux.setVCENodesInfo(peelShell(tkn.image)); }
    <SPACE> [ "@" ] tkn = <CHARACTER_BLOCK> { aux.setSpace(peelShell(tkn.image)); }
    (
        <INSERT> { aux.setAction(Auxiliary_MDDL_NQ.ActionEnum.INSERT); }
      | <UPDATE> { aux.setAction(Auxiliary_MDDL_NQ.ActionEnum.UPDATE); }
      | <DELETE> { aux.setAction(Auxiliary_MDDL_NQ.ActionEnum.DELETE); }
    )
    tkn = <CHARACTER_BLOCK> { aux.setCube(peelShell(tkn.image)); }
    ( cudMea = CUD_measure_stat_V() { aux.add(cudMea); } ";" )+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

AuxCUDMeasure CUD_measure_stat_V():
{/*@bgen(jjtree) CUD_measure_stat_V */
    ASTCUD_measure_stat_V jjtn000 = new ASTCUD_measure_stat_V(this, JJTCUD_MEASURE_STAT_V);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    MultiDimensionalDomainSelector mbr_sel = null;
    List<MultiDimensionalDomainSelector> members = new ArrayList();
    List<AuxCUDMeasure.MeasureInfo> measures = new ArrayList();
    Token meaTk = null;
    Double meaVal = null;
}
{/*@bgen(jjtree) CUD_measure_stat_V */
    try {
/*@egen*/
    "(" mbr_sel = multi_dimensional_domain_select() { members.add(mbr_sel); }
        ( "," mbr_sel = multi_dimensional_domain_select() { members.add(mbr_sel); } )*
    ")" <MEASURES> "("
        { meaVal = null; }
        meaTk = <CHARACTER_BLOCK> [ "=" meaVal = signed_double_statement() ]
        { measures.add(new AuxCUDMeasure.MeasureInfo(peelShell(meaTk.image), meaVal)); }
        (
            "," { meaVal = null; }
            meaTk = <CHARACTER_BLOCK> [ "=" meaVal = signed_double_statement() ]
            { measures.add(new AuxCUDMeasure.MeasureInfo(peelShell(meaTk.image), meaVal)); }
        )*
    ")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ { return new AuxCUDMeasure(members, measures); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void load_cube_data_statement(Auxiliary_MDDL_NQ aux):
{/*@bgen(jjtree) load_cube_data_statement */
    ASTload_cube_data_statement jjtn000 = new ASTload_cube_data_statement(this, JJTLOAD_CUBE_DATA_STATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tkn = null;
}
{/*@bgen(jjtree) load_cube_data_statement */
    try {
/*@egen*/
    <SEND_VCE_NODES> tkn = <STRING_LITERAL> { aux.setVCENodesInfo(peelShell(tkn.image)); }
    <SPACE> "@" tkn = <CHARACTER_BLOCK> { aux.setSpace(peelShell(tkn.image)); }
    (
        <LOAD_CUBE_DATA> tkn =  <CHARACTER_BLOCK> ";"
        { aux.add(new AuxLoadCubeData(peelShell(tkn.image))); }
    )+/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void create_statement(MDDManagementAssistant mma):
{/*@bgen(jjtree) create_statement */
    ASTcreate_statement jjtn000 = new ASTcreate_statement(this, JJTCREATE_STATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    MultiDimensionalDomainSelector.Part part, part2;
    MultiDimensionalDomainSelector mdds;
    Token tk;
}
{/*@bgen(jjtree) create_statement */
    try {
/*@egen*/
    <CREATE>
    (
        /* create space [SPACE] */
        <SPACE> part = domain_selector_part()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        { mma.readyToCreateSpace(part.getImage().trim()); }
      |
        /* create dimension [SPACE]@[DIMENSION] */
        <DIMENSION> part = domain_selector_part() "@" part2 = domain_selector_part()
            <MAX_MEMBER_LEVEL> "=" tk = <SIMPLE_NUMERIC>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
          mma.readyToCreateDimension(part.getImage().trim(), part2.getImage().trim(), Integer.parseInt(tk.image));
        }
      |
        /* create member [SPACE]@[DIMENSION].[MEMBER].[MEMber].[member] */
        <MEMBER> part = domain_selector_part() "@" mdds = multi_dimensional_domain_select()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        { mma.readyToCreateMember(part.getImage().trim(), mdds); }
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void loadCubeData_statement(MDDManagementAssistant mma):
{/*@bgen(jjtree) loadCubeData_statement */
    ASTloadCubeData_statement jjtn000 = new ASTloadCubeData_statement(this, JJTLOADCUBEDATA_STATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t = null;
    ExeLoadCubeDataUnit u = null;
}
{/*@bgen(jjtree) loadCubeData_statement */
    try {
/*@egen*/
    { u = new ExeLoadCubeDataUnit(); }
    <LOAD_CUBE_DATA>
    t = <STRING_LITERAL> { u.setSpaceName(peelShell(t.image)); }
    t = <STRING_LITERAL>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ { u.setCubeName(peelShell(t.image)); mma.addExeUnit(u); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void build_statement(MDDManagementAssistant mma):
{/*@bgen(jjtree) build_statement */
    ASTbuild_statement jjtn000 = new ASTbuild_statement(this, JJTBUILD_STATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    MultiDimensionalDomainSelector.Part part1, part2;
}
{/*@bgen(jjtree) build_statement */
    try {
/*@egen*/
    /*
        build cube [SPACE]@[CUBE] (
            dimension [DIMENSION] role [ROLE],
            dimension [DIMENSION] role [ROLE],
            dimension [DIMENSION] role [ROLE],
        ) measures ([MeasureMember], [MeasureMember])
    */
    { ExeBuildCubeUnit exeUnit = new ExeBuildCubeUnit(); }
    <BUILD> <CUBE> part1 = domain_selector_part() "@" part2 = domain_selector_part()
    { exeUnit.setSpaceName(part1.getImage().trim()); exeUnit.setCubeName(part2.getImage().trim()); }
    "("
        <DIMENSION> part1 = domain_selector_part() <ROLE> part2 = domain_selector_part()
        { exeUnit.addDimensionRoleMatcher(part1.getImage().trim(), part2.getImage().trim()); }
        ( "," <DIMENSION> part1 = domain_selector_part() <ROLE> part2 = domain_selector_part()
            { exeUnit.addDimensionRoleMatcher(part1.getImage().trim(), part2.getImage().trim()); }
        )*
    ")"
    <MEASURES> "("
        part1 = domain_selector_part() { exeUnit.addMeasureMember(part1.getImage().trim()); }
        ( "," part1 = domain_selector_part() { exeUnit.addMeasureMember(part1.getImage().trim()); } )*
    ")"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { mma.addExeUnit(exeUnit); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void insert_statement(MDDManagementAssistant mma):
{/*@bgen(jjtree) insert_statement */
    ASTinsert_statement jjtn000 = new ASTinsert_statement(this, JJTINSERT_STATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    MultiDimensionalDomainSelector.Part part;
    MultiDimensionalDomainSelector mdds;
    Token tkn;
}
{/*@bgen(jjtree) insert_statement */
    try {
/*@egen*/
    /*
        insert [SPACE]@[CUBE] (
            [ROLE].[MMM].[MMm].[Mmm].[mmm],
            [ROLE].[MMM].[MMm].[Mmm].[mmm],
            [ROLE].[MMM].[MMm].[Mmm].[mmm]
        ) measures ([MeasureMember] = 123.666, [MeasureMember] = 123.666)
    */
    { ExeInsertMeasuresUnit insUnit = new ExeInsertMeasuresUnit(); }
    <INSERT> part = domain_selector_part() { insUnit.setSpaceName(part.getImage().trim()); }
        "@" part = domain_selector_part() { insUnit.setCubeName(part.getImage().trim()); }
    "("
        mdds = multi_dimensional_domain_select() { insUnit.addMemberSelector(mdds); }
        ( "," mdds = multi_dimensional_domain_select() { insUnit.addMemberSelector(mdds); } )*
    ")" <MEASURES> "("
        part = domain_selector_part() "=" tkn = <SIMPLE_NUMERIC>
        { insUnit.insertMeasure(part.getImage().trim(), tkn.image); }
        ( "," part = domain_selector_part() "=" tkn = <SIMPLE_NUMERIC> { insUnit.insertMeasure(part.getImage().trim(), tkn.image); } )*
    ")"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { mma.addExeUnit(insUnit); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void update_statement(MDDManagementAssistant mma):
{/*@bgen(jjtree) update_statement */
    ASTupdate_statement jjtn000 = new ASTupdate_statement(this, JJTUPDATE_STATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    MultiDimensionalDomainSelector.Part part;
    MultiDimensionalDomainSelector mdds;
    Token tkn;
}
{/*@bgen(jjtree) update_statement */
    try {
/*@egen*/
    /*
        update [SPACE]@[CUBE] (
            [ROLE].[MMM].[MMm].[Mmm].[mmm],
            [ROLE].[MMM].[MMm].[Mmm].[mmm],
            [ROLE].[MMM].[MMm].[Mmm].[mmm]
        ) measures ([MeasureMember] = 123.666, [MeasureMember] = 123.666)
    */
    { ExeUpdateMeasuresUnit exeUnit = new ExeUpdateMeasuresUnit(); }
    <UPDATE> part = domain_selector_part() { exeUnit.setSpaceName(part.getImage().trim()); }
        "@" part = domain_selector_part() { exeUnit.setCubeName(part.getImage().trim()); }
    "("
        mdds = multi_dimensional_domain_select() { exeUnit.addMemberSelector(mdds); }
        ( "," mdds = multi_dimensional_domain_select() { exeUnit.addMemberSelector(mdds); } )*
    ")" <MEASURES> "("
        part = domain_selector_part() "=" tkn = <SIMPLE_NUMERIC>
        { exeUnit.updateMeasure(part.getImage().trim(), tkn.image); }
        ( "," part = domain_selector_part() "=" tkn = <SIMPLE_NUMERIC> { exeUnit.updateMeasure(part.getImage().trim(), tkn.image); } )*
    ")"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { mma.addExeUnit(exeUnit); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void delete_statement(MDDManagementAssistant mma):
{/*@bgen(jjtree) delete_statement */
    ASTdelete_statement jjtn000 = new ASTdelete_statement(this, JJTDELETE_STATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    MultiDimensionalDomainSelector.Part part;
    MultiDimensionalDomainSelector mdds;
}
{/*@bgen(jjtree) delete_statement */
    try {
/*@egen*/
    /*
        delete [SPACE]@[CCC] (
            [RRR].[MMM].[MMm].[Mmm].[mmm],
            [RRR].[MMM].[MMm].[Mmm].[mmm],
            [RRR].[MMM].[MMm].[Mmm].[mmm]
        ) measures ([MUU], [MUU], [MUU]);
    */
    { ExeDeleteMeasuresUnit exeUnit = new ExeDeleteMeasuresUnit(); }
    <DELETE> part = domain_selector_part() { exeUnit.setSpaceName(part.getImage().trim()); }
        "@" part = domain_selector_part() { exeUnit.setCubeName(part.getImage().trim()); }
    "("
        mdds = multi_dimensional_domain_select() { exeUnit.addMemberSelector(mdds); }
        ( "," mdds = multi_dimensional_domain_select() { exeUnit.addMemberSelector(mdds); } )*
    ")" <MEASURES> "("
        part = domain_selector_part()
        { exeUnit.deleteMeasure(part.getImage().trim()); }
        ( "," part = domain_selector_part() { exeUnit.deleteMeasure(part.getImage().trim()); } )*
    ")"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { mma.addExeUnit(exeUnit); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

MDXQueryResultSFP select_statement(ContextAtExecutingMDX ctx):
{/*@bgen(jjtree) select_statement */
        ASTselect_statement jjtn000 = new ASTselect_statement(this, JJTSELECT_STATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	List<WithFormula> withFormulaList = new ArrayList<WithFormula>();
	Axis axis = null;
	List<Axis> axisList = new ArrayList<Axis>();
	CubePE cubePe = null;
	WhereStatement whereStat = null; // ConditionLimitFragment whereFragment = null;
}
{/*@bgen(jjtree) select_statement */
        try {
/*@egen*/
	[ withFormulaList = with_statement_def(ctx) ]

	/* one or more axies */
	<SELECT>
			  axis = axis_statement_def(ctx) { axisList.add(axis); }
		( "," axis = axis_statement_def(ctx) { axisList.add(axis); } )*

	<FROM> cubePe = cube(ctx) // { cm.contactToMDQLExecuteContext(ec); }

	[ <WHERE> whereStat = where_statement_def(ctx) ]/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

	{ return new MDXQueryResultSFP (ctx, withFormulaList, axisList, cubePe, whereStat); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}


List<WithFormula> with_statement_def(ContextAtExecutingMDX ctx):
{/*@bgen(jjtree) with_statement_def */
        ASTwith_statement_def jjtn000 = new ASTwith_statement_def(this, JJTWITH_STATEMENT_DEF);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	List<WithFormula> formulaList = new ArrayList<WithFormula>();
	WithFormula wf = null;
}
{/*@bgen(jjtree) with_statement_def */
        try {
/*@egen*/
	<WITH>
	(
	    ( wf = member_formula_statement(ctx) | wf = set_formula_statement(ctx) )
	    { formulaList.add(wf); }
	)+/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return formulaList; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SetFormula set_formula_statement(ContextAtExecutingMDX ctx):
{/*@bgen(jjtree) set_formula_statement */
        ASTset_formula_statement jjtn000 = new ASTset_formula_statement(this, JJTSET_FORMULA_STATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	MultiDimensionalDomainSelector mdds = null; // CharacterBlocksToken rename to MultiDimensionalDomainSelector
	SetPE setPe = null;
}
{/*@bgen(jjtree) set_formula_statement */
        try {
/*@egen*/
	<SET> mdds = multi_dimensional_domain_select()
	<AS> ( setPe = set(ctx) | "'" setPe = set(ctx) "'" )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return new SetFormula(mdds, setPe);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

MemberFormula member_formula_statement(ContextAtExecutingMDX ctx):
{/*@bgen(jjtree) member_formula_statement */
        ASTmember_formula_statement jjtn000 = new ASTmember_formula_statement(this, JJTMEMBER_FORMULA_STATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	MultiDimensionalDomainSelector mbrMatch = null;
	Expression exp = null;
}
{/*@bgen(jjtree) member_formula_statement */
        try {
/*@egen*/
	<MEMBER> mbrMatch = multi_dimensional_domain_select()
	<AS> ( exp = expression(ctx) | "'" exp = expression(ctx) "'" )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return new MemberFormula(mbrMatch, exp);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


Expression expression(ContextAtExecutingMDX ctx):
{/*@bgen(jjtree) expression */
        ASTexpression jjtn000 = new ASTexpression(this, JJTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	CommonExpression exp = new CommonExpression();
	Term term = null;
}
{/*@bgen(jjtree) expression */
        try {
/*@egen*/
	term = term(ctx) { exp.addTerm("+", term); }
	(		"+" term = term(ctx) { exp.addTerm("+", term); }
		|
			"-" term = term(ctx) { exp.addTerm("-", term); }
	)*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return exp; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

Term term(ContextAtExecutingMDX ctx):
{/*@bgen(jjtree) term */
        ASTterm jjtn000 = new ASTterm(this, JJTTERM);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Term term = new Term();
	Factory factory = null;
}
{/*@bgen(jjtree) term */
        try {
/*@egen*/
	factory = factory(ctx) { term.addFactory(null, factory); }
	(	"*" factory = factory(ctx) { term.addFactory("*", factory); }
	  |
		"/" factory = factory(ctx) { term.addFactory("/", factory); }
	  |
		"%" factory = factory(ctx) { term.addFactory("%", factory); }
	)*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return term;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


Factory factory(ContextAtExecutingMDX ctx):
{/*@bgen(jjtree) factory */
        ASTfactory jjtn000 = new ASTfactory(this, JJTFACTORY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token tkn = null;
	Token numTkn = null;
	String numStr = null;
	TuplePE tuplePe = null;
	Expression exp = null;
	ExpressionFunction fun = null;
}
{/*@bgen(jjtree) factory */
                try {
/*@egen*/
		[ tkn = "+" | tkn = "-" ] numTkn = <SIMPLE_NUMERIC>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ // numStr = numeric_value_spec()
		{
			return new Factory(ctx, (tkn == null ? "+" : tkn.image), /*numStr*/ numTkn.image);
		}
	|
		tkn = <STRING_LITERAL>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{
			return new Factory(ctx, peelShell(tkn.image));
		}
	|
		LOOKAHEAD( tuple() ) // the LOOKAHEAD must Be placed at position at the beginning of production
		tuplePe = tuple(ctx)/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{
			return new Factory(ctx, tuplePe);
		}
	|
		"(" exp = expression(ctx) ")"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{
			return new Factory(ctx, exp);
		}
	|
		fun = common_functions(ctx)/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ // evolved from numeric_functions()
		{
			return new Factory(ctx, fun);
		}/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
}

// support calculact with string yet not only with numeric
ExpressionFunction common_functions(ContextAtExecutingMDX ctx):
{/*@bgen(jjtree) common_functions */
        ASTcommon_functions jjtn000 = new ASTcommon_functions(this, JJTCOMMON_FUNCTIONS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	SetPE setPe;
	ExpFunCount.Option countOpt = null;
	Expression exp = null;
	Expression falseExp;
	MemberPE memberPE;
	BooleanExpression boolExp;
}
{/*@bgen(jjtree) common_functions */
                try {
/*@egen*/
		<COUNT> "(" setPe = set(ctx)
					[ ","
						( <EXCLUDE_EMPTY> { countOpt = ExpFunCount.Option.EXCLUDE_EMPTY; }
					  |
						  <INCLUDE_EMPTY> { countOpt = ExpFunCount.Option.INCLUDE_EMPTY; } )
					]
				")"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{
			return new ExpFunCount(setPe, countOpt);
		}
	|
		<SUM> "(" setPe = set(ctx) [ "," exp = expression(ctx) ] ")"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{
			return new ExpFunSum(ctx, setPe, exp);
		}
	|
	    {
			CubePE cubePe;
			TuplePE tuplePe;
			ExpFnLookUpCube lookUpCube = new ExpFnLookUpCube(ctx);
		}
        <LOOK_UP_CUBE> "("
            ( exp = expression(ctx) { lookUpCube.setCubeExp(exp); } | "!" cubePe = cube(ctx) { lookUpCube.setCubePE(cubePe); } )
            "," [ "!" { lookUpCube.setParseExpFlag(false); } ] exp = expression(ctx) { lookUpCube.setExp(exp); }
            [ "," ( exp = expression(ctx) { lookUpCube.setSpecifiedContextExp(exp); } | "!" tuplePe = tuple(ctx) { lookUpCube.setTuplePE(tuplePe); } ) ]
        ")"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{
			return lookUpCube;
		}
    |
        // TODO: If support the ClassicMDDM production, great impact on the grammatical definition and program, realize later
        <PROPERTIES> // currently, only support property that belong member
            "(" memberPE = member(ctx) "," exp = expression(ctx) ")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            return new ExpFnProperties(ctx, memberPE, exp);
        }
    |
        <IIF> "(" boolExp = boolean_expression(ctx) ","
                 exp = expression(ctx) ","
            falseExp = expression(ctx) ")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            return new ExpFnIIF(boolExp, exp, falseExp);
        }
    |
        { List<Expression> expList = new LinkedList(); }
        <COALESCE_EMPTY> "(" exp = expression(ctx) { expList.add(exp); } ( "," exp = expression(ctx) { expList.add(exp); } )+ ")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            return new ExpFnCoalesceEmpty(expList);
        }/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
}

SetPE set(ContextAtExecutingMDX ctx):
{/*@bgen(jjtree) set */
        ASTset jjtn000 = new ASTset(this, JJTSET);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	TuplePE tuplePe = null;
	SetPE setPe = null;
	List<SetPE> setPEs = new ArrayList<SetPE>();
	SetFunction setFun = null;
	MultiDimensionalDomainSelector customSetName;
	MemberPE memberPE1;
	MemberPE memberPE2;
}
{/*@bgen(jjtree) set */
        try {
/*@egen*/
        LOOKAHEAD( member() ":" member() )
            memberPE1 = member(ctx) ":" memberPE2 = member(ctx)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            return new SetPE(ctx, memberPE1, memberPE2);
        }
	|
		// use customized set
		<ANNOTATION_SET> customSetName = multi_dimensional_domain_select()/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{
		    return new SetPE(ctx, customSetName);
		}
    |
		tuplePe = tuple(ctx)/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{
			return new SetPE(ctx, tuplePe);
		}
	|
		"{"
			setPe = set(ctx) { setPEs.add(setPe); }
			(
				"," setPe = set(ctx) { setPEs.add(setPe); }
			)*
		"}"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{
			return new SetPE(ctx, setPEs);
		}
	|
		setFun = set_functions(ctx)/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{
			return new SetPE(ctx, setFun);
		}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SetFunction set_functions(ContextAtExecutingMDX ctx):
{/*@bgen(jjtree) set_functions */
        ASTset_functions jjtn000 = new ASTset_functions(this, JJTSET_FUNCTIONS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	DimensionPE dimPe = null;
	MemberPE mbrPe = null;
	List<SetPE> setPEs;
	SetPE setPE;
	SetPE setPE2;
	Expression exp = null;
	Expression exp2;
	BooleanExpression boolExp;
	Token token = null;
	LevelPE levelPE = null;
}
{/*@bgen(jjtree) set_functions */
        try {
/*@egen*/
        <MEMBERS> "(" dimPe = dimension(ctx) ")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ // This function is not currently called on Hierarchy and Level
        {
            return new SetFunMembers(dimPe);
        }
	|
	    <LATERAL_MEMBERS> "(" mbrPe = member(ctx) ")"/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/
	    {
	        return new SetFunLateralMembers(mbrPe);
	    }
    |
        { setPEs = new LinkedList(); }
        <CROSS_JOIN> "(" setPE = set(ctx) { setPEs.add(setPE); }
                            ( "," setPE = set(ctx) { setPEs.add(setPE); } )+
                     ")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            return new SetFunCrossJoin(ctx, setPEs);
        }
    |
        { String strategy = "ASC"; }
        <ORDER> "("
            setPE = set(ctx) "," exp = expression(ctx)
            [ "," ( <ASC> | <DESC> { strategy = "DESC"; } | <BASC> { strategy = "BASC"; } | <BDESC> { strategy = "BDESC"; } ) ]
        ")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            return new SetFnOrder(ctx, setPE, exp, strategy);
        }
    |
        <FILTER> "(" setPE = set(ctx) "," boolExp = boolean_expression(ctx) ")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            return new SetFnFilter(setPE, boolExp);
        }
    |
        <CHILDREN> "(" mbrPe = member(ctx) ")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            return new SetFnChildren(ctx, mbrPe);
        }
    |
        { Expression countExp; }
        <TOP_COUNT> "(" setPE = set(ctx) "," countExp = expression(ctx) [ "," exp = expression(ctx) ] ")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            return new SetFnTopCount(ctx, setPE, countExp, exp);
        }
    |
        <EXCEPT> "(" setPE = set(ctx) "," setPE2 = set(ctx) [ "," token = <ALL> ] ")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            return new SetFnExcept(setPE, setPE2, token == null ? null : token.image);
        }
    |
        <YTD> "(" [ mbrPe = member(ctx) ] ")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            return new SetFnYTD(ctx, mbrPe);
        }
    |
        { SetFnDescendants.Option _option = null; }
        <DESCENDANTS> "("
                mbrPe = member(ctx) [ "," levelPE = level(ctx) ["," _option = descendants_options() ] ]
            ")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            return new SetFnDescendants(ctx, mbrPe, levelPE, _option);
        }
    |
        <TAIL> "(" setPE = set(ctx) [ "," exp = expression(ctx) ] ")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            return new SetFnTail(setPE, exp);
        }
    |
        ( token = <BOTTOM_PERCENT> | token = <TOP_PERCENT> ) "("
            setPE = set(ctx) "," exp2 = expression(ctx) "," exp = expression(ctx)
        ")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            return new SetFnBottomOrTopPercent(ctx, token.image, setPE, exp2, exp);
        }
    |
        { setPEs = new LinkedList(); }
        <UNION> "("
            setPE = set(ctx) { setPEs.add(setPE); } ( LOOKAHEAD( "," set() ) "," setPE = set(ctx) { setPEs.add(setPE); } )* [ "," token = <ALL> ]
        ")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            return new SetFnUnion(ctx, setPEs, token != null);
        }
    |
        { setPEs = new LinkedList(); }
        <INTERSECT> "(" setPE = set(ctx) { setPEs.add(setPE); } ( LOOKAHEAD( "," set() ) "," setPE = set(ctx) { setPEs.add(setPE); } )* [ "," token = <ALL> ] ")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        { return new SetFnIntersect(ctx, setPEs, token != null); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SetFnDescendants.Option descendants_options():
{/*@bgen(jjtree) descendants_options */
  ASTdescendants_options jjtn000 = new ASTdescendants_options(this, JJTDESCENDANTS_OPTIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) descendants_options */
        try {
/*@egen*/
        <SELF>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/  { return SetFnDescendants.Option.SELF; }
    |	<AFTER>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/  { return SetFnDescendants.Option.AFTER; }
    |	<BEFORE>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ { return SetFnDescendants.Option.BEFORE; }
    |	<BEFORE_AND_AFTER>/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ { return SetFnDescendants.Option.BEFORE_AND_AFTER; }
    |	<SELF_AND_AFTER>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ { return SetFnDescendants.Option.SELF_AND_AFTER; }
    |	<SELF_AND_BEFORE>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ { return SetFnDescendants.Option.SELF_AND_BEFORE; }
    |	<SELF_BEFORE_AFTER>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ { return SetFnDescendants.Option.SELF_BEFORE_AFTER; }
    |	<LEAVES>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ { return SetFnDescendants.Option.LEAVES; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


// boolean expression(aka: logic expression)
BooleanExpression boolean_expression(ContextAtExecutingMDX ctx):
{/*@bgen(jjtree) boolean_expression */
    ASTboolean_expression jjtn000 = new ASTboolean_expression(this, JJTBOOLEAN_EXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    BooleanTerm boolTerm;
    List<BooleanTerm> boolTermList = new LinkedList();
}
{/*@bgen(jjtree) boolean_expression */
    try {
/*@egen*/
    boolTerm = boolean_term(ctx) { boolTermList.add(boolTerm); }
    (
        <OR> boolTerm = boolean_term(ctx) { boolTermList.add(boolTerm); }
    )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return new BooleanExpression(boolTermList);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

BooleanTerm boolean_term(ContextAtExecutingMDX ctx):
{/*@bgen(jjtree) boolean_term */
    ASTboolean_term jjtn000 = new ASTboolean_term(this, JJTBOOLEAN_TERM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    BooleanFactory boolFactory;
    List<BooleanFactory> boolFactoryList = new LinkedList();
}
{/*@bgen(jjtree) boolean_term */
    try {
/*@egen*/
    boolFactory = boolean_factory(ctx) { boolFactoryList.add(boolFactory); }
    (
        <AND> boolFactory = boolean_factory(ctx) { boolFactoryList.add(boolFactory); }
    )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return new BooleanTerm(boolFactoryList);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

BooleanFactory boolean_factory(ContextAtExecutingMDX ctx):
{/*@bgen(jjtree) boolean_factory */
    ASTboolean_factory jjtn000 = new ASTboolean_factory(this, JJTBOOLEAN_FACTORY);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    BooleanFactory bf;
    Expression leftExp;
    Expression rightExp;
    String lo; // logic operator string
    BooleanExpression result;
    BooleanFunction booleanFn;
}
{/*@bgen(jjtree) boolean_factory */
        try {
/*@egen*/
        <NOT> bf = boolean_factory(ctx)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ // the boolean factory 'NOT NOT NOT NOT 1 > 2' is legal
        {
            return new BooleanFactory(false, bf);
        }
    |
        LOOKAHEAD( expression() ( ">" | ">=" | "<" | "<=" | "=" | "<>" ) expression() )
        leftExp = expression(ctx)
            (
                  ">"  { lo = ">"; }
                | ">=" { lo = ">="; }
                | "<"  { lo = "<"; }
                | "<=" { lo = "<="; }
                | "="  { lo = "="; }
                | "<>" { lo = "<>"; }
            )
        rightExp = expression(ctx)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            return new BooleanFactory(leftExp, lo, rightExp);
        }
    |
        "(" result = boolean_expression(ctx) ")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            return new BooleanFactory(result);
        }
    |
        booleanFn = boolean_function(ctx)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            return new BooleanFactory(booleanFn);
        }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

BooleanFunction boolean_function(ContextAtExecutingMDX ctx):
{/*@bgen(jjtree) boolean_function */
    ASTboolean_function jjtn000 = new ASTboolean_function(this, JJTBOOLEAN_FUNCTION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Expression exp;
}
{/*@bgen(jjtree) boolean_function */
    try {
/*@egen*/
    <IS_EMPTY> "(" exp = expression(ctx) ")"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return new BooleanFnIsEmpty(exp);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

LevelPE level(ContextAtExecutingMDX ctx):
{/*@bgen(jjtree) level */
    ASTlevel jjtn000 = new ASTlevel(this, JJTLEVEL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    MultiDimensionalDomainSelector selector;
}
{/*@bgen(jjtree) level */
    try {
/*@egen*/
    selector = multi_dimensional_domain_select()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return new LevelPE(ctx, selector);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
//  |
//  	level_functions() // TODO: Seems not necessary
}

TuplePE tuple(ContextAtExecutingMDX ctx):
{/*@bgen(jjtree) tuple */
        ASTtuple jjtn000 = new ASTtuple(this, JJTTUPLE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	List<MemberPE> mbrPEs = new ArrayList<MemberPE>();
	MemberPE mbrPe = null;
}
{/*@bgen(jjtree) tuple */
                try {
/*@egen*/
		mbrPe = member(ctx)/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{
			return new TuplePE(mbrPe);
		}
	|
		"("
				mbrPe = member(ctx) { mbrPEs.add(mbrPe); }
  		   ("," mbrPe = member(ctx) { mbrPEs.add(mbrPe); } )*
		")"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
	  	{
			return new TuplePE(mbrPEs);
	  	}/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
}


MemberPE member(ContextAtExecutingMDX ctx):
{/*@bgen(jjtree) member */
        ASTmember jjtn000 = new ASTmember(this, JJTMEMBER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	MultiDimensionalDomainSelector mbrTrail = null;
	MemberFunction memberFun = null;
}
{/*@bgen(jjtree) member */
                try {
/*@egen*/
		mbrTrail = multi_dimensional_domain_select()/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{
			return new MemberPE(ctx, mbrTrail);
		}
	|
		memberFun = member_functions(ctx)/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{
			return new MemberPE(ctx, memberFun);
		}/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
}


MemberFunction member_functions(ContextAtExecutingMDX ctx):
{/*@bgen(jjtree) member_functions */
        ASTmember_functions jjtn000 = new ASTmember_functions(this, JJTMEMBER_FUNCTIONS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	DimensionPE dimPe;
	MemberPE mbrPe = null;
	LevelPE levelPE = null;
    Expression exp = null;
}
{/*@bgen(jjtree) member_functions */
                try {
/*@egen*/
		<CURRENT_MEMBER> "(" dimPe = dimension(ctx) ")"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{
			return new MemberFunCurrentMember(dimPe);
		}
	|
		<PARENT>  "(" mbrPe = member(ctx) ")"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{
			return new MemberFunParent(mbrPe);
		}
    |
        <PREV_MEMBER> "(" mbrPe = member(ctx) ")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            return new MemberFunPrevMember(mbrPe);
        }
    |
        <PARALLEL_PERIOD>
            "(" [ levelPE = level(ctx)
                    [ "," exp = expression(ctx)
                        [ "," mbrPe = member(ctx) ] ] ]
            ")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            return new MemberFnParallelPeriod(ctx, levelPE, exp, mbrPe);
        }/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
}

DimensionPE dimension(ContextAtExecutingMDX ctx):
{/*@bgen(jjtree) dimension */
        ASTdimension jjtn000 = new ASTdimension(this, JJTDIMENSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	MultiDimensionalDomainSelector mdds = null;
}
{/*@bgen(jjtree) dimension */
        try {
/*@egen*/
	mdds = multi_dimensional_domain_select()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
  	{
		return new DimensionPE(ctx, mdds);
  	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


Axis axis_statement_def(ContextAtExecutingMDX ctx):
{/*@bgen(jjtree) axis_statement_def */
        ASTaxis_statement_def jjtn000 = new ASTaxis_statement_def(this, JJTAXIS_STATEMENT_DEF);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	SetPE setPe = null;
//	Axis.CoordinatePosition coordPosition = null;
	Token tk = null;
	String axisAlias = null;
}
{/*@bgen(jjtree) axis_statement_def */
        try {
/*@egen*/
	setPe = set(ctx)
		<ON>
	(
			tk = <SIMPLE_NUMERIC>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/
			{
				return new Axis(Integer.parseInt(tk.image), setPe);
			}
		|
			axisAlias = axis_alias()/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/
			{
				return new Axis(axisAlias, setPe);
			}
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String axis_alias():
{/*@bgen(jjtree) axis_alias */
        ASTaxis_alias jjtn000 = new ASTaxis_alias(this, JJTAXIS_ALIAS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token tk = null;
}
{/*@bgen(jjtree) axis_alias */
        try {
/*@egen*/
	( tk = <COLUMNS> | tk = <ROWS> | tk = <PAGES> | tk = <CHAPTERS> | tk = <SECTIONS> )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		// return peelShell(tk.image);
		return tk.image;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


WhereStatement where_statement_def(ContextAtExecutingMDX ctx):
{/*@bgen(jjtree) where_statement_def */
        ASTwhere_statement_def jjtn000 = new ASTwhere_statement_def(this, JJTWHERE_STATEMENT_DEF);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	TuplePE tp = null;
}
{/*@bgen(jjtree) where_statement_def */
        try {
/*@egen*/
	tp = tuple(ctx)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return new WhereStatement(tp);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


CubePE cube(ContextAtExecutingMDX ctx):
{/*@bgen(jjtree) cube */
        ASTcube jjtn000 = new ASTcube(this, JJTCUBE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	MultiDimensionalDomainSelector mdds = null;
}
{/*@bgen(jjtree) cube */
        try {
/*@egen*/
	mdds = multi_dimensional_domain_select()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return new CubePE(ctx, mdds);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
//  | cube_functions() // TODO: cube function ?
}

MultiDimensionalDomainSelector multi_dimensional_domain_select():
{/*@bgen(jjtree) multi_dimensional_domain_select */
        ASTmulti_dimensional_domain_select jjtn000 = new ASTmulti_dimensional_domain_select(this, JJTMULTI_DIMENSIONAL_DOMAIN_SELECT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	MultiDimensionalDomainSelector mdds = new MultiDimensionalDomainSelector();
	MultiDimensionalDomainSelector.Part part = null;
}
{/*@bgen(jjtree) multi_dimensional_domain_select */
        try {
/*@egen*/
	part = domain_selector_part() { mdds.append(part); }
	( "." part = domain_selector_part() { mdds.append(part); } )*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return mdds;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

MultiDimensionalDomainSelector.Part domain_selector_part():
{/*@bgen(jjtree) domain_selector_part */
        ASTdomain_selector_part jjtn000 = new ASTdomain_selector_part(this, JJTDOMAIN_SELECTOR_PART);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token idSelector = null;
	Token variable = null;
	Token charBlk = null;
}
{/*@bgen(jjtree) domain_selector_part */
        try {
/*@egen*/
	idSelector = <ID_SELECTOR>
	[ variable = <IDENTIFIER> | charBlk = <CHARACTER_BLOCK> ]/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
        return new MultiDimensionalDomainSelector.Part
                        (idSelector.image.substring(1), variable != null ? variable.image : (charBlk == null ? null : peelShell(charBlk.image)));
	}
  |
	( variable = <IDENTIFIER> | charBlk = <CHARACTER_BLOCK> )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
        return new MultiDimensionalDomainSelector.Part
                        (null, variable != null ? variable.image : peelShell(charBlk.image));
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

Double signed_double_statement():
{/*@bgen(jjtree) signed_double_statement */
    ASTsigned_double_statement jjtn000 = new ASTsigned_double_statement(this, JJTSIGNED_DOUBLE_STATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String sign = null;
    Token valTkn = null;
}
{/*@bgen(jjtree) signed_double_statement */
    try {
/*@egen*/
    [ "+" { sign = "+"; } | "-" { sign = "-"; } ] valTkn = <SIMPLE_NUMERIC>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return "-".equals(sign) ? (0 - Double.parseDouble(valTkn.image)) : Double.parseDouble(valTkn.image); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}