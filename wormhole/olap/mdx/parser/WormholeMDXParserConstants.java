/* Generated By:JJTree&JavaCC: Do not edit this line. WormholeMDXParserConstants.java */
package cn.bgotech.wormhole.olap.mdx.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface WormholeMDXParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT_2 = 7;
  /** RegularExpression Id. */
  int ABSOLUTE = 8;
  /** RegularExpression Id. */
  int ACTIONPARAMETERSET = 9;
  /** RegularExpression Id. */
  int ADDCALCULATEDMEMBERS = 10;
  /** RegularExpression Id. */
  int AGGREGATE = 11;
  /** RegularExpression Id. */
  int ALLMEMBERS = 12;
  /** RegularExpression Id. */
  int ANCESTOR = 13;
  /** RegularExpression Id. */
  int ANCESTORS = 14;
  /** RegularExpression Id. */
  int ASCENDANTS = 15;
  /** RegularExpression Id. */
  int AVERAGE = 16;
  /** RegularExpression Id. */
  int AXIS = 17;
  /** RegularExpression Id. */
  int BOTTOMCOUNT = 18;
  /** RegularExpression Id. */
  int BOTTOMSUM = 19;
  /** RegularExpression Id. */
  int BY = 20;
  /** RegularExpression Id. */
  int CACHE = 21;
  /** RegularExpression Id. */
  int CALCULATE = 22;
  /** RegularExpression Id. */
  int CALCULATION = 23;
  /** RegularExpression Id. */
  int CALCULATIONCURRENTPASS = 24;
  /** RegularExpression Id. */
  int CALCULATIONPASSVALUE = 25;
  /** RegularExpression Id. */
  int CALCULATIONS = 26;
  /** RegularExpression Id. */
  int CALL = 27;
  /** RegularExpression Id. */
  int CASE = 28;
  /** RegularExpression Id. */
  int CAST = 29;
  /** RegularExpression Id. */
  int CELL = 30;
  /** RegularExpression Id. */
  int CELLFORMULASETLIST = 31;
  /** RegularExpression Id. */
  int CLEAR = 32;
  /** RegularExpression Id. */
  int CLOSINGPERIOD = 33;
  /** RegularExpression Id. */
  int COLUMN = 34;
  /** RegularExpression Id. */
  int CORRELATION = 35;
  /** RegularExpression Id. */
  int COUSIN = 36;
  /** RegularExpression Id. */
  int COVARIANCE = 37;
  /** RegularExpression Id. */
  int COVARIANCEN = 38;
  /** RegularExpression Id. */
  int CREATEPROPERTYSET = 39;
  /** RegularExpression Id. */
  int CREATEVIRTUALDIMENSION = 40;
  /** RegularExpression Id. */
  int CURRENT = 41;
  /** RegularExpression Id. */
  int CURRENTCUBE = 42;
  /** RegularExpression Id. */
  int DEFAULT_MEMBER = 43;
  /** RegularExpression Id. */
  int DEFAULTMEMBER = 44;
  /** RegularExpression Id. */
  int DESCRIPTION = 45;
  /** RegularExpression Id. */
  int DIMENSIONS = 46;
  /** RegularExpression Id. */
  int DISTINCT = 47;
  /** RegularExpression Id. */
  int DISTINCTCOUNT = 48;
  /** RegularExpression Id. */
  int DRILLDOWNLEVEL = 49;
  /** RegularExpression Id. */
  int DRILLDOWNLEVELBOTTOM = 50;
  /** RegularExpression Id. */
  int DRILLDOWNLEVELTOP = 51;
  /** RegularExpression Id. */
  int DRILLDOWNMEMBER = 52;
  /** RegularExpression Id. */
  int DRILLDOWNMEMBERBOTTOM = 53;
  /** RegularExpression Id. */
  int DRILLDOWNMEMBERTOP = 54;
  /** RegularExpression Id. */
  int DRILLTHROUGH = 55;
  /** RegularExpression Id. */
  int DRILLUPLEVEL = 56;
  /** RegularExpression Id. */
  int DRILLUPMEMBER = 57;
  /** RegularExpression Id. */
  int DROP = 58;
  /** RegularExpression Id. */
  int ELSE = 59;
  /** RegularExpression Id. */
  int EMPTY = 60;
  /** RegularExpression Id. */
  int END = 61;
  /** RegularExpression Id. */
  int ERROR = 62;
  /** RegularExpression Id. */
  int EXCLUDEEMPTY = 63;
  /** RegularExpression Id. */
  int EXPLAIN = 64;
  /** RegularExpression Id. */
  int EXTRACT = 65;
  /** RegularExpression Id. */
  int FALSE = 66;
  /** RegularExpression Id. */
  int FIRSTCHILD = 67;
  /** RegularExpression Id. */
  int FIRSTROWSET = 68;
  /** RegularExpression Id. */
  int FIRSTSIBLING = 69;
  /** RegularExpression Id. */
  int FOR = 70;
  /** RegularExpression Id. */
  int FREEZE = 71;
  /** RegularExpression Id. */
  int GENERATE = 72;
  /** RegularExpression Id. */
  int GLOBAL = 73;
  /** RegularExpression Id. */
  int GROUP = 74;
  /** RegularExpression Id. */
  int GROUPING = 75;
  /** RegularExpression Id. */
  int HEAD = 76;
  /** RegularExpression Id. */
  int HIDDEN = 77;
  /** RegularExpression Id. */
  int HIERARCHIZE = 78;
  /** RegularExpression Id. */
  int HIERARCHY = 79;
  /** RegularExpression Id. */
  int IF = 80;
  /** RegularExpression Id. */
  int IGNORE = 81;
  /** RegularExpression Id. */
  int IN = 82;
  /** RegularExpression Id. */
  int INCLUDEEMPTY = 83;
  /** RegularExpression Id. */
  int INDEX = 84;
  /** RegularExpression Id. */
  int IS = 85;
  /** RegularExpression Id. */
  int ISANCESTOR = 86;
  /** RegularExpression Id. */
  int ISGENERATION = 87;
  /** RegularExpression Id. */
  int ISLEAF = 88;
  /** RegularExpression Id. */
  int ISSIBLING = 89;
  /** RegularExpression Id. */
  int ITEM = 90;
  /** RegularExpression Id. */
  int LAG = 91;
  /** RegularExpression Id. */
  int LASTCHILD = 92;
  /** RegularExpression Id. */
  int LASTPERIODS = 93;
  /** RegularExpression Id. */
  int LASTSIBLING = 94;
  /** RegularExpression Id. */
  int LEAD = 95;
  /** RegularExpression Id. */
  int LEVEL = 96;
  /** RegularExpression Id. */
  int LEVELS = 97;
  /** RegularExpression Id. */
  int LINKMEMBER = 98;
  /** RegularExpression Id. */
  int LINREGINTERCEPT = 99;
  /** RegularExpression Id. */
  int LINREGPOINT = 100;
  /** RegularExpression Id. */
  int LINREGR2 = 101;
  /** RegularExpression Id. */
  int LINREGSLOPE = 102;
  /** RegularExpression Id. */
  int LINREGVARIANCE = 103;
  /** RegularExpression Id. */
  int MATCHES = 104;
  /** RegularExpression Id. */
  int MAXROWS = 105;
  /** RegularExpression Id. */
  int MAX = 106;
  /** RegularExpression Id. */
  int MEASURE = 107;
  /** RegularExpression Id. */
  int MEDIAN = 108;
  /** RegularExpression Id. */
  int MEMBERTOSTR = 109;
  /** RegularExpression Id. */
  int MIN = 110;
  /** RegularExpression Id. */
  int MTD = 111;
  /** RegularExpression Id. */
  int NAME = 112;
  /** RegularExpression Id. */
  int NAMETOSET = 113;
  /** RegularExpression Id. */
  int NEST = 114;
  /** RegularExpression Id. */
  int NEXTMEMBER = 115;
  /** RegularExpression Id. */
  int NO_ALLOCATION = 116;
  /** RegularExpression Id. */
  int NO_PROPERTIES = 117;
  /** RegularExpression Id. */
  int NON = 118;
  /** RegularExpression Id. */
  int NONEMPTYCROSSJOIN = 119;
  /** RegularExpression Id. */
  int NOT_RELATED_TO_FACTS = 120;
  /** RegularExpression Id. */
  int NULL = 121;
  /** RegularExpression Id. */
  int OPENINGPERIOD = 122;
  /** RegularExpression Id. */
  int PASS = 123;
  /** RegularExpression Id. */
  int PERIODSTODATE = 124;
  /** RegularExpression Id. */
  int PLAN = 125;
  /** RegularExpression Id. */
  int POST = 126;
  /** RegularExpression Id. */
  int PREDICT = 127;
  /** RegularExpression Id. */
  int PROPERTY = 128;
  /** RegularExpression Id. */
  int QTD = 129;
  /** RegularExpression Id. */
  int RANK = 130;
  /** RegularExpression Id. */
  int RECURSIVE = 131;
  /** RegularExpression Id. */
  int RELATIVE = 132;
  /** RegularExpression Id. */
  int RETURN = 133;
  /** RegularExpression Id. */
  int ROLLUPCHILDREN = 134;
  /** RegularExpression Id. */
  int ROOT = 135;
  /** RegularExpression Id. */
  int SCOPE = 136;
  /** RegularExpression Id. */
  int SESSION = 137;
  /** RegularExpression Id. */
  int SETTOARRAY = 138;
  /** RegularExpression Id. */
  int SETTOSTR = 139;
  /** RegularExpression Id. */
  int SORT = 140;
  /** RegularExpression Id. */
  int STDDEV = 141;
  /** RegularExpression Id. */
  int STDDEVP = 142;
  /** RegularExpression Id. */
  int STDEV = 143;
  /** RegularExpression Id. */
  int STDEVP = 144;
  /** RegularExpression Id. */
  int STORAGE = 145;
  /** RegularExpression Id. */
  int STRIPCALCULATEDMEMBERS = 146;
  /** RegularExpression Id. */
  int STRTOMEMBER = 147;
  /** RegularExpression Id. */
  int STRTOSET = 148;
  /** RegularExpression Id. */
  int STRTOTUPLE = 149;
  /** RegularExpression Id. */
  int STRTOVAL = 150;
  /** RegularExpression Id. */
  int STRTOVALUE = 151;
  /** RegularExpression Id. */
  int SUBSET = 152;
  /** RegularExpression Id. */
  int THEN = 153;
  /** RegularExpression Id. */
  int THIS = 154;
  /** RegularExpression Id. */
  int TOGGLEDRILLSTATE = 155;
  /** RegularExpression Id. */
  int TOPSUM = 156;
  /** RegularExpression Id. */
  int TOTALS = 157;
  /** RegularExpression Id. */
  int TREE = 158;
  /** RegularExpression Id. */
  int TRUE = 159;
  /** RegularExpression Id. */
  int TUPLETOSTR = 160;
  /** RegularExpression Id. */
  int TYPE = 161;
  /** RegularExpression Id. */
  int UNIQUE = 162;
  /** RegularExpression Id. */
  int UNIQUENAME = 163;
  /** RegularExpression Id. */
  int USE = 164;
  /** RegularExpression Id. */
  int USE_EQUAL_ALLOCATION = 165;
  /** RegularExpression Id. */
  int USE_WEIGHTED_ALLOCATION = 166;
  /** RegularExpression Id. */
  int USE_WEIGHTED_INCREMENT = 167;
  /** RegularExpression Id. */
  int USERNAME = 168;
  /** RegularExpression Id. */
  int VALIDMEASURE = 169;
  /** RegularExpression Id. */
  int VALUE = 170;
  /** RegularExpression Id. */
  int VAR = 171;
  /** RegularExpression Id. */
  int VARIANCE = 172;
  /** RegularExpression Id. */
  int VARIANCEP = 173;
  /** RegularExpression Id. */
  int VARP = 174;
  /** RegularExpression Id. */
  int VISUAL = 175;
  /** RegularExpression Id. */
  int VISUALTOTALS = 176;
  /** RegularExpression Id. */
  int WHEN = 177;
  /** RegularExpression Id. */
  int WTD = 178;
  /** RegularExpression Id. */
  int XOR = 179;
  /** RegularExpression Id. */
  int SELECT = 180;
  /** RegularExpression Id. */
  int FROM = 181;
  /** RegularExpression Id. */
  int WHERE = 182;
  /** RegularExpression Id. */
  int WITH = 183;
  /** RegularExpression Id. */
  int CUBE = 184;
  /** RegularExpression Id. */
  int MEMBER = 185;
  /** RegularExpression Id. */
  int DIMENSION = 186;
  /** RegularExpression Id. */
  int MEASURES = 187;
  /** RegularExpression Id. */
  int ROLE = 188;
  /** RegularExpression Id. */
  int SET = 189;
  /** RegularExpression Id. */
  int AS = 190;
  /** RegularExpression Id. */
  int OR = 191;
  /** RegularExpression Id. */
  int AND = 192;
  /** RegularExpression Id. */
  int NOT = 193;
  /** RegularExpression Id. */
  int ON = 194;
  /** RegularExpression Id. */
  int COLUMNS = 195;
  /** RegularExpression Id. */
  int ROWS = 196;
  /** RegularExpression Id. */
  int PAGES = 197;
  /** RegularExpression Id. */
  int CHAPTERS = 198;
  /** RegularExpression Id. */
  int SECTIONS = 199;
  /** RegularExpression Id. */
  int SPACE = 200;
  /** RegularExpression Id. */
  int CREATE = 201;
  /** RegularExpression Id. */
  int BUILD = 202;
  /** RegularExpression Id. */
  int UPDATE = 203;
  /** RegularExpression Id. */
  int DELETE = 204;
  /** RegularExpression Id. */
  int INSERT = 205;
  /** RegularExpression Id. */
  int MAX_MEMBER_LEVEL = 206;
  /** RegularExpression Id. */
  int LOAD_CUBE_DATA = 207;
  /** RegularExpression Id. */
  int SYNCHRONIZED = 208;
  /** RegularExpression Id. */
  int SYNC = 209;
  /** RegularExpression Id. */
  int WRITEBACK = 210;
  /** RegularExpression Id. */
  int SEND_VCE_NODES = 211;
  /** RegularExpression Id. */
  int ALL = 212;
  /** RegularExpression Id. */
  int COUNT = 213;
  /** RegularExpression Id. */
  int INCLUDE_EMPTY = 214;
  /** RegularExpression Id. */
  int EXCLUDE_EMPTY = 215;
  /** RegularExpression Id. */
  int SUM = 216;
  /** RegularExpression Id. */
  int LOOK_UP_CUBE = 217;
  /** RegularExpression Id. */
  int PROPERTIES = 218;
  /** RegularExpression Id. */
  int IIF = 219;
  /** RegularExpression Id. */
  int COALESCE_EMPTY = 220;
  /** RegularExpression Id. */
  int CURRENT_MEMBER = 221;
  /** RegularExpression Id. */
  int PARENT = 222;
  /** RegularExpression Id. */
  int PREV_MEMBER = 223;
  /** RegularExpression Id. */
  int PARALLEL_PERIOD = 224;
  /** RegularExpression Id. */
  int IS_EMPTY = 225;
  /** RegularExpression Id. */
  int CROSS_JOIN = 226;
  /** RegularExpression Id. */
  int MEMBERS = 227;
  /** RegularExpression Id. */
  int FILTER = 228;
  /** RegularExpression Id. */
  int CHILDREN = 229;
  /** RegularExpression Id. */
  int TOP_COUNT = 230;
  /** RegularExpression Id. */
  int TAIL = 231;
  /** RegularExpression Id. */
  int YTD = 232;
  /** RegularExpression Id. */
  int BOTTOM_PERCENT = 233;
  /** RegularExpression Id. */
  int TOP_PERCENT = 234;
  /** RegularExpression Id. */
  int UNION = 235;
  /** RegularExpression Id. */
  int INTERSECT = 236;
  /** RegularExpression Id. */
  int EXCEPT = 237;
  /** RegularExpression Id. */
  int LATERAL_MEMBERS = 238;
  /** RegularExpression Id. */
  int DESCENDANTS = 239;
  /** RegularExpression Id. */
  int SELF = 240;
  /** RegularExpression Id. */
  int AFTER = 241;
  /** RegularExpression Id. */
  int BEFORE = 242;
  /** RegularExpression Id. */
  int BEFORE_AND_AFTER = 243;
  /** RegularExpression Id. */
  int SELF_AND_AFTER = 244;
  /** RegularExpression Id. */
  int SELF_AND_BEFORE = 245;
  /** RegularExpression Id. */
  int SELF_BEFORE_AFTER = 246;
  /** RegularExpression Id. */
  int LEAVES = 247;
  /** RegularExpression Id. */
  int ORDER = 248;
  /** RegularExpression Id. */
  int ASC = 249;
  /** RegularExpression Id. */
  int DESC = 250;
  /** RegularExpression Id. */
  int BASC = 251;
  /** RegularExpression Id. */
  int BDESC = 252;
  /** RegularExpression Id. */
  int DIGIT = 253;
  /** RegularExpression Id. */
  int LETTER = 254;
  /** RegularExpression Id. */
  int SIMPLE_NUMERIC = 255;
  /** RegularExpression Id. */
  int IDENTIFIER = 256;
  /** RegularExpression Id. */
  int ID_SELECTOR = 257;
  /** RegularExpression Id. */
  int STRING_LITERAL = 258;
  /** RegularExpression Id. */
  int CHARACTER_BLOCK = 259;
  /** RegularExpression Id. */
  int ANNOTATION_SET = 260;
  /** RegularExpression Id. */
  int ANNOTATION_MEMBER = 261;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT>",
    "<SINGLE_LINE_COMMENT_2>",
    "\"absolute\"",
    "\"actionparameterset\"",
    "\"addcalculatedmembers\"",
    "\"aggregate\"",
    "\"allmembers\"",
    "\"ancestor\"",
    "\"ancestors\"",
    "\"ascendants\"",
    "\"average\"",
    "\"axis\"",
    "\"bottomcount\"",
    "\"bottomsum\"",
    "\"by\"",
    "\"cache\"",
    "\"calculate\"",
    "\"calculation\"",
    "\"calculationcurrentpass\"",
    "\"calculationpassvalue\"",
    "\"calculations\"",
    "\"call\"",
    "\"case\"",
    "\"cast\"",
    "\"cell\"",
    "\"cellformulasetlist\"",
    "\"clear\"",
    "\"closingperiod\"",
    "\"column\"",
    "\"correlation\"",
    "\"cousin\"",
    "\"covariance\"",
    "\"covariancen\"",
    "\"createpropertyset\"",
    "\"createvirtualdimension\"",
    "\"current\"",
    "\"currentcube\"",
    "\"default_member\"",
    "\"defaultmember\"",
    "\"description\"",
    "\"dimensions\"",
    "\"distinct\"",
    "\"distinctcount\"",
    "\"drilldownlevel\"",
    "\"drilldownlevelbottom\"",
    "\"drilldownleveltop\"",
    "\"drilldownmember\"",
    "\"drilldownmemberbottom\"",
    "\"drilldownmembertop\"",
    "\"drillthrough\"",
    "\"drilluplevel\"",
    "\"drillupmember\"",
    "\"drop\"",
    "\"else\"",
    "\"empty\"",
    "\"end\"",
    "\"error\"",
    "\"excludeempty\"",
    "\"explain\"",
    "\"extract\"",
    "\"false\"",
    "\"firstchild\"",
    "\"firstrowset\"",
    "\"firstsibling\"",
    "\"for\"",
    "\"freeze\"",
    "\"generate\"",
    "\"global\"",
    "\"group\"",
    "\"grouping\"",
    "\"head\"",
    "\"hidden\"",
    "\"hierarchize\"",
    "\"hierarchy\"",
    "\"if\"",
    "\"ignore\"",
    "\"in\"",
    "\"includeempty\"",
    "\"index\"",
    "\"is\"",
    "\"isancestor\"",
    "\"isgeneration\"",
    "\"isleaf\"",
    "\"issibling\"",
    "\"item\"",
    "\"lag\"",
    "\"lastchild\"",
    "\"lastperiods\"",
    "\"lastsibling\"",
    "\"lead\"",
    "\"level\"",
    "\"levels\"",
    "\"linkmember\"",
    "\"linregintercept\"",
    "\"linregpoint\"",
    "\"linregr2\"",
    "\"linregslope\"",
    "\"linregvariance\"",
    "\"matches\"",
    "\"maxrows\"",
    "\"max\"",
    "\"measure\"",
    "\"median\"",
    "\"membertostr\"",
    "\"min\"",
    "\"mtd\"",
    "\"name\"",
    "\"nametoset\"",
    "\"nest\"",
    "\"nextmember\"",
    "\"no_allocation\"",
    "\"no_properties\"",
    "\"non\"",
    "\"nonemptycrossjoin\"",
    "\"not_related_to_facts\"",
    "\"null\"",
    "\"openingperiod\"",
    "\"pass\"",
    "\"periodstodate\"",
    "\"plan\"",
    "\"post\"",
    "\"predict\"",
    "\"property\"",
    "\"qtd\"",
    "\"rank\"",
    "\"recursive\"",
    "\"relative\"",
    "\"return\"",
    "\"rollupchildren\"",
    "\"root\"",
    "\"scope\"",
    "\"session\"",
    "\"settoarray\"",
    "\"settostr\"",
    "\"sort\"",
    "\"stddev\"",
    "\"stddevp\"",
    "\"stdev\"",
    "\"stdevp\"",
    "\"storage\"",
    "\"stripcalculatedmembers\"",
    "\"strtomember\"",
    "\"strtoset\"",
    "\"strtotuple\"",
    "\"strtoval\"",
    "\"strtovalue\"",
    "\"subset\"",
    "\"then\"",
    "\"this\"",
    "\"toggledrillstate\"",
    "\"topsum\"",
    "\"totals\"",
    "\"tree\"",
    "\"true\"",
    "\"tupletostr\"",
    "\"type\"",
    "\"unique\"",
    "\"uniquename\"",
    "\"use\"",
    "\"use_equal_allocation\"",
    "\"use_weighted_allocation\"",
    "\"use_weighted_increment\"",
    "\"username\"",
    "\"validmeasure\"",
    "\"value\"",
    "\"var\"",
    "\"variance\"",
    "\"variancep\"",
    "\"varp\"",
    "\"visual\"",
    "\"visualtotals\"",
    "\"when\"",
    "\"wtd\"",
    "\"xor\"",
    "\"select\"",
    "\"from\"",
    "\"where\"",
    "\"with\"",
    "\"cube\"",
    "\"member\"",
    "\"dimension\"",
    "\"measures\"",
    "\"role\"",
    "\"set\"",
    "\"as\"",
    "\"or\"",
    "\"and\"",
    "\"not\"",
    "\"on\"",
    "\"COLUMNS\"",
    "\"rows\"",
    "\"PAGES\"",
    "\"CHAPTERS\"",
    "\"SECTIONS\"",
    "\"space\"",
    "\"create\"",
    "\"Build\"",
    "\"update\"",
    "\"DELETE\"",
    "\"INSERT\"",
    "\"MAX_MEMBER_LEVEL\"",
    "\"LOAD_CUBE_DATA\"",
    "\"synchronized\"",
    "\"sync\"",
    "\"writeBack\"",
    "\"@send_vce_nodes\"",
    "\"All\"",
    "\"Count\"",
    "\"Include_Empty\"",
    "\"Exclude_Empty\"",
    "\"Sum\"",
    "\"LookUpCube\"",
    "\"properties\"",
    "\"iif\"",
    "\"CoalesceEmpty\"",
    "\"CurrentMember\"",
    "\"PARENT\"",
    "\"PrevMember\"",
    "\"ParallelPeriod\"",
    "\"IsEmpty\"",
    "\"CrossJoin\"",
    "\"Members\"",
    "\"filter\"",
    "\"Children\"",
    "\"TopCount\"",
    "\"Tail\"",
    "\"Ytd\"",
    "\"bottomPercent\"",
    "\"topPercent\"",
    "\"union\"",
    "\"Intersect\"",
    "\"EXCEPT\"",
    "\"LateralMembers\"",
    "\"DESCENDANTS\"",
    "\"SELF\"",
    "\"AFTER\"",
    "\"BEFORE\"",
    "\"BEFORE_AND_AFTER\"",
    "\"SELF_AND_AFTER\"",
    "\"SELF_AND_BEFORE\"",
    "\"SELF_BEFORE_AFTER\"",
    "\"LEAVES\"",
    "\"ORDER\"",
    "\"asc\"",
    "\"desc\"",
    "\"basc\"",
    "\"bdesc\"",
    "<DIGIT>",
    "<LETTER>",
    "<SIMPLE_NUMERIC>",
    "<IDENTIFIER>",
    "<ID_SELECTOR>",
    "<STRING_LITERAL>",
    "<CHARACTER_BLOCK>",
    "\"@set\"",
    "\"@member\"",
    "\";\"",
    "\"@\"",
    "\"=\"",
    "\"(\"",
    "\",\"",
    "\")\"",
    "\"\\\'\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"!\"",
    "\":\"",
    "\"{\"",
    "\"}\"",
    "\">\"",
    "\">=\"",
    "\"<\"",
    "\"<=\"",
    "\"<>\"",
    "\".\"",
  };

}
