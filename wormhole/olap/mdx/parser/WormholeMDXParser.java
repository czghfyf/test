/* WormholeMDXParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. WormholeMDXParser.java */
package cn.bgotech.wormhole.olap.mdx.parser;

import java.io.StringReader;

import java.util.ArrayList;
import java.util.List;
import java.util.LinkedList;

import cn.bgotech.wormhole.olap.OlapEngine;

import cn.bgotech.wormhole.olap.mdx.*;
import cn.bgotech.wormhole.olap.mdx.auxi.*;

import cn.bgotech.wormhole.olap.mdx.profile.*;
import cn.bgotech.wormhole.olap.mdx.bg_expansion.*;

import cn.bgotech.wormhole.olap.mdx.syntax.exp.*;
import cn.bgotech.wormhole.olap.mdx.syntax.b00lean.exp.*;
import cn.bgotech.wormhole.olap.mdx.syntax.structures.*;

import cn.bgotech.wormhole.olap.mdx.syntax.fun.exp.*;
import cn.bgotech.wormhole.olap.mdx.syntax.fun.member.*;
import cn.bgotech.wormhole.olap.mdx.syntax.fun.set.*;

import cn.bgotech.wormhole.olap.mdx.syntax.b00lean.functions.*;

public class WormholeMDXParser/*@bgen(jjtree)*/implements WormholeMDXParserTreeConstants, WormholeMDXParserConstants {/*@bgen(jjtree)*/
  protected JJTWormholeMDXParserState jjtree = new JJTWormholeMDXParserState();
//	private SimpleNode root = null;

    private OlapEngine olapEngine;

    public static String peelShell(String s) {
        s = s.trim();
        return s.substring(1, s.length() - 1).trim();
    }

    public WormholeMDXParser(String mdx, OlapEngine olapEngine) {
        this(new StringReader(mdx));
        this.olapEngine = olapEngine;
    }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/* parser entry */
  final public Object execute() throws ParseException {/*@bgen(jjtree) execute */
        ASTexecute jjtn000 = new ASTexecute(this, JJTEXECUTE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);SFPOfExecuteMDX sfp = null;
        ContextAtExecutingMDX context;
        MDDManagementAssistant mma = null;
        Token tkn = null;
        Object ___result_ = null;
        Auxiliary_MDDL_NQ ___aux_ = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SELECT:
      case WITH:{
context = new ContextAtExecutingMDX(olapEngine);
        sfp = select_statement(context);
context.set(sfp); ___result_ = sfp;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        if (jj_2_1(20)) {
          ___aux_ = auxiliary_MDDL_NQ_statement();
___result_ = ___aux_;
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CREATE:
          case BUILD:
          case UPDATE:
          case DELETE:
          case INSERT:
          case LOAD_CUBE_DATA:
          case SEND_VCE_NODES:{
___result_ = mma = new MDDManagementAssistant();
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case SEND_VCE_NODES:{
              jj_consume_token(SEND_VCE_NODES);
              tkn = jj_consume_token(STRING_LITERAL);
mma.readyConnectToVCENodes(peelShell(tkn.image));
              break;
              }
            default:
              jj_la1[0] = jj_gen;
              ;
            }
            label_1:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case CREATE:{
                create_statement(mma);
                break;
                }
              case BUILD:{
                build_statement(mma);
                break;
                }
              case UPDATE:{
                update_statement(mma);
                break;
                }
              case DELETE:{
                delete_statement(mma);
                break;
                }
              case INSERT:{
                insert_statement(mma);
                break;
                }
              case LOAD_CUBE_DATA:{
                loadCubeData_statement(mma);
                break;
                }
              default:
                jj_la1[1] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              jj_consume_token(262);
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case CREATE:
              case BUILD:
              case UPDATE:
              case DELETE:
              case INSERT:
              case LOAD_CUBE_DATA:{
                ;
                break;
                }
              default:
                jj_la1[2] = jj_gen;
                break label_1;
              }
            }
            break;
            }
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
// this.root = jjtThis;
                {if ("" != null) return ___result_;}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public Auxiliary_MDDL_NQ auxiliary_MDDL_NQ_statement() throws ParseException {/*@bgen(jjtree) auxiliary_MDDL_NQ_statement */
    ASTauxiliary_MDDL_NQ_statement jjtn000 = new ASTauxiliary_MDDL_NQ_statement(this, JJTAUXILIARY_MDDL_NQ_STATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Auxiliary_MDDL_NQ aux = new Auxiliary_MDDL_NQ();
    try {
      if (jj_2_2(20)) {
        create_dimension_statement(aux);
      } else if (jj_2_3(20)) {
        create_member_statement(aux);
      } else if (jj_2_4(20)) {
        build_cube_statement(aux);
      } else if (jj_2_5(20)) {
        sync_cube_statement(aux);
      } else if (jj_2_6(20)) {
        writeback_cube_statement(aux);
      } else if (jj_2_7(20)) {
        int_upt_del_measure_statement(aux);
      } else if (jj_2_8(20)) {
        load_cube_data_statement(aux);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
{if ("" != null) return aux;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void create_dimension_statement(Auxiliary_MDDL_NQ aux) throws ParseException {/*@bgen(jjtree) create_dimension_statement */
    ASTcreate_dimension_statement jjtn000 = new ASTcreate_dimension_statement(this, JJTCREATE_DIMENSION_STATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token tkn = null, lv_tkn = null;
    try {
      jj_consume_token(SPACE);
      jj_consume_token(263);
      tkn = jj_consume_token(CHARACTER_BLOCK);
aux.setSpace(peelShell(tkn.image));
      label_2:
      while (true) {
        jj_consume_token(CREATE);
        jj_consume_token(DIMENSION);
        tkn = jj_consume_token(CHARACTER_BLOCK);
        jj_consume_token(MAX_MEMBER_LEVEL);
        jj_consume_token(264);
        lv_tkn = jj_consume_token(SIMPLE_NUMERIC);
        jj_consume_token(262);
aux.add( new AuxCreateDimension(peelShell(tkn.image), lv_tkn.image) );
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CREATE:{
          ;
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          break label_2;
        }
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void create_member_statement(Auxiliary_MDDL_NQ aux) throws ParseException {/*@bgen(jjtree) create_member_statement */
    ASTcreate_member_statement jjtn000 = new ASTcreate_member_statement(this, JJTCREATE_MEMBER_STATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token tkn = null;
    MultiDimensionalDomainSelector selector = null;
    try {
      jj_consume_token(SPACE);
      jj_consume_token(263);
      tkn = jj_consume_token(CHARACTER_BLOCK);
aux.setSpace(peelShell(tkn.image));
      label_3:
      while (true) {
        jj_consume_token(CREATE);
        jj_consume_token(MEMBER);
        selector = multi_dimensional_domain_select();
        jj_consume_token(262);
aux.add( new AuxCreateMember(selector) );
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CREATE:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void build_cube_statement(Auxiliary_MDDL_NQ aux) throws ParseException {/*@bgen(jjtree) build_cube_statement */
    ASTbuild_cube_statement jjtn000 = new ASTbuild_cube_statement(this, JJTBUILD_CUBE_STATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token tkn = null, dm_tk = null, dr_tk = null, mea_tk = null;
    List<AuxBuildCube.Dim__Role> drList = new ArrayList();
    List<String> measures = new ArrayList();
    try {
      jj_consume_token(SPACE);
      jj_consume_token(263);
      tkn = jj_consume_token(CHARACTER_BLOCK);
aux.setSpace(peelShell(tkn.image));
      label_4:
      while (true) {
        jj_consume_token(BUILD);
        jj_consume_token(CUBE);
        tkn = jj_consume_token(CHARACTER_BLOCK);
        jj_consume_token(265);
        jj_consume_token(DIMENSION);
        dm_tk = jj_consume_token(CHARACTER_BLOCK);
        jj_consume_token(ROLE);
        dr_tk = jj_consume_token(CHARACTER_BLOCK);
drList.add(new AuxBuildCube.Dim__Role(peelShell(dm_tk.image), peelShell(dr_tk.image)));
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 266:{
            ;
            break;
            }
          default:
            jj_la1[7] = jj_gen;
            break label_5;
          }
          jj_consume_token(266);
          jj_consume_token(DIMENSION);
          dm_tk = jj_consume_token(CHARACTER_BLOCK);
          jj_consume_token(ROLE);
          dr_tk = jj_consume_token(CHARACTER_BLOCK);
drList.add(new AuxBuildCube.Dim__Role(peelShell(dm_tk.image), peelShell(dr_tk.image)));
        }
        jj_consume_token(267);
        jj_consume_token(MEASURES);
        jj_consume_token(265);
        mea_tk = jj_consume_token(CHARACTER_BLOCK);
measures.add(peelShell(mea_tk.image));
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 266:{
            ;
            break;
            }
          default:
            jj_la1[8] = jj_gen;
            break label_6;
          }
          jj_consume_token(266);
          mea_tk = jj_consume_token(CHARACTER_BLOCK);
measures.add(peelShell(mea_tk.image));
        }
        jj_consume_token(267);
        jj_consume_token(262);
aux.add(new AuxBuildCube(peelShell(tkn.image), drList, measures));
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BUILD:{
          ;
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void sync_cube_statement(Auxiliary_MDDL_NQ aux) throws ParseException {/*@bgen(jjtree) sync_cube_statement */
    ASTsync_cube_statement jjtn000 = new ASTsync_cube_statement(this, JJTSYNC_CUBE_STATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token tkn = null;
    try {
      jj_consume_token(SEND_VCE_NODES);
      tkn = jj_consume_token(STRING_LITERAL);
aux.setVCENodesInfo(peelShell(tkn.image));
      jj_consume_token(SPACE);
      jj_consume_token(263);
      tkn = jj_consume_token(CHARACTER_BLOCK);
aux.setSpace(peelShell(tkn.image));
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SYNCHRONIZED:{
          jj_consume_token(SYNCHRONIZED);
          break;
          }
        case SYNC:{
          jj_consume_token(SYNC);
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(CUBE);
        tkn = jj_consume_token(CHARACTER_BLOCK);
        jj_consume_token(262);
aux.add(new AuxSyncCube(peelShell(tkn.image)));
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SYNCHRONIZED:
        case SYNC:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_7;
        }
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void writeback_cube_statement(Auxiliary_MDDL_NQ aux) throws ParseException {/*@bgen(jjtree) writeback_cube_statement */
    ASTwriteback_cube_statement jjtn000 = new ASTwriteback_cube_statement(this, JJTWRITEBACK_CUBE_STATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token tkn = null;
    try {
      jj_consume_token(SEND_VCE_NODES);
      tkn = jj_consume_token(STRING_LITERAL);
aux.setVCENodesInfo(peelShell(tkn.image));
      jj_consume_token(SPACE);
      jj_consume_token(263);
      tkn = jj_consume_token(CHARACTER_BLOCK);
aux.setSpace(peelShell(tkn.image));
      label_8:
      while (true) {
        jj_consume_token(WRITEBACK);
        jj_consume_token(CUBE);
        tkn = jj_consume_token(CHARACTER_BLOCK);
        jj_consume_token(262);
aux.add(new AuxWriteBackCube(peelShell(tkn.image)));
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case WRITEBACK:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_8;
        }
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void int_upt_del_measure_statement(Auxiliary_MDDL_NQ aux) throws ParseException {/*@bgen(jjtree) int_upt_del_measure_statement */
    ASTint_upt_del_measure_statement jjtn000 = new ASTint_upt_del_measure_statement(this, JJTINT_UPT_DEL_MEASURE_STATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token tkn = null;
    AuxCUDMeasure cudMea = null;
    try {
      jj_consume_token(SEND_VCE_NODES);
      tkn = jj_consume_token(STRING_LITERAL);
aux.setVCENodesInfo(peelShell(tkn.image));
      jj_consume_token(SPACE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 263:{
        jj_consume_token(263);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      tkn = jj_consume_token(CHARACTER_BLOCK);
aux.setSpace(peelShell(tkn.image));
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INSERT:{
        jj_consume_token(INSERT);
aux.setAction(Auxiliary_MDDL_NQ.ActionEnum.INSERT);
        break;
        }
      case UPDATE:{
        jj_consume_token(UPDATE);
aux.setAction(Auxiliary_MDDL_NQ.ActionEnum.UPDATE);
        break;
        }
      case DELETE:{
        jj_consume_token(DELETE);
aux.setAction(Auxiliary_MDDL_NQ.ActionEnum.DELETE);
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      tkn = jj_consume_token(CHARACTER_BLOCK);
aux.setCube(peelShell(tkn.image));
      label_9:
      while (true) {
        cudMea = CUD_measure_stat_V();
aux.add(cudMea);
        jj_consume_token(262);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 265:{
          ;
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          break label_9;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public AuxCUDMeasure CUD_measure_stat_V() throws ParseException {/*@bgen(jjtree) CUD_measure_stat_V */
    ASTCUD_measure_stat_V jjtn000 = new ASTCUD_measure_stat_V(this, JJTCUD_MEASURE_STAT_V);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);MultiDimensionalDomainSelector mbr_sel = null;
    List<MultiDimensionalDomainSelector> members = new ArrayList();
    List<AuxCUDMeasure.MeasureInfo> measures = new ArrayList();
    Token meaTk = null;
    Double meaVal = null;
    try {
      jj_consume_token(265);
      mbr_sel = multi_dimensional_domain_select();
members.add(mbr_sel);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 266:{
          ;
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          break label_10;
        }
        jj_consume_token(266);
        mbr_sel = multi_dimensional_domain_select();
members.add(mbr_sel);
      }
      jj_consume_token(267);
      jj_consume_token(MEASURES);
      jj_consume_token(265);
meaVal = null;
      meaTk = jj_consume_token(CHARACTER_BLOCK);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 264:{
        jj_consume_token(264);
        meaVal = signed_double_statement();
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        ;
      }
measures.add(new AuxCUDMeasure.MeasureInfo(peelShell(meaTk.image), meaVal));
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 266:{
          ;
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          break label_11;
        }
        jj_consume_token(266);
meaVal = null;
        meaTk = jj_consume_token(CHARACTER_BLOCK);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 264:{
          jj_consume_token(264);
          meaVal = signed_double_statement();
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          ;
        }
measures.add(new AuxCUDMeasure.MeasureInfo(peelShell(meaTk.image), meaVal));
      }
      jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new AuxCUDMeasure(members, measures);}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void load_cube_data_statement(Auxiliary_MDDL_NQ aux) throws ParseException {/*@bgen(jjtree) load_cube_data_statement */
    ASTload_cube_data_statement jjtn000 = new ASTload_cube_data_statement(this, JJTLOAD_CUBE_DATA_STATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token tkn = null;
    try {
      jj_consume_token(SEND_VCE_NODES);
      tkn = jj_consume_token(STRING_LITERAL);
aux.setVCENodesInfo(peelShell(tkn.image));
      jj_consume_token(SPACE);
      jj_consume_token(263);
      tkn = jj_consume_token(CHARACTER_BLOCK);
aux.setSpace(peelShell(tkn.image));
      label_12:
      while (true) {
        jj_consume_token(LOAD_CUBE_DATA);
        tkn = jj_consume_token(CHARACTER_BLOCK);
        jj_consume_token(262);
aux.add(new AuxLoadCubeData(peelShell(tkn.image)));
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LOAD_CUBE_DATA:{
          ;
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          break label_12;
        }
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void create_statement(MDDManagementAssistant mma) throws ParseException {/*@bgen(jjtree) create_statement */
    ASTcreate_statement jjtn000 = new ASTcreate_statement(this, JJTCREATE_STATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);MultiDimensionalDomainSelector.Part part, part2;
    MultiDimensionalDomainSelector mdds;
    Token tk;
    try {
      jj_consume_token(CREATE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SPACE:{
        jj_consume_token(SPACE);
        part = domain_selector_part();
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
mma.readyToCreateSpace(part.getImage().trim());
        break;
        }
      case DIMENSION:{
        jj_consume_token(DIMENSION);
        part = domain_selector_part();
        jj_consume_token(263);
        part2 = domain_selector_part();
        jj_consume_token(MAX_MEMBER_LEVEL);
        jj_consume_token(264);
        tk = jj_consume_token(SIMPLE_NUMERIC);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
mma.readyToCreateDimension(part.getImage().trim(), part2.getImage().trim(), Integer.parseInt(tk.image));
        break;
        }
      case MEMBER:{
        jj_consume_token(MEMBER);
        part = domain_selector_part();
        jj_consume_token(263);
        mdds = multi_dimensional_domain_select();
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
mma.readyToCreateMember(part.getImage().trim(), mdds);
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void loadCubeData_statement(MDDManagementAssistant mma) throws ParseException {/*@bgen(jjtree) loadCubeData_statement */
    ASTloadCubeData_statement jjtn000 = new ASTloadCubeData_statement(this, JJTLOADCUBEDATA_STATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t = null;
    ExeLoadCubeDataUnit u = null;
    try {
u = new ExeLoadCubeDataUnit();
      jj_consume_token(LOAD_CUBE_DATA);
      t = jj_consume_token(STRING_LITERAL);
u.setSpaceName(peelShell(t.image));
      t = jj_consume_token(STRING_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
u.setCubeName(peelShell(t.image)); mma.addExeUnit(u);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void build_statement(MDDManagementAssistant mma) throws ParseException {/*@bgen(jjtree) build_statement */
    ASTbuild_statement jjtn000 = new ASTbuild_statement(this, JJTBUILD_STATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);MultiDimensionalDomainSelector.Part part1, part2;
    try {
ExeBuildCubeUnit exeUnit = new ExeBuildCubeUnit();
      jj_consume_token(BUILD);
      jj_consume_token(CUBE);
      part1 = domain_selector_part();
      jj_consume_token(263);
      part2 = domain_selector_part();
exeUnit.setSpaceName(part1.getImage().trim()); exeUnit.setCubeName(part2.getImage().trim());
      jj_consume_token(265);
      jj_consume_token(DIMENSION);
      part1 = domain_selector_part();
      jj_consume_token(ROLE);
      part2 = domain_selector_part();
exeUnit.addDimensionRoleMatcher(part1.getImage().trim(), part2.getImage().trim());
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 266:{
          ;
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          break label_13;
        }
        jj_consume_token(266);
        jj_consume_token(DIMENSION);
        part1 = domain_selector_part();
        jj_consume_token(ROLE);
        part2 = domain_selector_part();
exeUnit.addDimensionRoleMatcher(part1.getImage().trim(), part2.getImage().trim());
      }
      jj_consume_token(267);
      jj_consume_token(MEASURES);
      jj_consume_token(265);
      part1 = domain_selector_part();
exeUnit.addMeasureMember(part1.getImage().trim());
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 266:{
          ;
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          break label_14;
        }
        jj_consume_token(266);
        part1 = domain_selector_part();
exeUnit.addMeasureMember(part1.getImage().trim());
      }
      jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
mma.addExeUnit(exeUnit);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void insert_statement(MDDManagementAssistant mma) throws ParseException {/*@bgen(jjtree) insert_statement */
    ASTinsert_statement jjtn000 = new ASTinsert_statement(this, JJTINSERT_STATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);MultiDimensionalDomainSelector.Part part;
    MultiDimensionalDomainSelector mdds;
    Token tkn;
    try {
ExeInsertMeasuresUnit insUnit = new ExeInsertMeasuresUnit();
      jj_consume_token(INSERT);
      part = domain_selector_part();
insUnit.setSpaceName(part.getImage().trim());
      jj_consume_token(263);
      part = domain_selector_part();
insUnit.setCubeName(part.getImage().trim());
      jj_consume_token(265);
      mdds = multi_dimensional_domain_select();
insUnit.addMemberSelector(mdds);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 266:{
          ;
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          break label_15;
        }
        jj_consume_token(266);
        mdds = multi_dimensional_domain_select();
insUnit.addMemberSelector(mdds);
      }
      jj_consume_token(267);
      jj_consume_token(MEASURES);
      jj_consume_token(265);
      part = domain_selector_part();
      jj_consume_token(264);
      tkn = jj_consume_token(SIMPLE_NUMERIC);
insUnit.insertMeasure(part.getImage().trim(), tkn.image);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 266:{
          ;
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          break label_16;
        }
        jj_consume_token(266);
        part = domain_selector_part();
        jj_consume_token(264);
        tkn = jj_consume_token(SIMPLE_NUMERIC);
insUnit.insertMeasure(part.getImage().trim(), tkn.image);
      }
      jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
mma.addExeUnit(insUnit);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void update_statement(MDDManagementAssistant mma) throws ParseException {/*@bgen(jjtree) update_statement */
    ASTupdate_statement jjtn000 = new ASTupdate_statement(this, JJTUPDATE_STATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);MultiDimensionalDomainSelector.Part part;
    MultiDimensionalDomainSelector mdds;
    Token tkn;
    try {
ExeUpdateMeasuresUnit exeUnit = new ExeUpdateMeasuresUnit();
      jj_consume_token(UPDATE);
      part = domain_selector_part();
exeUnit.setSpaceName(part.getImage().trim());
      jj_consume_token(263);
      part = domain_selector_part();
exeUnit.setCubeName(part.getImage().trim());
      jj_consume_token(265);
      mdds = multi_dimensional_domain_select();
exeUnit.addMemberSelector(mdds);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 266:{
          ;
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          break label_17;
        }
        jj_consume_token(266);
        mdds = multi_dimensional_domain_select();
exeUnit.addMemberSelector(mdds);
      }
      jj_consume_token(267);
      jj_consume_token(MEASURES);
      jj_consume_token(265);
      part = domain_selector_part();
      jj_consume_token(264);
      tkn = jj_consume_token(SIMPLE_NUMERIC);
exeUnit.updateMeasure(part.getImage().trim(), tkn.image);
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 266:{
          ;
          break;
          }
        default:
          jj_la1[27] = jj_gen;
          break label_18;
        }
        jj_consume_token(266);
        part = domain_selector_part();
        jj_consume_token(264);
        tkn = jj_consume_token(SIMPLE_NUMERIC);
exeUnit.updateMeasure(part.getImage().trim(), tkn.image);
      }
      jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
mma.addExeUnit(exeUnit);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void delete_statement(MDDManagementAssistant mma) throws ParseException {/*@bgen(jjtree) delete_statement */
    ASTdelete_statement jjtn000 = new ASTdelete_statement(this, JJTDELETE_STATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);MultiDimensionalDomainSelector.Part part;
    MultiDimensionalDomainSelector mdds;
    try {
ExeDeleteMeasuresUnit exeUnit = new ExeDeleteMeasuresUnit();
      jj_consume_token(DELETE);
      part = domain_selector_part();
exeUnit.setSpaceName(part.getImage().trim());
      jj_consume_token(263);
      part = domain_selector_part();
exeUnit.setCubeName(part.getImage().trim());
      jj_consume_token(265);
      mdds = multi_dimensional_domain_select();
exeUnit.addMemberSelector(mdds);
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 266:{
          ;
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          break label_19;
        }
        jj_consume_token(266);
        mdds = multi_dimensional_domain_select();
exeUnit.addMemberSelector(mdds);
      }
      jj_consume_token(267);
      jj_consume_token(MEASURES);
      jj_consume_token(265);
      part = domain_selector_part();
exeUnit.deleteMeasure(part.getImage().trim());
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 266:{
          ;
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          break label_20;
        }
        jj_consume_token(266);
        part = domain_selector_part();
exeUnit.deleteMeasure(part.getImage().trim());
      }
      jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
mma.addExeUnit(exeUnit);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public MDXQueryResultSFP select_statement(ContextAtExecutingMDX ctx) throws ParseException {/*@bgen(jjtree) select_statement */
        ASTselect_statement jjtn000 = new ASTselect_statement(this, JJTSELECT_STATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);List<WithFormula> withFormulaList = new ArrayList<WithFormula>();
        Axis axis = null;
        List<Axis> axisList = new ArrayList<Axis>();
        CubePE cubePe = null;
        WhereStatement whereStat = null; // ConditionLimitFragment whereFragment = null;

    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WITH:{
        withFormulaList = with_statement_def(ctx);
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      jj_consume_token(SELECT);
      axis = axis_statement_def(ctx);
axisList.add(axis);
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 266:{
          ;
          break;
          }
        default:
          jj_la1[31] = jj_gen;
          break label_21;
        }
        jj_consume_token(266);
        axis = axis_statement_def(ctx);
axisList.add(axis);
      }
      jj_consume_token(FROM);
      cubePe = cube(ctx);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHERE:{
        jj_consume_token(WHERE);
        whereStat = where_statement_def(ctx);
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new MDXQueryResultSFP (ctx, withFormulaList, axisList, cubePe, whereStat);}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public List<WithFormula> with_statement_def(ContextAtExecutingMDX ctx) throws ParseException {/*@bgen(jjtree) with_statement_def */
        ASTwith_statement_def jjtn000 = new ASTwith_statement_def(this, JJTWITH_STATEMENT_DEF);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);List<WithFormula> formulaList = new ArrayList<WithFormula>();
        WithFormula wf = null;
    try {
      jj_consume_token(WITH);
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MEMBER:{
          wf = member_formula_statement(ctx);
          break;
          }
        case SET:{
          wf = set_formula_statement(ctx);
          break;
          }
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
formulaList.add(wf);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MEMBER:
        case SET:{
          ;
          break;
          }
        default:
          jj_la1[34] = jj_gen;
          break label_22;
        }
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return formulaList;}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public SetFormula set_formula_statement(ContextAtExecutingMDX ctx) throws ParseException {/*@bgen(jjtree) set_formula_statement */
        ASTset_formula_statement jjtn000 = new ASTset_formula_statement(this, JJTSET_FORMULA_STATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);MultiDimensionalDomainSelector mdds = null; // CharacterBlocksToken rename to MultiDimensionalDomainSelector
        SetPE setPe = null;
    try {
      jj_consume_token(SET);
      mdds = multi_dimensional_domain_select();
      jj_consume_token(AS);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CURRENT_MEMBER:
      case PARENT:
      case PREV_MEMBER:
      case PARALLEL_PERIOD:
      case CROSS_JOIN:
      case MEMBERS:
      case FILTER:
      case CHILDREN:
      case TOP_COUNT:
      case TAIL:
      case YTD:
      case BOTTOM_PERCENT:
      case TOP_PERCENT:
      case UNION:
      case INTERSECT:
      case EXCEPT:
      case LATERAL_MEMBERS:
      case DESCENDANTS:
      case ORDER:
      case IDENTIFIER:
      case ID_SELECTOR:
      case CHARACTER_BLOCK:
      case ANNOTATION_SET:
      case 265:
      case 276:{
        setPe = set(ctx);
        break;
        }
      case 268:{
        jj_consume_token(268);
        setPe = set(ctx);
        jj_consume_token(268);
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new SetFormula(mdds, setPe);}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public MemberFormula member_formula_statement(ContextAtExecutingMDX ctx) throws ParseException {/*@bgen(jjtree) member_formula_statement */
        ASTmember_formula_statement jjtn000 = new ASTmember_formula_statement(this, JJTMEMBER_FORMULA_STATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);MultiDimensionalDomainSelector mbrMatch = null;
        Expression exp = null;
    try {
      jj_consume_token(MEMBER);
      mbrMatch = multi_dimensional_domain_select();
      jj_consume_token(AS);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COUNT:
      case SUM:
      case LOOK_UP_CUBE:
      case PROPERTIES:
      case IIF:
      case COALESCE_EMPTY:
      case CURRENT_MEMBER:
      case PARENT:
      case PREV_MEMBER:
      case PARALLEL_PERIOD:
      case SIMPLE_NUMERIC:
      case IDENTIFIER:
      case ID_SELECTOR:
      case STRING_LITERAL:
      case CHARACTER_BLOCK:
      case 265:
      case 269:
      case 270:{
        exp = expression(ctx);
        break;
        }
      case 268:{
        jj_consume_token(268);
        exp = expression(ctx);
        jj_consume_token(268);
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new MemberFormula(mbrMatch, exp);}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression expression(ContextAtExecutingMDX ctx) throws ParseException {/*@bgen(jjtree) expression */
        ASTexpression jjtn000 = new ASTexpression(this, JJTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);CommonExpression exp = new CommonExpression();
        Term term = null;
    try {
      term = term(ctx);
exp.addTerm("+", term);
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 269:
        case 270:{
          ;
          break;
          }
        default:
          jj_la1[37] = jj_gen;
          break label_23;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 269:{
          jj_consume_token(269);
          term = term(ctx);
exp.addTerm("+", term);
          break;
          }
        case 270:{
          jj_consume_token(270);
          term = term(ctx);
exp.addTerm("-", term);
          break;
          }
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return exp;}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public Term term(ContextAtExecutingMDX ctx) throws ParseException {/*@bgen(jjtree) term */
        ASTterm jjtn000 = new ASTterm(this, JJTTERM);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Term term = new Term();
        Factory factory = null;
    try {
      factory = factory(ctx);
term.addFactory(null, factory);
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 271:
        case 272:
        case 273:{
          ;
          break;
          }
        default:
          jj_la1[39] = jj_gen;
          break label_24;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 271:{
          jj_consume_token(271);
          factory = factory(ctx);
term.addFactory("*", factory);
          break;
          }
        case 272:{
          jj_consume_token(272);
          factory = factory(ctx);
term.addFactory("/", factory);
          break;
          }
        case 273:{
          jj_consume_token(273);
          factory = factory(ctx);
term.addFactory("%", factory);
          break;
          }
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return term;}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public Factory factory(ContextAtExecutingMDX ctx) throws ParseException {/*@bgen(jjtree) factory */
        ASTfactory jjtn000 = new ASTfactory(this, JJTFACTORY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tkn = null;
        Token numTkn = null;
        String numStr = null;
        TuplePE tuplePe = null;
        Expression exp = null;
        ExpressionFunction fun = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SIMPLE_NUMERIC:
      case 269:
      case 270:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 269:
        case 270:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 269:{
            tkn = jj_consume_token(269);
            break;
            }
          case 270:{
            tkn = jj_consume_token(270);
            break;
            }
          default:
            jj_la1[41] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[42] = jj_gen;
          ;
        }
        numTkn = jj_consume_token(SIMPLE_NUMERIC);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return new Factory(ctx, (tkn == null ? "+" : tkn.image), /*numStr*/ numTkn.image);}
        break;
        }
      case STRING_LITERAL:{
        tkn = jj_consume_token(STRING_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return new Factory(ctx, peelShell(tkn.image));}
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        if (jj_2_9(2147483647)) {
          // the LOOKAHEAD must Be placed at position at the beginning of production
                          tuplePe = tuple(ctx);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return new Factory(ctx, tuplePe);}
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 265:{
            jj_consume_token(265);
            exp = expression(ctx);
            jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return new Factory(ctx, exp);}
            break;
            }
          case COUNT:
          case SUM:
          case LOOK_UP_CUBE:
          case PROPERTIES:
          case IIF:
          case COALESCE_EMPTY:{
            fun = common_functions(ctx);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return new Factory(ctx, fun);}
            break;
            }
          default:
            jj_la1[44] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

// support calculact with string yet not only with numeric
  final public ExpressionFunction common_functions(ContextAtExecutingMDX ctx) throws ParseException {/*@bgen(jjtree) common_functions */
        ASTcommon_functions jjtn000 = new ASTcommon_functions(this, JJTCOMMON_FUNCTIONS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);SetPE setPe;
        ExpFunCount.Option countOpt = null;
        Expression exp = null;
        Expression falseExp;
        MemberPE memberPE;
        BooleanExpression boolExp;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COUNT:{
        jj_consume_token(COUNT);
        jj_consume_token(265);
        setPe = set(ctx);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 266:{
          jj_consume_token(266);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case EXCLUDE_EMPTY:{
            jj_consume_token(EXCLUDE_EMPTY);
countOpt = ExpFunCount.Option.EXCLUDE_EMPTY;
            break;
            }
          case INCLUDE_EMPTY:{
            jj_consume_token(INCLUDE_EMPTY);
countOpt = ExpFunCount.Option.INCLUDE_EMPTY;
            break;
            }
          default:
            jj_la1[45] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[46] = jj_gen;
          ;
        }
        jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return new ExpFunCount(setPe, countOpt);}
        break;
        }
      case SUM:{
        jj_consume_token(SUM);
        jj_consume_token(265);
        setPe = set(ctx);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 266:{
          jj_consume_token(266);
          exp = expression(ctx);
          break;
          }
        default:
          jj_la1[47] = jj_gen;
          ;
        }
        jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return new ExpFunSum(ctx, setPe, exp);}
        break;
        }
      case LOOK_UP_CUBE:{
CubePE cubePe;
                        TuplePE tuplePe;
                        ExpFnLookUpCube lookUpCube = new ExpFnLookUpCube(ctx);
        jj_consume_token(LOOK_UP_CUBE);
        jj_consume_token(265);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COUNT:
        case SUM:
        case LOOK_UP_CUBE:
        case PROPERTIES:
        case IIF:
        case COALESCE_EMPTY:
        case CURRENT_MEMBER:
        case PARENT:
        case PREV_MEMBER:
        case PARALLEL_PERIOD:
        case SIMPLE_NUMERIC:
        case IDENTIFIER:
        case ID_SELECTOR:
        case STRING_LITERAL:
        case CHARACTER_BLOCK:
        case 265:
        case 269:
        case 270:{
          exp = expression(ctx);
lookUpCube.setCubeExp(exp);
          break;
          }
        case 274:{
          jj_consume_token(274);
          cubePe = cube(ctx);
lookUpCube.setCubePE(cubePe);
          break;
          }
        default:
          jj_la1[48] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(266);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 274:{
          jj_consume_token(274);
lookUpCube.setParseExpFlag(false);
          break;
          }
        default:
          jj_la1[49] = jj_gen;
          ;
        }
        exp = expression(ctx);
lookUpCube.setExp(exp);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 266:{
          jj_consume_token(266);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COUNT:
          case SUM:
          case LOOK_UP_CUBE:
          case PROPERTIES:
          case IIF:
          case COALESCE_EMPTY:
          case CURRENT_MEMBER:
          case PARENT:
          case PREV_MEMBER:
          case PARALLEL_PERIOD:
          case SIMPLE_NUMERIC:
          case IDENTIFIER:
          case ID_SELECTOR:
          case STRING_LITERAL:
          case CHARACTER_BLOCK:
          case 265:
          case 269:
          case 270:{
            exp = expression(ctx);
lookUpCube.setSpecifiedContextExp(exp);
            break;
            }
          case 274:{
            jj_consume_token(274);
            tuplePe = tuple(ctx);
lookUpCube.setTuplePE(tuplePe);
            break;
            }
          default:
            jj_la1[50] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[51] = jj_gen;
          ;
        }
        jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return lookUpCube;}
        break;
        }
      case PROPERTIES:{
        jj_consume_token(PROPERTIES);
        jj_consume_token(265);
        memberPE = member(ctx);
        jj_consume_token(266);
        exp = expression(ctx);
        jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new ExpFnProperties(ctx, memberPE, exp);}
        break;
        }
      case IIF:{
        jj_consume_token(IIF);
        jj_consume_token(265);
        boolExp = boolean_expression(ctx);
        jj_consume_token(266);
        exp = expression(ctx);
        jj_consume_token(266);
        falseExp = expression(ctx);
        jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new ExpFnIIF(boolExp, exp, falseExp);}
        break;
        }
      case COALESCE_EMPTY:{
List<Expression> expList = new LinkedList();
        jj_consume_token(COALESCE_EMPTY);
        jj_consume_token(265);
        exp = expression(ctx);
expList.add(exp);
        label_25:
        while (true) {
          jj_consume_token(266);
          exp = expression(ctx);
expList.add(exp);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 266:{
            ;
            break;
            }
          default:
            jj_la1[52] = jj_gen;
            break label_25;
          }
        }
        jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new ExpFnCoalesceEmpty(expList);}
        break;
        }
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  final public SetPE set(ContextAtExecutingMDX ctx) throws ParseException {/*@bgen(jjtree) set */
        ASTset jjtn000 = new ASTset(this, JJTSET);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);TuplePE tuplePe = null;
        SetPE setPe = null;
        List<SetPE> setPEs = new ArrayList<SetPE>();
        SetFunction setFun = null;
        MultiDimensionalDomainSelector customSetName;
        MemberPE memberPE1;
        MemberPE memberPE2;
    try {
      if (jj_2_10(2147483647)) {
        memberPE1 = member(ctx);
        jj_consume_token(275);
        memberPE2 = member(ctx);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new SetPE(ctx, memberPE1, memberPE2);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ANNOTATION_SET:{
          jj_consume_token(ANNOTATION_SET);
          customSetName = multi_dimensional_domain_select();
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return new SetPE(ctx, customSetName);}
          break;
          }
        case CURRENT_MEMBER:
        case PARENT:
        case PREV_MEMBER:
        case PARALLEL_PERIOD:
        case IDENTIFIER:
        case ID_SELECTOR:
        case CHARACTER_BLOCK:
        case 265:{
          tuplePe = tuple(ctx);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return new SetPE(ctx, tuplePe);}
          break;
          }
        case 276:{
          jj_consume_token(276);
          setPe = set(ctx);
setPEs.add(setPe);
          label_26:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 266:{
              ;
              break;
              }
            default:
              jj_la1[54] = jj_gen;
              break label_26;
            }
            jj_consume_token(266);
            setPe = set(ctx);
setPEs.add(setPe);
          }
          jj_consume_token(277);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return new SetPE(ctx, setPEs);}
          break;
          }
        case CROSS_JOIN:
        case MEMBERS:
        case FILTER:
        case CHILDREN:
        case TOP_COUNT:
        case TAIL:
        case YTD:
        case BOTTOM_PERCENT:
        case TOP_PERCENT:
        case UNION:
        case INTERSECT:
        case EXCEPT:
        case LATERAL_MEMBERS:
        case DESCENDANTS:
        case ORDER:{
          setFun = set_functions(ctx);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return new SetPE(ctx, setFun);}
          break;
          }
        default:
          jj_la1[55] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public SetFunction set_functions(ContextAtExecutingMDX ctx) throws ParseException {/*@bgen(jjtree) set_functions */
        ASTset_functions jjtn000 = new ASTset_functions(this, JJTSET_FUNCTIONS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);DimensionPE dimPe = null;
        MemberPE mbrPe = null;
        List<SetPE> setPEs;
        SetPE setPE;
        SetPE setPE2;
        Expression exp = null;
        Expression exp2;
        BooleanExpression boolExp;
        Token token = null;
        LevelPE levelPE = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MEMBERS:{
        jj_consume_token(MEMBERS);
        jj_consume_token(265);
        dimPe = dimension(ctx);
        jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new SetFunMembers(dimPe);}
        break;
        }
      case LATERAL_MEMBERS:{
        jj_consume_token(LATERAL_MEMBERS);
        jj_consume_token(265);
        mbrPe = member(ctx);
        jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
{if ("" != null) return new SetFunLateralMembers(mbrPe);}
        break;
        }
      case CROSS_JOIN:{
setPEs = new LinkedList();
        jj_consume_token(CROSS_JOIN);
        jj_consume_token(265);
        setPE = set(ctx);
setPEs.add(setPE);
        label_27:
        while (true) {
          jj_consume_token(266);
          setPE = set(ctx);
setPEs.add(setPE);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 266:{
            ;
            break;
            }
          default:
            jj_la1[56] = jj_gen;
            break label_27;
          }
        }
        jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new SetFunCrossJoin(ctx, setPEs);}
        break;
        }
      case ORDER:{
String strategy = "ASC";
        jj_consume_token(ORDER);
        jj_consume_token(265);
        setPE = set(ctx);
        jj_consume_token(266);
        exp = expression(ctx);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 266:{
          jj_consume_token(266);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ASC:{
            jj_consume_token(ASC);
            break;
            }
          case DESC:{
            jj_consume_token(DESC);
strategy = "DESC";
            break;
            }
          case BASC:{
            jj_consume_token(BASC);
strategy = "BASC";
            break;
            }
          case BDESC:{
            jj_consume_token(BDESC);
strategy = "BDESC";
            break;
            }
          default:
            jj_la1[57] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[58] = jj_gen;
          ;
        }
        jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new SetFnOrder(ctx, setPE, exp, strategy);}
        break;
        }
      case FILTER:{
        jj_consume_token(FILTER);
        jj_consume_token(265);
        setPE = set(ctx);
        jj_consume_token(266);
        boolExp = boolean_expression(ctx);
        jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new SetFnFilter(setPE, boolExp);}
        break;
        }
      case CHILDREN:{
        jj_consume_token(CHILDREN);
        jj_consume_token(265);
        mbrPe = member(ctx);
        jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new SetFnChildren(ctx, mbrPe);}
        break;
        }
      case TOP_COUNT:{
Expression countExp;
        jj_consume_token(TOP_COUNT);
        jj_consume_token(265);
        setPE = set(ctx);
        jj_consume_token(266);
        countExp = expression(ctx);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 266:{
          jj_consume_token(266);
          exp = expression(ctx);
          break;
          }
        default:
          jj_la1[59] = jj_gen;
          ;
        }
        jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new SetFnTopCount(ctx, setPE, countExp, exp);}
        break;
        }
      case EXCEPT:{
        jj_consume_token(EXCEPT);
        jj_consume_token(265);
        setPE = set(ctx);
        jj_consume_token(266);
        setPE2 = set(ctx);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 266:{
          jj_consume_token(266);
          token = jj_consume_token(ALL);
          break;
          }
        default:
          jj_la1[60] = jj_gen;
          ;
        }
        jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new SetFnExcept(setPE, setPE2, token == null ? null : token.image);}
        break;
        }
      case YTD:{
        jj_consume_token(YTD);
        jj_consume_token(265);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CURRENT_MEMBER:
        case PARENT:
        case PREV_MEMBER:
        case PARALLEL_PERIOD:
        case IDENTIFIER:
        case ID_SELECTOR:
        case CHARACTER_BLOCK:{
          mbrPe = member(ctx);
          break;
          }
        default:
          jj_la1[61] = jj_gen;
          ;
        }
        jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new SetFnYTD(ctx, mbrPe);}
        break;
        }
      case DESCENDANTS:{
SetFnDescendants.Option _option = null;
        jj_consume_token(DESCENDANTS);
        jj_consume_token(265);
        mbrPe = member(ctx);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 266:{
          jj_consume_token(266);
          levelPE = level(ctx);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 266:{
            jj_consume_token(266);
            _option = descendants_options();
            break;
            }
          default:
            jj_la1[62] = jj_gen;
            ;
          }
          break;
          }
        default:
          jj_la1[63] = jj_gen;
          ;
        }
        jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new SetFnDescendants(ctx, mbrPe, levelPE, _option);}
        break;
        }
      case TAIL:{
        jj_consume_token(TAIL);
        jj_consume_token(265);
        setPE = set(ctx);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 266:{
          jj_consume_token(266);
          exp = expression(ctx);
          break;
          }
        default:
          jj_la1[64] = jj_gen;
          ;
        }
        jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new SetFnTail(setPE, exp);}
        break;
        }
      case BOTTOM_PERCENT:
      case TOP_PERCENT:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOTTOM_PERCENT:{
          token = jj_consume_token(BOTTOM_PERCENT);
          break;
          }
        case TOP_PERCENT:{
          token = jj_consume_token(TOP_PERCENT);
          break;
          }
        default:
          jj_la1[65] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(265);
        setPE = set(ctx);
        jj_consume_token(266);
        exp2 = expression(ctx);
        jj_consume_token(266);
        exp = expression(ctx);
        jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new SetFnBottomOrTopPercent(ctx, token.image, setPE, exp2, exp);}
        break;
        }
      case UNION:{
setPEs = new LinkedList();
        jj_consume_token(UNION);
        jj_consume_token(265);
        setPE = set(ctx);
setPEs.add(setPE);
        label_28:
        while (true) {
          if (jj_2_11(2147483647)) {
            ;
          } else {
            break label_28;
          }
          jj_consume_token(266);
          setPE = set(ctx);
setPEs.add(setPE);
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 266:{
          jj_consume_token(266);
          token = jj_consume_token(ALL);
          break;
          }
        default:
          jj_la1[66] = jj_gen;
          ;
        }
        jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new SetFnUnion(ctx, setPEs, token != null);}
        break;
        }
      case INTERSECT:{
setPEs = new LinkedList();
        jj_consume_token(INTERSECT);
        jj_consume_token(265);
        setPE = set(ctx);
setPEs.add(setPE);
        label_29:
        while (true) {
          if (jj_2_12(2147483647)) {
            ;
          } else {
            break label_29;
          }
          jj_consume_token(266);
          setPE = set(ctx);
setPEs.add(setPE);
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 266:{
          jj_consume_token(266);
          token = jj_consume_token(ALL);
          break;
          }
        default:
          jj_la1[67] = jj_gen;
          ;
        }
        jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new SetFnIntersect(ctx, setPEs, token != null);}
        break;
        }
      default:
        jj_la1[68] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public SetFnDescendants.Option descendants_options() throws ParseException {/*@bgen(jjtree) descendants_options */
  ASTdescendants_options jjtn000 = new ASTdescendants_options(this, JJTDESCENDANTS_OPTIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SELF:{
        jj_consume_token(SELF);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return SetFnDescendants.Option.SELF;}
        break;
        }
      case AFTER:{
        jj_consume_token(AFTER);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
{if ("" != null) return SetFnDescendants.Option.AFTER;}
        break;
        }
      case BEFORE:{
        jj_consume_token(BEFORE);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
{if ("" != null) return SetFnDescendants.Option.BEFORE;}
        break;
        }
      case BEFORE_AND_AFTER:{
        jj_consume_token(BEFORE_AND_AFTER);
jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
{if ("" != null) return SetFnDescendants.Option.BEFORE_AND_AFTER;}
        break;
        }
      case SELF_AND_AFTER:{
        jj_consume_token(SELF_AND_AFTER);
jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
{if ("" != null) return SetFnDescendants.Option.SELF_AND_AFTER;}
        break;
        }
      case SELF_AND_BEFORE:{
        jj_consume_token(SELF_AND_BEFORE);
jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
{if ("" != null) return SetFnDescendants.Option.SELF_AND_BEFORE;}
        break;
        }
      case SELF_BEFORE_AFTER:{
        jj_consume_token(SELF_BEFORE_AFTER);
jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
{if ("" != null) return SetFnDescendants.Option.SELF_BEFORE_AFTER;}
        break;
        }
      case LEAVES:{
        jj_consume_token(LEAVES);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
{if ("" != null) return SetFnDescendants.Option.LEAVES;}
        break;
        }
      default:
        jj_la1[69] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

// boolean expression(aka: logic expression)
  final public BooleanExpression boolean_expression(ContextAtExecutingMDX ctx) throws ParseException {/*@bgen(jjtree) boolean_expression */
    ASTboolean_expression jjtn000 = new ASTboolean_expression(this, JJTBOOLEAN_EXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);BooleanTerm boolTerm;
    List<BooleanTerm> boolTermList = new LinkedList();
    try {
      boolTerm = boolean_term(ctx);
boolTermList.add(boolTerm);
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OR:{
          ;
          break;
          }
        default:
          jj_la1[70] = jj_gen;
          break label_30;
        }
        jj_consume_token(OR);
        boolTerm = boolean_term(ctx);
boolTermList.add(boolTerm);
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return new BooleanExpression(boolTermList);}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public BooleanTerm boolean_term(ContextAtExecutingMDX ctx) throws ParseException {/*@bgen(jjtree) boolean_term */
    ASTboolean_term jjtn000 = new ASTboolean_term(this, JJTBOOLEAN_TERM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);BooleanFactory boolFactory;
    List<BooleanFactory> boolFactoryList = new LinkedList();
    try {
      boolFactory = boolean_factory(ctx);
boolFactoryList.add(boolFactory);
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AND:{
          ;
          break;
          }
        default:
          jj_la1[71] = jj_gen;
          break label_31;
        }
        jj_consume_token(AND);
        boolFactory = boolean_factory(ctx);
boolFactoryList.add(boolFactory);
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return new BooleanTerm(boolFactoryList);}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public BooleanFactory boolean_factory(ContextAtExecutingMDX ctx) throws ParseException {/*@bgen(jjtree) boolean_factory */
    ASTboolean_factory jjtn000 = new ASTboolean_factory(this, JJTBOOLEAN_FACTORY);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);BooleanFactory bf;
    Expression leftExp;
    Expression rightExp;
    String lo; // logic operator string
    BooleanExpression result;
    BooleanFunction booleanFn;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:{
        jj_consume_token(NOT);
        bf = boolean_factory(ctx);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new BooleanFactory(false, bf);}
        break;
        }
      default:
        jj_la1[73] = jj_gen;
        if (jj_2_13(2147483647)) {
          leftExp = expression(ctx);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 278:{
            jj_consume_token(278);
lo = ">";
            break;
            }
          case 279:{
            jj_consume_token(279);
lo = ">=";
            break;
            }
          case 280:{
            jj_consume_token(280);
lo = "<";
            break;
            }
          case 281:{
            jj_consume_token(281);
lo = "<=";
            break;
            }
          case 264:{
            jj_consume_token(264);
lo = "=";
            break;
            }
          case 282:{
            jj_consume_token(282);
lo = "<>";
            break;
            }
          default:
            jj_la1[72] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          rightExp = expression(ctx);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new BooleanFactory(leftExp, lo, rightExp);}
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 265:{
            jj_consume_token(265);
            result = boolean_expression(ctx);
            jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new BooleanFactory(result);}
            break;
            }
          case IS_EMPTY:{
            booleanFn = boolean_function(ctx);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new BooleanFactory(booleanFn);}
            break;
            }
          default:
            jj_la1[74] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public BooleanFunction boolean_function(ContextAtExecutingMDX ctx) throws ParseException {/*@bgen(jjtree) boolean_function */
    ASTboolean_function jjtn000 = new ASTboolean_function(this, JJTBOOLEAN_FUNCTION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Expression exp;
    try {
      jj_consume_token(IS_EMPTY);
      jj_consume_token(265);
      exp = expression(ctx);
      jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return new BooleanFnIsEmpty(exp);}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public LevelPE level(ContextAtExecutingMDX ctx) throws ParseException {/*@bgen(jjtree) level */
    ASTlevel jjtn000 = new ASTlevel(this, JJTLEVEL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);MultiDimensionalDomainSelector selector;
    try {
      selector = multi_dimensional_domain_select();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return new LevelPE(ctx, selector);}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public TuplePE tuple(ContextAtExecutingMDX ctx) throws ParseException {/*@bgen(jjtree) tuple */
        ASTtuple jjtn000 = new ASTtuple(this, JJTTUPLE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);List<MemberPE> mbrPEs = new ArrayList<MemberPE>();
        MemberPE mbrPe = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CURRENT_MEMBER:
      case PARENT:
      case PREV_MEMBER:
      case PARALLEL_PERIOD:
      case IDENTIFIER:
      case ID_SELECTOR:
      case CHARACTER_BLOCK:{
        mbrPe = member(ctx);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return new TuplePE(mbrPe);}
        break;
        }
      case 265:{
        jj_consume_token(265);
        mbrPe = member(ctx);
mbrPEs.add(mbrPe);
        label_32:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 266:{
            ;
            break;
            }
          default:
            jj_la1[75] = jj_gen;
            break label_32;
          }
          jj_consume_token(266);
          mbrPe = member(ctx);
mbrPEs.add(mbrPe);
        }
        jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return new TuplePE(mbrPEs);}
        break;
        }
      default:
        jj_la1[76] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  final public MemberPE member(ContextAtExecutingMDX ctx) throws ParseException {/*@bgen(jjtree) member */
        ASTmember jjtn000 = new ASTmember(this, JJTMEMBER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);MultiDimensionalDomainSelector mbrTrail = null;
        MemberFunction memberFun = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:
      case ID_SELECTOR:
      case CHARACTER_BLOCK:{
        mbrTrail = multi_dimensional_domain_select();
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return new MemberPE(ctx, mbrTrail);}
        break;
        }
      case CURRENT_MEMBER:
      case PARENT:
      case PREV_MEMBER:
      case PARALLEL_PERIOD:{
        memberFun = member_functions(ctx);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return new MemberPE(ctx, memberFun);}
        break;
        }
      default:
        jj_la1[77] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  final public MemberFunction member_functions(ContextAtExecutingMDX ctx) throws ParseException {/*@bgen(jjtree) member_functions */
        ASTmember_functions jjtn000 = new ASTmember_functions(this, JJTMEMBER_FUNCTIONS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);DimensionPE dimPe;
        MemberPE mbrPe = null;
        LevelPE levelPE = null;
    Expression exp = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CURRENT_MEMBER:{
        jj_consume_token(CURRENT_MEMBER);
        jj_consume_token(265);
        dimPe = dimension(ctx);
        jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return new MemberFunCurrentMember(dimPe);}
        break;
        }
      case PARENT:{
        jj_consume_token(PARENT);
        jj_consume_token(265);
        mbrPe = member(ctx);
        jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return new MemberFunParent(mbrPe);}
        break;
        }
      case PREV_MEMBER:{
        jj_consume_token(PREV_MEMBER);
        jj_consume_token(265);
        mbrPe = member(ctx);
        jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new MemberFunPrevMember(mbrPe);}
        break;
        }
      case PARALLEL_PERIOD:{
        jj_consume_token(PARALLEL_PERIOD);
        jj_consume_token(265);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:
        case ID_SELECTOR:
        case CHARACTER_BLOCK:{
          levelPE = level(ctx);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 266:{
            jj_consume_token(266);
            exp = expression(ctx);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 266:{
              jj_consume_token(266);
              mbrPe = member(ctx);
              break;
              }
            default:
              jj_la1[78] = jj_gen;
              ;
            }
            break;
            }
          default:
            jj_la1[79] = jj_gen;
            ;
          }
          break;
          }
        default:
          jj_la1[80] = jj_gen;
          ;
        }
        jj_consume_token(267);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new MemberFnParallelPeriod(ctx, levelPE, exp, mbrPe);}
        break;
        }
      default:
        jj_la1[81] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  final public DimensionPE dimension(ContextAtExecutingMDX ctx) throws ParseException {/*@bgen(jjtree) dimension */
        ASTdimension jjtn000 = new ASTdimension(this, JJTDIMENSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);MultiDimensionalDomainSelector mdds = null;
    try {
      mdds = multi_dimensional_domain_select();
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new DimensionPE(ctx, mdds);}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public Axis axis_statement_def(ContextAtExecutingMDX ctx) throws ParseException {/*@bgen(jjtree) axis_statement_def */
        ASTaxis_statement_def jjtn000 = new ASTaxis_statement_def(this, JJTAXIS_STATEMENT_DEF);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);SetPE setPe = null;
//	Axis.CoordinatePosition coordPosition = null;
        Token tk = null;
        String axisAlias = null;
    try {
      setPe = set(ctx);
      jj_consume_token(ON);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SIMPLE_NUMERIC:{
        tk = jj_consume_token(SIMPLE_NUMERIC);
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
{if ("" != null) return new Axis(Integer.parseInt(tk.image), setPe);}
        break;
        }
      case COLUMNS:
      case ROWS:
      case PAGES:
      case CHAPTERS:
      case SECTIONS:{
        axisAlias = axis_alias();
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
{if ("" != null) return new Axis(axisAlias, setPe);}
        break;
        }
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public String axis_alias() throws ParseException {/*@bgen(jjtree) axis_alias */
        ASTaxis_alias jjtn000 = new ASTaxis_alias(this, JJTAXIS_ALIAS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tk = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COLUMNS:{
        tk = jj_consume_token(COLUMNS);
        break;
        }
      case ROWS:{
        tk = jj_consume_token(ROWS);
        break;
        }
      case PAGES:{
        tk = jj_consume_token(PAGES);
        break;
        }
      case CHAPTERS:{
        tk = jj_consume_token(CHAPTERS);
        break;
        }
      case SECTIONS:{
        tk = jj_consume_token(SECTIONS);
        break;
        }
      default:
        jj_la1[83] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
// return peelShell(tk.image);
                {if ("" != null) return tk.image;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public WhereStatement where_statement_def(ContextAtExecutingMDX ctx) throws ParseException {/*@bgen(jjtree) where_statement_def */
        ASTwhere_statement_def jjtn000 = new ASTwhere_statement_def(this, JJTWHERE_STATEMENT_DEF);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);TuplePE tp = null;
    try {
      tp = tuple(ctx);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new WhereStatement(tp);}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public CubePE cube(ContextAtExecutingMDX ctx) throws ParseException {/*@bgen(jjtree) cube */
        ASTcube jjtn000 = new ASTcube(this, JJTCUBE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);MultiDimensionalDomainSelector mdds = null;
    try {
      mdds = multi_dimensional_domain_select();
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new CubePE(ctx, mdds);}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public MultiDimensionalDomainSelector multi_dimensional_domain_select() throws ParseException {/*@bgen(jjtree) multi_dimensional_domain_select */
        ASTmulti_dimensional_domain_select jjtn000 = new ASTmulti_dimensional_domain_select(this, JJTMULTI_DIMENSIONAL_DOMAIN_SELECT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);MultiDimensionalDomainSelector mdds = new MultiDimensionalDomainSelector();
        MultiDimensionalDomainSelector.Part part = null;
    try {
      part = domain_selector_part();
mdds.append(part);
      label_33:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 283:{
          ;
          break;
          }
        default:
          jj_la1[84] = jj_gen;
          break label_33;
        }
        jj_consume_token(283);
        part = domain_selector_part();
mdds.append(part);
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return mdds;}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public MultiDimensionalDomainSelector.Part domain_selector_part() throws ParseException {/*@bgen(jjtree) domain_selector_part */
        ASTdomain_selector_part jjtn000 = new ASTdomain_selector_part(this, JJTDOMAIN_SELECTOR_PART);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token idSelector = null;
        Token variable = null;
        Token charBlk = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID_SELECTOR:{
        idSelector = jj_consume_token(ID_SELECTOR);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:
        case CHARACTER_BLOCK:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IDENTIFIER:{
            variable = jj_consume_token(IDENTIFIER);
            break;
            }
          case CHARACTER_BLOCK:{
            charBlk = jj_consume_token(CHARACTER_BLOCK);
            break;
            }
          default:
            jj_la1[85] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[86] = jj_gen;
          ;
        }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new MultiDimensionalDomainSelector.Part
                        (idSelector.image.substring(1), variable != null ? variable.image : (charBlk == null ? null : peelShell(charBlk.image)));}
        break;
        }
      case IDENTIFIER:
      case CHARACTER_BLOCK:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          variable = jj_consume_token(IDENTIFIER);
          break;
          }
        case CHARACTER_BLOCK:{
          charBlk = jj_consume_token(CHARACTER_BLOCK);
          break;
          }
        default:
          jj_la1[87] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new MultiDimensionalDomainSelector.Part
                        (null, variable != null ? variable.image : peelShell(charBlk.image));}
        break;
        }
      default:
        jj_la1[88] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public Double signed_double_statement() throws ParseException {/*@bgen(jjtree) signed_double_statement */
    ASTsigned_double_statement jjtn000 = new ASTsigned_double_statement(this, JJTSIGNED_DOUBLE_STATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String sign = null;
    Token valTkn = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 269:
      case 270:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 269:{
          jj_consume_token(269);
sign = "+";
          break;
          }
        case 270:{
          jj_consume_token(270);
sign = "-";
          break;
          }
        default:
          jj_la1[89] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[90] = jj_gen;
        ;
      }
      valTkn = jj_consume_token(SIMPLE_NUMERIC);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return "-".equals(sign) ? (0 - Double.parseDouble(valTkn.image)) : Double.parseDouble(valTkn.image);}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_3R_181()
 {
    if (jj_scan_token(282)) return true;
    return false;
  }

  private boolean jj_3R_180()
 {
    if (jj_scan_token(264)) return true;
    return false;
  }

  private boolean jj_3R_179()
 {
    if (jj_scan_token(281)) return true;
    return false;
  }

  private boolean jj_3R_178()
 {
    if (jj_scan_token(280)) return true;
    return false;
  }

  private boolean jj_3R_161()
 {
    if (jj_scan_token(265)) return true;
    if (jj_3R_118()) return true;
    if (jj_scan_token(267)) return true;
    return false;
  }

  private boolean jj_3R_177()
 {
    if (jj_scan_token(279)) return true;
    return false;
  }

  private boolean jj_3R_176()
 {
    if (jj_scan_token(278)) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(278)) {
    jj_scanpos = xsp;
    if (jj_scan_token(279)) {
    jj_scanpos = xsp;
    if (jj_scan_token(280)) {
    jj_scanpos = xsp;
    if (jj_scan_token(281)) {
    jj_scanpos = xsp;
    if (jj_scan_token(264)) {
    jj_scanpos = xsp;
    if (jj_scan_token(282)) return true;
    }
    }
    }
    }
    }
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(266)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_160()
 {
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) return true;
    }
    }
    }
    }
    }
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_149()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_159()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_126()
 {
    if (jj_scan_token(266)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(266)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_150()
 {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_124()
 {
    if (jj_scan_token(266)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_137()
 {
    if (jj_3R_149()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_150()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_139()
 {
    if (jj_scan_token(266)) return true;
    if (jj_3R_151()) return true;
    return false;
  }

  private boolean jj_3R_138()
 {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_137()) return true;
    return false;
  }

  private boolean jj_3R_136()
 {
    if (jj_scan_token(BDESC)) return true;
    return false;
  }

  private boolean jj_3R_119()
 {
    if (jj_scan_token(266)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_118()
 {
    if (jj_3R_137()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_138()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_120()
 {
    if (jj_scan_token(266)) return true;
    if (jj_scan_token(ALL)) return true;
    return false;
  }

  private boolean jj_3R_170()
 {
    if (jj_scan_token(LEAVES)) return true;
    return false;
  }

  private boolean jj_3R_169()
 {
    if (jj_scan_token(SELF_BEFORE_AFTER)) return true;
    return false;
  }

  private boolean jj_3R_168()
 {
    if (jj_scan_token(SELF_AND_BEFORE)) return true;
    return false;
  }

  private boolean jj_3R_167()
 {
    if (jj_scan_token(SELF_AND_AFTER)) return true;
    return false;
  }

  private boolean jj_3R_166()
 {
    if (jj_scan_token(BEFORE_AND_AFTER)) return true;
    return false;
  }

  private boolean jj_3R_165()
 {
    if (jj_scan_token(BEFORE)) return true;
    return false;
  }

  private boolean jj_3R_123()
 {
    if (jj_scan_token(266)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_164()
 {
    if (jj_scan_token(AFTER)) return true;
    return false;
  }

  private boolean jj_3R_163()
 {
    if (jj_scan_token(SELF)) return true;
    return false;
  }

  private boolean jj_3R_151()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_122()
 {
    if (jj_scan_token(266)) return true;
    if (jj_3R_132()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_101()
 {
    if (jj_scan_token(INTERSECT)) return true;
    if (jj_scan_token(265)) return true;
    if (jj_3R_44()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_126()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_127()) jj_scanpos = xsp;
    if (jj_scan_token(267)) return true;
    return false;
  }

  private boolean jj_3R_100()
 {
    if (jj_scan_token(UNION)) return true;
    if (jj_scan_token(265)) return true;
    if (jj_3R_44()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_124()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_125()) jj_scanpos = xsp;
    if (jj_scan_token(267)) return true;
    return false;
  }

  private boolean jj_3R_135()
 {
    if (jj_scan_token(BASC)) return true;
    return false;
  }

  private boolean jj_3R_99()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(233)) {
    jj_scanpos = xsp;
    if (jj_scan_token(234)) return true;
    }
    if (jj_scan_token(265)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(266)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(266)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(267)) return true;
    return false;
  }

  private boolean jj_3R_98()
 {
    if (jj_scan_token(TAIL)) return true;
    if (jj_scan_token(265)) return true;
    if (jj_3R_44()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) jj_scanpos = xsp;
    if (jj_scan_token(267)) return true;
    return false;
  }

  private boolean jj_3R_121()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_97()
 {
    if (jj_scan_token(DESCENDANTS)) return true;
    if (jj_scan_token(265)) return true;
    if (jj_3R_43()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) jj_scanpos = xsp;
    if (jj_scan_token(267)) return true;
    return false;
  }

  private boolean jj_3R_96()
 {
    if (jj_scan_token(YTD)) return true;
    if (jj_scan_token(265)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) jj_scanpos = xsp;
    if (jj_scan_token(267)) return true;
    return false;
  }

  private boolean jj_3R_95()
 {
    if (jj_scan_token(EXCEPT)) return true;
    if (jj_scan_token(265)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(266)) return true;
    if (jj_3R_44()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) jj_scanpos = xsp;
    if (jj_scan_token(267)) return true;
    return false;
  }

  private boolean jj_3R_134()
 {
    if (jj_scan_token(DESC)) return true;
    return false;
  }

  private boolean jj_3R_94()
 {
    if (jj_scan_token(TOP_COUNT)) return true;
    if (jj_scan_token(265)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(266)) return true;
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) jj_scanpos = xsp;
    if (jj_scan_token(267)) return true;
    return false;
  }

  private boolean jj_3R_116()
 {
    if (jj_scan_token(266)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_93()
 {
    if (jj_scan_token(CHILDREN)) return true;
    if (jj_scan_token(265)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(267)) return true;
    return false;
  }

  private boolean jj_3R_92()
 {
    if (jj_scan_token(FILTER)) return true;
    if (jj_scan_token(265)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(266)) return true;
    if (jj_3R_118()) return true;
    if (jj_scan_token(267)) return true;
    return false;
  }

  private boolean jj_3R_117()
 {
    if (jj_scan_token(266)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(249)) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_91()
 {
    if (jj_scan_token(ORDER)) return true;
    if (jj_scan_token(265)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(266)) return true;
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) jj_scanpos = xsp;
    if (jj_scan_token(267)) return true;
    return false;
  }

  private boolean jj_3R_147()
 {
    if (jj_scan_token(270)) return true;
    return false;
  }

  private boolean jj_3R_90()
 {
    if (jj_scan_token(CROSS_JOIN)) return true;
    if (jj_scan_token(265)) return true;
    if (jj_3R_44()) return true;
    Token xsp;
    if (jj_3R_116()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_116()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(267)) return true;
    return false;
  }

  private boolean jj_3R_89()
 {
    if (jj_scan_token(LATERAL_MEMBERS)) return true;
    if (jj_scan_token(265)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(267)) return true;
    return false;
  }

  private boolean jj_3R_158()
 {
    if (jj_scan_token(266)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_88()
 {
    if (jj_scan_token(MEMBERS)) return true;
    if (jj_scan_token(265)) return true;
    if (jj_3R_114()) return true;
    if (jj_scan_token(267)) return true;
    return false;
  }

  private boolean jj_3R_74()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_73()
 {
    if (jj_scan_token(266)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_175()
 {
    if (jj_scan_token(274)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_131()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) return true;
    }
    return false;
  }

  private boolean jj_3R_146()
 {
    if (jj_scan_token(269)) return true;
    return false;
  }

  private boolean jj_3R_112()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) jj_scanpos = xsp;
    if (jj_scan_token(SIMPLE_NUMERIC)) return true;
    return false;
  }

  private boolean jj_3R_113()
 {
    if (jj_scan_token(264)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_111()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(256)) {
    jj_scanpos = xsp;
    if (jj_scan_token(259)) return true;
    }
    return false;
  }

  private boolean jj_3R_82()
 {
    if (jj_scan_token(264)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_130()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(256)) {
    jj_scanpos = xsp;
    if (jj_scan_token(259)) return true;
    }
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_scan_token(276)) return true;
    if (jj_3R_44()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_73()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(277)) return true;
    return false;
  }

  private boolean jj_3R_79()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    }
    return false;
  }

  private boolean jj_3R_110()
 {
    if (jj_scan_token(ID_SELECTOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_155()
 {
    if (jj_scan_token(274)) return true;
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_62()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_scan_token(LOAD_CUBE_DATA)) return true;
    if (jj_scan_token(CHARACTER_BLOCK)) return true;
    if (jj_scan_token(262)) return true;
    return false;
  }

  private boolean jj_3R_61()
 {
    if (jj_scan_token(ANNOTATION_SET)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_80()
 {
    if (jj_scan_token(283)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_scan_token(SEND_VCE_NODES)) return true;
    if (jj_scan_token(STRING_LITERAL)) return true;
    if (jj_scan_token(SPACE)) return true;
    if (jj_scan_token(263)) return true;
    if (jj_scan_token(CHARACTER_BLOCK)) return true;
    Token xsp;
    if (jj_3R_55()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_55()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_43()) return true;
    if (jj_scan_token(275)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_67()
 {
    if (jj_3R_79()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_80()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_83()
 {
    if (jj_scan_token(266)) return true;
    if (jj_scan_token(CHARACTER_BLOCK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_81()
 {
    if (jj_scan_token(266)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    if (jj_3R_43()) return true;
    if (jj_scan_token(275)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_173()
 {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_70()
 {
    if (jj_scan_token(265)) return true;
    if (jj_3R_67()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_81()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(267)) return true;
    if (jj_scan_token(MEASURES)) return true;
    if (jj_scan_token(265)) return true;
    if (jj_scan_token(CHARACTER_BLOCK)) return true;
    xsp = jj_scanpos;
    if (jj_3R_82()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_83()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(267)) return true;
    return false;
  }

  private boolean jj_3R_153()
 {
    if (jj_scan_token(266)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_172()
 {
    if (jj_scan_token(INCLUDE_EMPTY)) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_3R_70()) return true;
    if (jj_scan_token(262)) return true;
    return false;
  }

  private boolean jj_3R_171()
 {
    if (jj_scan_token(EXCLUDE_EMPTY)) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_scan_token(DELETE)) return true;
    return false;
  }

  private boolean jj_3R_145()
 {
    if (jj_scan_token(COALESCE_EMPTY)) return true;
    if (jj_scan_token(265)) return true;
    if (jj_3R_45()) return true;
    Token xsp;
    if (jj_3R_158()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_158()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(267)) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_scan_token(UPDATE)) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_scan_token(INSERT)) return true;
    return false;
  }

  private boolean jj_3R_144()
 {
    if (jj_scan_token(IIF)) return true;
    if (jj_scan_token(265)) return true;
    if (jj_3R_118()) return true;
    if (jj_scan_token(266)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(266)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(267)) return true;
    return false;
  }

  private boolean jj_3R_174()
 {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_scan_token(SEND_VCE_NODES)) return true;
    if (jj_scan_token(STRING_LITERAL)) return true;
    if (jj_scan_token(SPACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(263)) jj_scanpos = xsp;
    if (jj_scan_token(CHARACTER_BLOCK)) return true;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    }
    if (jj_scan_token(CHARACTER_BLOCK)) return true;
    if (jj_3R_54()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_54()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_152()
 {
    if (jj_scan_token(266)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) return true;
    }
    return false;
  }

  private boolean jj_3R_156()
 {
    if (jj_scan_token(274)) return true;
    return false;
  }

  private boolean jj_3R_143()
 {
    if (jj_scan_token(PROPERTIES)) return true;
    if (jj_scan_token(265)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(266)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(267)) return true;
    return false;
  }

  private boolean jj_3R_157()
 {
    if (jj_scan_token(266)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) return true;
    }
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_scan_token(WRITEBACK)) return true;
    if (jj_scan_token(CUBE)) return true;
    if (jj_scan_token(CHARACTER_BLOCK)) return true;
    if (jj_scan_token(262)) return true;
    return false;
  }

  private boolean jj_3R_154()
 {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_scan_token(SEND_VCE_NODES)) return true;
    if (jj_scan_token(STRING_LITERAL)) return true;
    if (jj_scan_token(SPACE)) return true;
    if (jj_scan_token(263)) return true;
    if (jj_scan_token(CHARACTER_BLOCK)) return true;
    Token xsp;
    if (jj_3R_50()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_50()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_142()
 {
    if (jj_scan_token(LOOK_UP_CUBE)) return true;
    if (jj_scan_token(265)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) return true;
    }
    if (jj_scan_token(266)) return true;
    xsp = jj_scanpos;
    if (jj_3R_156()) jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    xsp = jj_scanpos;
    if (jj_3R_157()) jj_scanpos = xsp;
    if (jj_scan_token(267)) return true;
    return false;
  }

  private boolean jj_3R_141()
 {
    if (jj_scan_token(SUM)) return true;
    if (jj_scan_token(265)) return true;
    if (jj_3R_44()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_153()) jj_scanpos = xsp;
    if (jj_scan_token(267)) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(208)) {
    jj_scanpos = xsp;
    if (jj_scan_token(209)) return true;
    }
    if (jj_scan_token(CUBE)) return true;
    if (jj_scan_token(CHARACTER_BLOCK)) return true;
    if (jj_scan_token(262)) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_scan_token(SEND_VCE_NODES)) return true;
    if (jj_scan_token(STRING_LITERAL)) return true;
    if (jj_scan_token(SPACE)) return true;
    if (jj_scan_token(263)) return true;
    if (jj_scan_token(CHARACTER_BLOCK)) return true;
    Token xsp;
    if (jj_3R_49()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_49()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_129()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_140()
 {
    if (jj_scan_token(COUNT)) return true;
    if (jj_scan_token(265)) return true;
    if (jj_3R_44()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_152()) jj_scanpos = xsp;
    if (jj_scan_token(267)) return true;
    return false;
  }

  private boolean jj_3R_69()
 {
    if (jj_scan_token(266)) return true;
    if (jj_scan_token(CHARACTER_BLOCK)) return true;
    return false;
  }

  private boolean jj_3R_148()
 {
    if (jj_scan_token(266)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    if (jj_scan_token(266)) return true;
    if (jj_scan_token(DIMENSION)) return true;
    if (jj_scan_token(CHARACTER_BLOCK)) return true;
    if (jj_scan_token(ROLE)) return true;
    if (jj_scan_token(CHARACTER_BLOCK)) return true;
    return false;
  }

  private boolean jj_3R_133()
 {
    if (jj_scan_token(266)) return true;
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_114()
 {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_115()
 {
    if (jj_3R_132()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_scan_token(BUILD)) return true;
    if (jj_scan_token(CUBE)) return true;
    if (jj_scan_token(CHARACTER_BLOCK)) return true;
    if (jj_scan_token(265)) return true;
    if (jj_scan_token(DIMENSION)) return true;
    if (jj_scan_token(CHARACTER_BLOCK)) return true;
    if (jj_scan_token(ROLE)) return true;
    if (jj_scan_token(CHARACTER_BLOCK)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_68()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(267)) return true;
    if (jj_scan_token(MEASURES)) return true;
    if (jj_scan_token(265)) return true;
    if (jj_scan_token(CHARACTER_BLOCK)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_69()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(267)) return true;
    if (jj_scan_token(262)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_106()
 {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_scan_token(SPACE)) return true;
    if (jj_scan_token(263)) return true;
    if (jj_scan_token(CHARACTER_BLOCK)) return true;
    Token xsp;
    if (jj_3R_48()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_48()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_105()
 {
    if (jj_scan_token(265)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(267)) return true;
    return false;
  }

  private boolean jj_3R_87()
 {
    if (jj_scan_token(PARALLEL_PERIOD)) return true;
    if (jj_scan_token(265)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) jj_scanpos = xsp;
    if (jj_scan_token(267)) return true;
    return false;
  }

  private boolean jj_3R_85()
 {
    if (jj_scan_token(PARENT)) return true;
    if (jj_scan_token(265)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(267)) return true;
    return false;
  }

  private boolean jj_3R_104()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_86()
 {
    if (jj_scan_token(PREV_MEMBER)) return true;
    if (jj_scan_token(265)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(267)) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(MEMBER)) return true;
    if (jj_3R_67()) return true;
    if (jj_scan_token(262)) return true;
    return false;
  }

  private boolean jj_3R_84()
 {
    if (jj_scan_token(CURRENT_MEMBER)) return true;
    if (jj_scan_token(265)) return true;
    if (jj_3R_114()) return true;
    if (jj_scan_token(267)) return true;
    return false;
  }

  private boolean jj_3R_72()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_103()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_scan_token(SPACE)) return true;
    if (jj_scan_token(263)) return true;
    if (jj_scan_token(CHARACTER_BLOCK)) return true;
    Token xsp;
    if (jj_3R_47()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_47()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_128()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(269)) {
    jj_scanpos = xsp;
    if (jj_scan_token(270)) return true;
    }
    return false;
  }

  private boolean jj_3R_75()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_102()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_128()) jj_scanpos = xsp;
    if (jj_scan_token(SIMPLE_NUMERIC)) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(DIMENSION)) return true;
    if (jj_scan_token(CHARACTER_BLOCK)) return true;
    if (jj_scan_token(MAX_MEMBER_LEVEL)) return true;
    if (jj_scan_token(264)) return true;
    if (jj_scan_token(SIMPLE_NUMERIC)) return true;
    if (jj_scan_token(262)) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_scan_token(SPACE)) return true;
    if (jj_scan_token(263)) return true;
    if (jj_scan_token(CHARACTER_BLOCK)) return true;
    Token xsp;
    if (jj_3R_46()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_46()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_109()
 {
    if (jj_scan_token(273)) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_108()
 {
    if (jj_scan_token(272)) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_107()
 {
    if (jj_scan_token(271)) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    if (jj_scan_token(266)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_78()
 {
    if (jj_scan_token(270)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_77()
 {
    if (jj_scan_token(269)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_66()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_scan_token(265)) return true;
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_71()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(267)) return true;
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_3R_75()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_76()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_127()
 {
    if (jj_scan_token(266)) return true;
    if (jj_scan_token(ALL)) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_3R_65()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_66()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_125()
 {
    if (jj_scan_token(266)) return true;
    if (jj_scan_token(ALL)) return true;
    return false;
  }

  private boolean jj_3R_132()
 {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_182()
 {
    if (jj_scan_token(IS_EMPTY)) return true;
    if (jj_scan_token(265)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(267)) return true;
    return false;
  }

  private boolean jj_3R_162()
 {
    if (jj_3R_182()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public WormholeMDXParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[91];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static private int[] jj_la1_6;
  static private int[] jj_la1_7;
  static private int[] jj_la1_8;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
      jj_la1_init_6();
      jj_la1_init_7();
      jj_la1_init_8();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x900000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x400000,0x22000000,0x22000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_6() {
      jj_la1_6 = new int[] {0x80000,0xbe00,0xbe00,0x0,0x8be00,0x200,0x200,0x0,0x0,0x400,0x30000,0x30000,0x40000,0x0,0x3800,0x0,0x0,0x0,0x0,0x0,0x8000,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe0000000,0xff200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1f200000,0xc00000,0x0,0x0,0xff200000,0x0,0xff200000,0x0,0x0,0x1f200000,0x0,0xe0000000,0x0,0x0,0x0,0x0,0x0,0xe0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x2,0x0,0x0,0xe0000000,0xe0000000,0x0,0x0,0x0,0xe0000000,0xf8,0xf8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_7() {
      jj_la1_7 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100fffd,0x80000001,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x80000001,0x0,0x80000001,0x0,0x0,0x0,0x0,0x100fffd,0x0,0x1e000000,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x600,0x0,0x0,0x100fffc,0xff0000,0x0,0x0,0x0,0x0,0x2,0x0,0x1,0x1,0x0,0x0,0x0,0x1,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_8() {
      jj_la1_8 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x400,0x0,0x0,0x0,0x0,0x80,0x0,0x200,0x400,0x100,0x400,0x100,0x0,0x0,0x400,0x400,0x400,0x400,0x400,0x400,0x400,0x400,0x0,0x400,0x0,0x0,0x0,0x10121b,0x720f,0x6000,0x6000,0x38000,0x38000,0x6000,0x6000,0x6004,0x200,0x0,0x400,0x400,0x4620f,0x40000,0x4620f,0x400,0x400,0x0,0x400,0x10021b,0x400,0x0,0x400,0x400,0x400,0xb,0x400,0x400,0x400,0x0,0x400,0x400,0x0,0x0,0x0,0x0,0x7c00100,0x0,0x200,0x400,0x20b,0xb,0x400,0x400,0xb,0x0,0x0,0x0,0x8000000,0x9,0x9,0x9,0xb,0x6000,0x6000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[13];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public WormholeMDXParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public WormholeMDXParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new WormholeMDXParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 91; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 91; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public WormholeMDXParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new WormholeMDXParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 91; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 91; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public WormholeMDXParser(WormholeMDXParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 91; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(WormholeMDXParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 91; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[284];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 91; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
          if ((jj_la1_6[i] & (1<<j)) != 0) {
            la1tokens[192+j] = true;
          }
          if ((jj_la1_7[i] & (1<<j)) != 0) {
            la1tokens[224+j] = true;
          }
          if ((jj_la1_8[i] & (1<<j)) != 0) {
            la1tokens[256+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 284; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 13; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

//	public SimpleNode getRoot() {
//		return root;
//	}

}
